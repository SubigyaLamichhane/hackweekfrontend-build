{"version":3,"sources":["pages/_finalist/slug/scoring.js","pages/_finalist/slug/detail.js","pages/_finalist/slug/renderFinalists.js","pages/_finalist/slug/project.js","pages/_finalist/slug/index.js","pages/_finalist/index.js"],"names":["Scoring","project","user","score","slug","event","userProfile","dispatch","useDispatch","staredProject","setStaredProject","React","useState","rating","setRating","useEffect","usersThatRated","includes","sub","createElement","className","onClick","e","stopPropagation","DashboardActions","_id","disabled","StarSvg","on","EventHelpers","isEventOver","moment","location","parseFloat","toFixed","AutoPlaySwipeableViews","autoPlay","SwipeableViews","useStyles","makeStyles","theme","wrapper","width","position","maxWidth","margin","top","overflow","background","image","left","height","aspectRatio","objectFit","placeholderTop","padding","spacing","display","flexDirection","alignItems","opacity","placeholderImage","content","marginTop","backButtonWrapper","sectionTitle","textTransform","pagination","right","zIndex","color","paginationText","doneTitle","textAlign","socialIcon","cursor","playerWrapper","reactPlayer","modalStyle","transform","bgcolor","boxShadow","p","overflowY","ProjectDetail","onBack","showTableLocation","showFullTeam","scores","_event$coverImage","classes","index","setIndex","pause","setPause","score1","setScore1","score2","setScore2","score3","setScore3","score4","setScore4","score5","setScore5","score6","setScore6","setScore","feedback","setFeedback","allScores","useSelector","DashboardSelectors","comments","UserSelectors","open","setOpen","AuthSelectors","idToken","scored","setScored","console","log","handleModalOpen","handleModalClose","UserActions","globalScore","globalScore1","globalScore2","globalScore3","globalScore4","globalScore5","globalScore6","juryOrAdminClass","roles","globalUsersThatScored","Fragment","Helmet","config","PLATFORM_OWNER_NAME","name","property","punchline","images","url","SEO_IMAGE_URL","SEO_TWITTER_HANDLE","Box","Tooltip","title","style","enableMouseEvents","onChangeIndex","interval","autoplay","length","map","key","publicId","Image","defaultImage","require","coverImage","logo","Button","ArrowBackIosIcon","fontSize","Container","center","Pagination","pages","active","onChange","Typography","variant","gutterBottom","status","Tag","label","palette","theme_turquoise","main","theme_lightgray","statusTag","mt","mb","fontWeight","Markdown","source","description","locationnew","video","ReactPlayer","controls","light","loop","playbackRate","volume","muted","onReady","onStart","onBuffer","onSeek","onError","demo","href","target","rel","sourcePublic","track","renderTrack","value","find","tracks","t","ProjectTeam","hiddenUsers","hiddenMembers","teamId","team","AdditionalFiles","isFinalistVotingOpen","Modal","onClose","sx","RadioButtons","totalScore","noOfScores","previosScore","newScore","handleScoring","projectId","Comments","data","category","borderRadius","lineHeight","card_bg","card","RenderContent","projectsByRating","setSelected","ranked","Grid","container","justifyContent","md","xs","src","alt","projects","useRouteMatch","error","setError","loading","setLoading","rankedProjects","OrganiserSelectors","selected","unrankedProjects","callUnrankedProjects","filter","isWinner","found","forEach","rankedProject","onProjectSelected","useCallback","push","PageWrapper","paddingTop","paddingBottom","Dialog","transitionDuration","fullScreen","Boolean","match","params","event2","setEvent","projects2","setProjects","projectsRaw","fetchData","async","Promise","all","EventsService","getPublicEventBySlug","getFinalists","Switch","Route","path","component","Project","GlobalNavBar","Slug","Redirect","to"],"mappings":"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","file":"static/js/29.ee5c2c06.chunk.js","sourcesContent":["import StarSvg from 'components/starSvg'\nimport React, { useEffect } from 'react'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport { useDispatch, useSelector } from 'react-redux'\nimport EventHelpers from '@hackjunction/shared/helpers/events'\nimport moment from 'moment'\n\nconst Scoring = ({ project, user, score, slug, event, userProfile }) => {\n    const dispatch = useDispatch()\n    const [staredProject, setStaredProject] = React.useState(false)\n    const [rating, setRating] = React.useState(0)\n\n    useEffect(() => {\n        // dispatch(DashboardActions.getProjectsByRating(event.slug))\n        if (project && user) {\n            // @ts-ignore\n            if (project.usersThatRated.includes(user.sub)) {\n                setStaredProject(true)\n            }\n        }\n        if (project) {\n            if (project.usersThatRated.includes(user.sub)) {\n                setStaredProject(true)\n            }\n            setRating(project.rating)\n        }\n    }, [project, user])\n\n    return (\n        <div className=\"flex flex-col items-end\">\n            <div className=\"flex items-center mb-2\">\n                <button\n                    onClick={e => {\n                        e.stopPropagation()\n                        if (staredProject) {\n                            dispatch(\n                                DashboardActions.unrateProject(\n                                    project._id,\n                                    // @ts-ignore\n                                    user.sub,\n                                    slug,\n                                ),\n                            )\n                            setStaredProject(false)\n                            const newRating = rating - 1\n                            setRating(newRating)\n                        } else {\n                            dispatch(\n                                DashboardActions.rateProject(\n                                    project._id,\n                                    // @ts-ignore\n                                    user.sub,\n                                    slug,\n                                ),\n                                // @ts-ignore\n                            )\n                            setStaredProject(true)\n                            const newRating = rating + 1\n                            setRating(newRating)\n                        }\n                    }}\n                    disabled={!user}\n                >\n                    {staredProject ? (\n                        <StarSvg on={true} />\n                    ) : (\n                        <StarSvg on={false} />\n                    )}\n                </button>\n\n                {\n                    // rating of the project\n                }\n                <div className=\"ml-2\">{rating}</div>\n            </div>\n            {EventHelpers.isEventOver(event, moment, userProfile.location) && (\n                <div className=\"flex items-center\">\n                    <div>Global Score:</div>\n\n                    {\n                        // rating of the project\n                    }\n                    <div className=\"ml-2\">{parseFloat(score).toFixed(2)}</div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Scoring\n","import React, { useEffect, useState } from 'react'\n\nimport { find, filter } from 'lodash-es'\nimport { Box, Typography, Button, Tooltip, Modal } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableViews from 'react-swipeable-views'\nimport { autoPlay } from 'react-swipeable-views-utils'\nimport Image from 'components/generic/Image'\nimport Container from 'components/generic/Container'\nimport Markdown from 'components/generic/Markdown'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport config from 'constants/config'\nimport { Helmet } from 'react-helmet'\nimport { EventHelpers } from '@hackjunction/shared'\nimport ReactPlayer from 'react-player'\nimport moment from 'moment-timezone'\nimport ProjectTeam from 'components/projects/ProjectDetail/ProjectTeam'\nimport Pagination from 'components/projects/ProjectDetail/Pagination'\nimport Scoring from './scoring'\nimport theme from 'material-ui-theme'\nimport Tag from 'components/generic/Tag'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport RadioButtons from 'components/radioButtons'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as UserActions from 'redux/user/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport Dashboard from '@material-ui/icons/Dashboard'\nimport AdditionalFiles from 'components/projects/ProjectDetail/AdditionalFiles'\nimport Comments from 'components/Comment'\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews)\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        width: '100%',\n        position: 'relative',\n        maxWidth: '1920px',\n        margin: '0 auto',\n    },\n    top: {\n        width: '100%',\n        // paddingTop: '50%',\n        position: 'relative',\n        overflow: 'hidden',\n        background: 'black',\n        // [theme.breakpoints.up('lg')]: {\n        //     paddingTop: theme.breakpoints.values.lg / 2,\n        // },\n    },\n    image: {\n        // position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: 'auto',\n        background: 'black',\n        aspectRatio: '16/9',\n        objectFit: 'contain',\n    },\n    placeholderTop: {\n        background: 'black',\n        padding: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        '&:hover': {\n            opacity: 0.6,\n        },\n    },\n    placeholderImage: {\n        width: '100%',\n        maxWidth: '600px',\n    },\n    content: {\n        marginTop: theme.spacing(5),\n    },\n    backButtonWrapper: {\n        background: 'black',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n    },\n    sectionTitle: {\n        textTransform: 'uppercase',\n    },\n    pagination: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        background: 'rgba(0,0,0,0.4)',\n        zIndex: 100,\n        color: 'white',\n        padding: theme.spacing(2),\n    },\n    paginationText: {\n        color: 'white',\n    },\n    doneTitle: {\n        color: 'black',\n        textAlign: 'center',\n    },\n    socialIcon: {\n        color: 'black',\n        width: 'auto',\n        margin: '0.10rem',\n        cursor: 'pointer',\n    },\n    playerWrapper: {\n        position: 'relative',\n        height: '360px',\n    },\n    reactPlayer: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n    },\n}))\nconst modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '80%',\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n    height: '90vh',\n    overflowY: 'auto',\n}\n\nconst ProjectDetail = ({\n    project,\n    event,\n    onBack,\n    showTableLocation,\n    showFullTeam,\n    // handleScoring,\n    scores,\n}) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const [index, setIndex] = useState(0)\n    const [pause, setPause] = useState(true)\n    const [score1, setScore1] = useState(0)\n    const [score2, setScore2] = useState(0)\n    const [score3, setScore3] = useState(0)\n    const [score4, setScore4] = useState(0)\n    const [score5, setScore5] = useState(0)\n    const [score6, setScore6] = useState(0)\n    const [score, setScore] = useState(0)\n    const [feedback, setFeedback] = useState('')\n    const allScores = useSelector(DashboardSelectors.scores)\n    const comments = useSelector(DashboardSelectors.comments)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const [open, setOpen] = React.useState(false)\n    const user = useSelector(AuthSelectors.idTokenData)\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [scored, setScored] = useState(0)\n\n    console.log(project)\n\n    const handleModalOpen = () => setOpen(true)\n    const handleModalClose = () => setOpen(false)\n    const handleScoring = (projectId, score, feedback) => {\n        // dispatch(DashboardActions.giveScore(projectId, score, event.slug))\n        dispatch(DashboardActions.giveFeedback(projectId, feedback, event.slug))\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n    }\n\n    useEffect(() => {\n        // get user profile\n        dispatch(UserActions.updateUserProfile(idToken))\n    }, [idToken])\n\n    useEffect(() => {\n        if (project) {\n            dispatch(DashboardActions.getScores(project._id))\n            dispatch(DashboardActions.getComments(project._id))\n            setScore(project.globalScore)\n        }\n    }, [dispatch, project])\n\n    useEffect(() => {\n        if (allScores) {\n            console.log(allScores)\n            setScore1(allScores.globalScore1)\n            setScore2(allScores.globalScore2)\n            setScore3(allScores.globalScore3)\n            setScore4(allScores.globalScore4)\n            setScore5(allScores.globalScore5)\n            setScore6(allScores.globalScore6)\n            setFeedback(allScores.feedback)\n        }\n    }, [allScores])\n\n    if (!project) return null\n\n    // console.log(user, project)\n\n    let juryOrAdminClass =\n        'bg-black text-white rounded-md p-8 py-4 text-lg hidden'\n\n    if (user) {\n        // console.log(user)\n        // @ts-ignore\n        if (\n            user.roles.includes('SuperAdmin') ||\n            user.roles.includes('GlobalJudge')\n        ) {\n            // @ts-ignore\n            if (!project.globalUsersThatScored.includes(user.sub)) {\n                juryOrAdminClass =\n                    'bg-black text-white rounded-md p-8 py-4 text-lg'\n            }\n        }\n    }\n    console.log('project of finalist', project)\n    const renderScoreButton = () => {\n        if (\n            EventHelpers.isFinalistVotingOpen(\n                event,\n                moment,\n                userProfile.location,\n            )\n        ) {\n            if (project.status === 'final') {\n                console.log('final', userProfile)\n                if (user) {\n                    // @ts-ignore\n                    if (\n                        // @ts-ignore\n                        user.roles.includes('SuperAdmin') ||\n                        // @ts-ignore\n                        user.roles.includes('GlobalJudge')\n                    ) {\n                        if (!userProfile) {\n                            return <div> </div>\n                        }\n                        // console.log('user.roles.includes')\n                        // @ts-ignore\n                        if (\n                            project.globalUsersThatScored.includes(user.sub) ||\n                            scored\n                        ) {\n                            // alert('You have not scored this project yet')\n                            // console.log(\n                            //     '!project.usersThatScored.includes(user.sub)',\n                            // )\n                            return (\n                                <div className=\"flex flex-col justify-center items-center\">\n                                    <button\n                                        onClick={handleModalOpen}\n                                        className=\"bg-black text-white rounded-md p-8 py-4 text-lg\"\n                                    >\n                                        Update Scores\n                                    </button>\n                                </div>\n                            )\n                        } else {\n                            // console.log('else')\n                            return (\n                                <div className=\"flex flex-col justify-center items-center\">\n                                    <button\n                                        onClick={handleModalOpen}\n                                        className=\"bg-black text-white rounded-md p-8 py-4 text-lg\"\n                                    >\n                                        Score\n                                    </button>\n                                </div>\n                            )\n                        }\n                    } else return <div></div>\n                }\n            }\n        } else return <div></div>\n    }\n\n    const renderTrack = () => {\n        const value = find(event.tracks, t => t.slug === project.track)\n\n        if (!value) {\n            return <Typography variant=\"subtitle1\">No category</Typography>\n        }\n        return <Typography variant=\"subtitle1\">{value.name}</Typography>\n    }\n\n    const statusTag = status => {\n        switch (status) {\n            case 'final':\n                return (\n                    <Tag\n                        label=\"Final\"\n                        // @ts-ignore\n                        color={theme.palette.theme_turquoise.main}\n                    />\n                )\n            case 'draft':\n                return (\n                    <Tag\n                        label=\"Draft\"\n                        // @ts-ignore\n                        color={theme.palette.theme_lightgray.main}\n                    />\n                )\n            default:\n                return null\n        }\n    }\n\n    // console.log('user in finalist', project)\n\n    return (\n        <>\n            <Helmet>\n                <title>{config.PLATFORM_OWNER_NAME}</title>\n                <meta\n                    name=\"keywords\"\n                    content=\"Hackathon, hackathon platform, Junction\"\n                />\n                <meta\n                    name=\"title\"\n                    content={\n                        project ? `Harness Hackweek || ${project.name}` : ''\n                    }\n                />\n                <meta\n                    property=\"og:title\"\n                    content={\n                        project ? `Harness Hackweek || ${project.name}` : ''\n                    }\n                />\n                <meta\n                    name=\"twitter:title\"\n                    content={\n                        project ? `Harness Hackweek || ${project.name}` : ''\n                    }\n                />\n                <meta\n                    name=\"description\"\n                    content={project ? project.punchline : ''}\n                />\n                <meta\n                    property=\"og:description\"\n                    content={project ? project.punchline : ''}\n                />\n                <meta\n                    name=\"twitter:description\"\n                    content={project ? project.punchline : ''}\n                />\n                <meta name=\"og:type\" content=\"website\" />\n                <meta\n                    property=\"og:image\"\n                    content={\n                        project.images[0]\n                            ? project.images[0].url\n                            : config.SEO_IMAGE_URL\n                    }\n                />\n                <meta\n                    name=\"twitter:image\"\n                    content={\n                        project.images[0]\n                            ? project.images[0].url\n                            : config.SEO_IMAGE_URL\n                    }\n                />{' '}\n                <meta property=\"og:image:width\" content=\"1200\" />\n                <meta property=\"og:image:height\" content=\"630\" />\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                <meta name=\"twitter:site\" content={config.SEO_TWITTER_HANDLE} />\n                <meta\n                    name=\"twitter:creator\"\n                    content={config.SEO_TWITTER_HANDLE}\n                />\n            </Helmet>\n\n            <Box className={classes.wrapper}>\n                <Tooltip title={pause ? 'Click to pause' : 'Click to play'}>\n                    <Box\n                        style={{ position: 'relative' }}\n                        onClick={e => setPause(!pause)}\n                    >\n                        <AutoPlaySwipeableViews\n                            enableMouseEvents\n                            index={index}\n                            onChangeIndex={setIndex}\n                            interval={5000}\n                            autoplay={pause}\n                        >\n                            {project.images.length > 0 ? (\n                                project.images.map(image => (\n                                    <Box\n                                        key={image.publicId}\n                                        className={classes.top}\n                                    >\n                                        <Image\n                                            className={classes.image}\n                                            url={image.url}\n                                            defaultImage={require('assets/images/default_cover_image.png')}\n                                        />\n                                        {/* <img\n                                            src=\"https://res.cloudinary.com/infrastructure-ambulance/image/upload/v1679292499/hackjunction/projects/newhackathonevent1/ZJCopFFSI/so8k7h2urlarwj86jyjk.png\"\n                                            alt=\"project image\"\n                                        /> */}\n                                    </Box>\n                                ))\n                            ) : (\n                                <Box className={classes.placeholderTop}>\n                                    <Image\n                                        className={classes.placeholderImage}\n                                        publicId={event?.coverImage?.logo}\n                                        defaultImage={require('assets/images/default_cover_image.png')}\n                                    />\n                                </Box>\n                            )}\n                        </AutoPlaySwipeableViews>\n                        <Box className={classes.backButtonWrapper}>\n                            <Button onClick={onBack} style={{ color: 'white' }}>\n                                <ArrowBackIosIcon\n                                    style={{ fontSize: '14px' }}\n                                />\n                                Back\n                            </Button>\n                        </Box>\n                    </Box>\n                </Tooltip>\n                <Container center>\n                    <Pagination\n                        pages={project.images.length}\n                        active={index}\n                        onChange={setIndex}\n                    />\n                    <Box className={classes.content}>\n                        <div className=\"flex items-center justify-between\">\n                            <div className=\"mb-2 md:mb-0\">\n                                <Typography variant=\"h4\" gutterBottom>\n                                    {project.name}\n                                </Typography>\n                                {typeof project.status !== 'undefined' &&\n                                    statusTag(project.status)}\n                            </div>\n                            {user && (\n                                <Scoring\n                                    score={score}\n                                    project={project}\n                                    user={user}\n                                    slug={event.slug}\n                                    event={event}\n                                    userProfile={userProfile}\n                                />\n                            )}\n                        </div>\n\n                        <Box mt={5} mb={5}>\n                            <Typography\n                                variant=\"subtitle1\"\n                                style={{\n                                    fontWeight: 'bold',\n                                    textAlign: 'left',\n                                }}\n                            >\n                                {project.punchline}\n                            </Typography>\n                            {\n                                // @ts-ignore\n                            }\n                            <Markdown\n                                // @ts-ignore\n                                source={project.description}\n                            />\n                        </Box>\n                        {showTableLocation && project.locationnew && (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Location\n                                </Typography>\n                                <Typography variant=\"subtitle1\">\n                                    {project.locationnew}\n                                </Typography>\n                            </Box>\n                        )}\n                        {project.video ? (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    video\n                                </Typography>\n                                <div className={classes.playerWrapper}>\n                                    <ReactPlayer\n                                        url={project.video}\n                                        className={classes.reactPlayer}\n                                        width=\"100%\"\n                                        height=\"100%\"\n                                        controls\n                                        light={false}\n                                        loop={false}\n                                        playbackRate={1.0}\n                                        volume={0.8}\n                                        muted={false}\n                                        onReady={() => console.log('onReady')}\n                                        onStart={() => console.log('onStart')}\n                                        onBuffer={() => console.log('onBuffer')}\n                                        onSeek={e => console.log('onSeek', e)}\n                                        onError={e => console.log('onError', e)}\n                                    />\n                                </div>\n                            </Box>\n                        ) : (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    video\n                                </Typography>\n                                <Typography variant=\"subtitle1\">\n                                    No video available\n                                </Typography>\n                            </Box>\n                        )}\n\n                        {project.demo ? (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Demo\n                                </Typography>\n                                <a\n                                    href={project.demo}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {project.demo}\n                                </a>\n                            </Box>\n                        ) : (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Demo\n                                </Typography>\n                                <Typography variant=\"subtitle1\">\n                                    No demo available\n                                </Typography>\n                            </Box>\n                        )}\n                        {!project.sourcePublic ? (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Source code\n                                </Typography>\n                                <Typography variant=\"subtitle1\">\n                                    Source code not public\n                                </Typography>\n                            </Box>\n                        ) : (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Source code\n                                </Typography>\n                                <a\n                                    href={project.source}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {project.source}\n                                </a>\n                            </Box>\n                        )}\n                        {event && project.track && (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Category\n                                </Typography>\n                                {renderTrack()}\n                            </Box>\n                        )}\n                        {/* {event && project.challenges.length > 0 && (\n                            <Box mb={3}>\n                                <Typography\n                                    variant=\"h6\"\n                                    className={classes.sectionTitle}\n                                >\n                                    Challenges\n                                </Typography>\n                                {renderChallenges()}\n                            </Box>\n                        )} */}\n                        <Typography\n                            variant=\"h6\"\n                            className={classes.sectionTitle}\n                        >\n                            Team\n                        </Typography>\n                        <ProjectTeam\n                            // @ts-ignore\n                            hiddenUsers={project.hiddenMembers}\n                            teamId={project.team}\n                            showFullTeam={showFullTeam}\n                        />\n                        <AdditionalFiles project={project} />\n                    </Box>\n                    {renderScoreButton()}\n                    <Modal open={open} onClose={handleModalClose}>\n                        <div className=\"max-h-[90vh] overflow-y-auto\">\n                            <Box sx={modalStyle}>\n                                <Typography variant=\"h4\" gutterBottom>\n                                    Score\n                                </Typography>\n                                <Typography variant=\"subtitle1\" gutterBottom>\n                                    {project.name}\n                                </Typography>\n                                <p className=\"text-sm\">\n                                    <b>7-10</b>: High impact, scalable, clear\n                                    business case.\n                                    <br />\n                                    <b>4-6</b>: Moderate impact, some\n                                    scalability, decent business case.\n                                    <br />\n                                    <b>1-3</b>: Low impact, limited scalability,\n                                    weak business case.\n                                    <br />\n                                </p>\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        Business Value<br></br>\n                                    </span>\n                                    Does the project solve a significant\n                                    problem?<br></br>\n                                    Can it scale or be monetized effectively?\n                                </p>\n\n                                <RadioButtons\n                                    score={score1}\n                                    setScore={setScore1}\n                                    name=\"score1\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        Feasibility\n                                        <br />\n                                    </span>\n                                    How practical and realistic is\n                                    implementation?<br></br>\n                                    Can it be built and deployed within\n                                    real-world constraints?\n                                </p>\n                                <RadioButtons\n                                    score={score2}\n                                    setScore={setScore2}\n                                    name=\"score2\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        Innovation\n                                        <br />\n                                    </span>\n                                    Is the idea unique and creative?\n                                    <br />\n                                    Does it introduce new ways of solving a\n                                    problem?\n                                </p>\n                                <RadioButtons\n                                    score={score3}\n                                    setScore={setScore3}\n                                    name=\"score3\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        Technical Execution\n                                        <br />\n                                    </span>\n                                    How well is the solution built?\n                                    <br />\n                                    Is it functional, robust, and leveraging\n                                    technology effectively?\n                                </p>\n                                <RadioButtons\n                                    score={score4}\n                                    setScore={setScore4}\n                                    name=\"score4\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        User Experience\n                                        <br />\n                                    </span>\n                                    Is it intuitive and easy to use?\n                                    <br />\n                                    Does it provide a smooth and visually\n                                    appealing experience?\n                                </p>\n                                <RadioButtons\n                                    score={score5}\n                                    setScore={setScore5}\n                                    name=\"score5\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    <span className=\"font-bold\">\n                                        Presentation and Communication\n                                        <br />\n                                    </span>\n                                    Is the pitch clear, engaging, and\n                                    compelling?\n                                    <br />\n                                    Are questions handled effectively?\n                                </p>\n                                <RadioButtons\n                                    score={score6}\n                                    setScore={setScore6}\n                                    name=\"score6\"\n                                />\n                                <p className=\"text-gray-500\">\n                                    Do you have any other feedback on this\n                                    project?\n                                </p>\n                                <textarea\n                                    className=\"w-full h-24 border border-gray-300 rounded-md p-2\"\n                                    value={feedback}\n                                    onChange={e => setFeedback(e.target.value)}\n                                />\n                                <div className=\"flex justify-between\">\n                                    <button\n                                        onClick={() => {\n                                            const totalScore = (\n                                                score1 * 0.25 +\n                                                score2 * 0.25 +\n                                                score3 * 0.2 +\n                                                score4 * 0.2 +\n                                                score5 * 0.05 +\n                                                score6 * 0.05\n                                            ).toFixed(2)\n\n                                            console.log(\n                                                project.globalUsersThatScored,\n                                                scored,\n                                                'here from scoring',\n                                            )\n                                            let noOfScores =\n                                                project.globalUsersThatScored\n                                                    .length + scored\n\n                                            let previosScore =\n                                                score * noOfScores\n                                            if (\n                                                project.globalUsersThatScored.includes(\n                                                    user.sub,\n                                                ) ||\n                                                scored\n                                            ) {\n                                                noOfScores = noOfScores - 1\n                                                const previousScoreFromUser = (\n                                                    allScores.globalScore1 *\n                                                        0.25 +\n                                                    allScores.globalScore2 *\n                                                        0.25 +\n                                                    allScores.globalScore3 *\n                                                        0.2 +\n                                                    allScores.globalScore4 *\n                                                        0.2 +\n                                                    allScores.globalScore5 *\n                                                        0.05 +\n                                                    allScores.globalScore6 *\n                                                        0.05\n                                                ).toFixed(2)\n                                                previosScore =\n                                                    previosScore -\n                                                    previousScoreFromUser\n                                            } else {\n                                                setScored(1)\n                                            }\n                                            noOfScores++\n\n                                            // @ts-ignore\n                                            const newScore = parseFloat(\n                                                // @ts-ignore\n                                                (parseFloat(previosScore) +\n                                                    // @ts-ignore\n                                                    parseFloat(totalScore)) /\n                                                    parseFloat(noOfScores),\n                                            ).toFixed(2)\n\n                                            // @ts-ignore\n                                            setScore(newScore)\n\n                                            dispatch(\n                                                DashboardActions.giveAllGlobalScores(\n                                                    project._id,\n                                                    {\n                                                        globalScore1: score1,\n                                                        globalScore2: score2,\n                                                        globalScore3: score3,\n                                                        globalScore4: score4,\n                                                        globalScore5: score5,\n                                                        globalScore6: score6,\n                                                        feedback: feedback,\n                                                    },\n                                                ),\n                                            )\n\n                                            dispatch(\n                                                DashboardActions.getScores(\n                                                    project._id,\n                                                ),\n                                            )\n\n                                            handleScoring(\n                                                project._id,\n                                                totalScore,\n                                                feedback,\n                                            )\n\n                                            handleModalClose()\n                                            // DashboardActions.giveFeedback(\n                                            //     project.id,\n                                            //     feedback,\n                                            // )\n                                        }}\n                                        className=\"bg-black text-white px-4 py-2 rounded-md\"\n                                    >\n                                        Score\n                                    </button>\n                                    <button\n                                        onClick={handleModalClose}\n                                        className=\"bg-gray-600 text-white px-4 py-2 rounded-md\"\n                                    >\n                                        Cancel\n                                    </button>\n                                </div>\n                            </Box>\n                        </div>\n                    </Modal>\n                    {/* <Comments data={ } /> */}\n                    <div className=\"bg-black text-white rounded-md p-8 py-4 text-lg hidden\"></div>\n                    <div className=\"w-full p-8\">\n                        {\n                            <Comments\n                                data={comments}\n                                user={user}\n                                projectId={project._id}\n                            />\n                        }\n                    </div>\n                    <Box height={200} />\n                </Container>\n            </Box>\n        </>\n    )\n}\n\nexport default ProjectDetail\n","import Typography from '@material-ui/core/Typography'\nimport Scoring from 'pages/_dashboard/slug/rating/Scoring'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { Box, Grid } from '@material-ui/core'\nimport moment from 'moment'\nimport { EventHelpers } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    category: {\n        textTransform: 'capitalize',\n        background: '#CDF4FE',\n        borderRadius: '24px',\n        padding: '8px 16px',\n        lineHeight: 'normal',\n        color: '#0278D5',\n    },\n    content: {\n        textAlign: 'center',\n    },\n    card_bg: {\n        background: '#EFFBFF',\n        borderRadius: '8px',\n        boxShadow:\n            '0px 4px 8px 0px rgba(96, 97, 112, 0.16), 0px 0px 2px 0px rgba(40, 41, 61, 0.04)',\n        maxWidth: '388px',\n    },\n    card: {\n        padding: '24px 16px',\n    },\n}))\n\nconst RenderContent = ({ projectsByRating, setSelected, event, ranked }) => {\n    // console.log(projectsByRating)\n    const classes = useStyles()\n    // if (!projectsByRating) return <LoadingSpinner />\n    // if (projectsByRating.length === 0)\n    //     return (\n    //         <div>\n    //             The list of winners of this hackathon will be displayed in this\n    //             section once the winners have been selected.\n    //         </div>\n    //     )\n    return (\n        <Grid container spacing={3} justifyContent=\"center\">\n            {projectsByRating &&\n                projectsByRating.map((project, index) => {\n                    return (\n                        <Grid\n                            md={4}\n                            xs={6}\n                            onClick={() => {\n                                setSelected(project)\n                            }}\n                            className=\"lg:flex hover:cursor-pointer items-center justify-between text-gray-800 mb-4 p-4 rounded-lg \"\n                        >\n                            <div\n                                className={\n                                    'mb-2 lg:mb-0 justify-center items-center ' +\n                                    classes.card_bg\n                                }\n                            >\n                                {/* {ranked && (\n                                <div className=\"mr-8 text-xl font-bold\">\n                                    {index + 1 + ')'}\n                                </div>\n                            )} */}\n                                <img\n                                    src={\n                                        (project.images[0] &&\n                                            project.images[0].url) ||\n                                        'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg'\n                                    }\n                                    alt=\"project\"\n                                    className=\"w-full mr-0 lg:mr-2 object-cover rounded-md\"\n                                />\n                                <div\n                                    className={\n                                        'flex flex-col justify-start lg:flex-none mb-2 lg:mb-0 ' +\n                                        classes.card\n                                    }\n                                >\n                                    <Box\n                                        display=\"flex\"\n                                        justifyContent=\"space-between\"\n                                    >\n                                        <Typography\n                                            variant=\"body1\"\n                                            className={classes.category}\n                                        >\n                                            {project.track}\n                                        </Typography>\n                                        {project.globalScore !== null &&\n                                            EventHelpers.isEventOver(\n                                                event,\n                                                moment,\n                                                // userProfile.location,\n                                            ) && (\n                                                <Typography\n                                                    style={{\n                                                        textTransform:\n                                                            'uppercase',\n                                                    }}\n                                                    variant=\"body1\"\n                                                >\n                                                    Global Score:{' '}\n                                                    {parseFloat(\n                                                        project.globalScore,\n                                                    ).toFixed(2)}\n                                                </Typography>\n                                            )}\n                                    </Box>\n                                    <Box textAlign=\"center\">\n                                        <Typography variant=\"h6\">\n                                            {project.name}\n                                        </Typography>\n                                        {/* <Typography variant=\"body1\">\n                                        {project.punchline}\n                                    </Typography> */}\n                                        <Typography variant=\"body1\">\n                                            <h3 className=\"text-gray-800 text-md text-center mt-2\">\n                                                {project.locationnew}\n                                            </h3>\n                                        </Typography>\n                                    </Box>\n                                    {/* <Typography variant=\"body1\">\n                                    <h3 className=\" text-gray-800 text-md text-left\">\n                                        {project.description}\n                                    </h3>\n                                </Typography> */}\n                                    {/* <Typography variant=\"body1\">\n                              {project.rating}\n                          </Typography> */}\n                                </div>\n                            </div>\n                            {/* <Scoring\n                            project={project}\n                            user={user}\n                            scores={scores}\n                            slug={event.slug}\n                            event={event}\n                        /> */}\n                        </Grid>\n                    )\n                })}{' '}\n        </Grid>\n    )\n}\n\nexport default RenderContent\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useRouteMatch, useHistory, useLocation } from 'react-router'\nimport { push } from 'connected-react-router'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\nimport { Grid, Box, Typography, makeStyles, Dialog } from '@material-ui/core'\nimport EventsService from 'services/events'\nimport ProjectsService from 'services/projects'\nimport ProjectDetail from './detail'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n// import { useEventPreview } from 'graphql/queries/events';\nimport RenderContent from './renderFinalists'\n\nexport default ({ event, projects, projectId }) => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    // const { slug, projectId } = match.params // Include projectId to identify selected project\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const rankedProjects = useSelector(OrganiserSelectors.rankedProjects)\n    const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const [selected, setSelected] = useState(null) // Use null for no selection\n\n    // const { projectId } = match.params\n    console.log('project id----------------', projectId)\n\n    const callUnrankedProjects = () => {\n        let unrankedProjects = []\n        if (projects) {\n            if (rankedProjects) {\n                unrankedProjects = projectsByRating.filter(project => {\n                    if (project.isWinner) {\n                        let found = false\n                        rankedProjects.forEach(rankedProject => {\n                            if (rankedProject._id === project._id) {\n                                found = true\n                            }\n                        })\n                        if (!found) {\n                            return true\n                        }\n                    }\n                    return false\n                })\n            }\n        }\n\n        return unrankedProjects\n    }\n    const unrankedProjects = callUnrankedProjects()\n    console.log(unrankedProjects)\n\n    const renderProjectGrid = () => {\n        console.log(projects)\n        if (!event) return null\n        if (projects && projects.length === 0)\n            return (\n                <Container>\n                    <Box mt={3} textAlign=\"center\">\n                        <Typography variant=\"body1\">\n                            All the projects that are submitted by the\n                            participants will be displayed in this section of\n                            the page.\n                        </Typography>\n                    </Box>\n                </Container>\n            )\n        return (\n            <Container>\n                <RenderContent\n                    ranked={true}\n                    event={event}\n                    projectsByRating={projects}\n                    setSelected={onProjectSelected} // Use callback for selection\n                />\n                <Dialog\n                    transitionDuration={0}\n                    fullScreen\n                    open={Boolean(selected) || Boolean(projectId)} // Check for selection or URL param\n                    onClose={() => setSelected(null)}\n                >\n                    {selected || projectId ? (\n                        <ProjectDetail\n                            showFullTeam={true}\n                            project={\n                                selected ||\n                                projects.find(p => p._id === projectId)\n                            } // Find project by ID\n                            event={event}\n                            onBack={() => {\n                                setSelected(null)\n                                dispatch(push(`/finalist/${event.slug}`)) // Update URL on close\n                            }}\n                            showTableLocation={true}\n                        />\n                    ) : null}\n                </Dialog>\n            </Container>\n        )\n    }\n\n    const onProjectSelected = useCallback(\n        project => {\n            setSelected(project)\n            dispatch(push(`/finalist/${event.slug}/view/${project._id}`))\n        },\n        [dispatch, event.slug],\n    )\n\n    return (\n        <PageWrapper>\n            <Box textAlign=\"center\" paddingTop=\"50px\" paddingBottom=\"20px\">\n                <div className=\"w-full flex justify-center\">\n                    <div className=\"w-full flex justify-start max-w-4xl \">\n                        <button\n                            className=\"text-xl\"\n                            onClick={() =>\n                                dispatch(push(`/events/${event.slug}`))\n                            }\n                        >\n                            {'<'} Back\n                        </button>{' '}\n                    </div>\n                </div>\n                <h1 className=\"text-3xl\">Finalists</h1>\n            </Box>\n            {renderProjectGrid()}\n        </PageWrapper>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useRouteMatch } from 'react-router'\nimport { push } from 'connected-react-router'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\nimport { Grid, Box, Typography, makeStyles } from '@material-ui/core'\nimport EventsService from 'services/events'\nimport ProjectsService from 'services/projects'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport Project from './project'\n// import { useEventPreview } from 'graphql/queries/events'\n\nexport default () => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { slug, projectId } = match.params\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [event2, setEvent] = useState()\n    const [projects2, setProjects] = useState([])\n    const event = useSelector(DashboardSelectors.event)\n    const projectsRaw = useSelector(DashboardSelectors.projectsByRating)\n    const rankedProjects = useSelector(OrganiserSelectors.rankedProjects)\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    console.log('projectsRaw', projectsRaw)\n    const projects = !projectsRaw\n        ? []\n        : projectsRaw.filter(project => project.isWinner)\n    console.log('projects', projects)\n    console.log('event', event)\n    console.log('projectId', projectId)\n\n    useEffect(() => {\n        dispatch(DashboardActions.updateEvent(slug))\n    }, [dispatch, slug])\n\n    useEffect(() => {\n        if (event && event.slug) {\n            console.log(event.slug)\n            // dispatch(OrganiserActions.getUnrankedProjects(event.slug))\n            dispatch(DashboardActions.getProjectsByRating(event.slug))\n            // dispatch(OrganiserActions.(event.slug))\n        }\n    }, [dispatch, event])\n\n    // TODO use Graphql here to get event\n    // useEventPreview(eventId) but with slug\n    const fetchData = useCallback(async () => {\n        setLoading(true)\n        try {\n            const [event, projects] = await Promise.all([\n                EventsService.getPublicEventBySlug(slug),\n                EventsService.getFinalists(idToken, slug),\n            ])\n            if (!event) {\n                dispatch(push('/'))\n            }\n            setEvent(event)\n            setProjects(projects)\n        } catch (e) {\n            setError(true)\n        } finally {\n            console.log('here')\n            setLoading(false)\n        }\n    }, [dispatch, slug])\n\n    useEffect(() => {\n        fetchData()\n    }, [fetchData])\n\n    //First two routes are for challenge link cases\n    // TODO make this more modulary\n\n    return (\n        <PageWrapper loading={loading} error={error}>\n            <Switch>\n                {/** Hide the rest of these routes if the gallery isn't open */}\n                <Route\n                    path={`${match.url}/view/:projectId`}\n                    component={({ match }) => (\n                        <Project\n                            projectId={match.params.projectId}\n                            event={event}\n                            match={match}\n                            projects={projects}\n                        />\n                    )}\n                />\n\n                {/* <Route\n                    path={`${match.url}/:slug`}\n                    component={({ match }) => ( */}\n                <Project\n                    projectId={match.params.projectId}\n                    event={event}\n                    projects={projects}\n                />\n                {/* )} */}\n                {/* /> */}\n\n                {/* <Redirect to=\"/\" /> */}\n            </Switch>\n        </PageWrapper>\n    )\n}\n","import React from 'react'\n\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport { useRouteMatch } from 'react-router'\nimport Slug from './slug'\nimport GlobalNavBar from 'components/navbars/GlobalNavBar'\nimport Project from './slug/project'\n\nexport default () => {\n    const match = useRouteMatch()\n\n    return (\n        <>\n            <GlobalNavBar />\n            <Switch>\n                <Route path={`${match.url}/:slug`} component={Slug} />\n\n                <Redirect to=\"/\" />\n            </Switch>\n        </>\n    )\n}\n"],"sourceRoot":""}