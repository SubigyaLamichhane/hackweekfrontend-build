{"version":3,"sources":["../node_modules/@material-ui/icons/Edit.js","components/events/EventCardSmall/index.js","../node_modules/@material-ui/icons/ThumbUp.js","pages/_admin/default/NewBannerForm.js","pages/_admin/default/BannerList.js","pages/_admin/default/UnapprovedEvents.js","pages/_admin/default/EventPriority.js","pages/_admin/default/index.js","redux/admin/selectors.js","services/admin.js","services/organization.js","redux/admin/actions.js","pages/_admin/hackerpack/index.js","pages/_admin/banner/index.js","pages/_admin/organization/index.js","pages/_admin/index.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","useStyles","makeStyles","theme","paper","borderRadius","overflow","boxShadow","cursor","position","transition","image","objectFit","height","width","minHeight","event","handleClick","_event$coverImage","classes","onClick","useCallback","Paper","className","Grid","container","spacing","item","xs","md","Image","defaultImage","publicId","coverImage","transformation","Box","display","flexDirection","justifyContent","p","Typography","variant","_eventTimeFormatted","name","_eventLocationFormatted","t","useTranslation","setName","useState","error","setError","loading","setLoading","hasError","Boolean","dispatch","useDispatch","idToken","useSelector","AuthSelectors","useEffect","length","checkName","handleCreate","BannerService","createBanner","then","data","console","log","push","slug","SnackbarActions","catch","e","finally","mt","gutterBottom","direction","alignItems","color","sm","TextInput","label","placeholder","onChange","disabled","Button","fullWidth","banner","setBanner","getAllBanners","pack","handleRemove","deleteBanner","filter","obj","map","company","key","IconButton","edge","aria-label","DeleteIcon","EditIcon","icon","buttons","i","Fragment","text","Divider","events","setEvents","approved","setApproved","EventService","getUnapprovedEvents","deleteEventBySlugAsOrganiser","handleApprove","async","published","ThumbUpIcon","style","EventCardSmall","getPublicEvents","setFrontpagePriority","frontPagePriority","PageWrapper","header","GlobalNavBar","footer","Footer","render","Container","center","UnapprovedEvents","NewBannerForm","BannerList","EventPriority","usersUpdated","state","admin","rolesUpdated","createSelector","updated","Date","now","AdminService","config","headers","Authorization","getRoles","axios","get","res","getUsers","OrganizationService","createOrganization","_axios","post","updateOrganization","patch","getOrganizationBySlug","deleteOrganization","delete","getOrganizations","topWrapper","background","padding","breakpoints","up","box","imageUpload","match","useRouteMatch","params","initialData","setInitialData","HackerpackService","getHackerpackBySlug","validationSchema","validations","yup","url","nullable","handleSubmit","values","formikBag","setSubmitting","editHackerpack","getState","updateHackerpack","AdminActions","err","Formik","props","shape","enableReinitialize","initialValues","onSubmit","formikProps","flex","FastField","field","form","setFieldValue","onBlur","setFieldTouched","MarkdownInput","multiline","ImageUpload","undefined","uploadUrl","resizeMode","BottomBar","errors","dirty","isSubmitting","router","getBannerBySlug","of","newVal","editBanner","updateBanner","FieldArray","type","editOrganization","Switch","Route","exact","path","component","DefaultPage","HackerpackForm","BannerForm","OrganizationForm","Redirect","to"],"mappings":"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","file":"static/js/27.9349f5be.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","import React, { useCallback } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Paper, Grid, Box, Typography } from '@material-ui/core'\n\nimport Image from 'components/generic/Image'\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        borderRadius: '10px',\n        overflow: 'hidden',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.04)',\n        cursor: 'pointer',\n        position: 'relative',\n        transition: 'all 0.2s ease',\n        '&:hover': {\n            boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        },\n    },\n    image: {\n        objectFit: 'cover',\n        height: '100%',\n        width: '100%',\n        minHeight: '130px',\n    },\n}))\n\nexport default ({ event, handleClick }) => {\n    /*\n    if (!event.slug) {\n        return 'loading'\n    }\n    console.log('event is', event)\n    */\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        handleClick(event)\n    }, [event, handleClick])\n\n    return event ? (\n        <Paper className={classes.paper} onClick={onClick}>\n            <Grid container spacing={0}>\n                <Grid item xs={12} md={3}>\n                    <Image\n                        className={classes.image}\n                        defaultImage={require('assets/images/default_cover_image.png')}\n                        publicId={event.coverImage?.publicId}\n                        transformation={{\n                            width: 400,\n                            height: 150,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} md={9}>\n                    <Box\n                        height=\"100%\"\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"center\"\n                        p={2}\n                    >\n                        <Typography variant=\"button\">\n                            {event._eventTimeFormatted}\n                        </Typography>\n                        <Typography variant=\"h6\">{event.name}</Typography>\n                        <Typography variant=\"subtitle1\">\n                            {event._eventLocationFormatted}\n                        </Typography>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Paper>\n    ) : null\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z\"\n}), 'ThumbUp');\n\nexports.default = _default;","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { push } from 'connected-react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Grid, Box, Typography } from '@material-ui/core'\n\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nimport BannerService from 'services/banner'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useTranslation } from 'react-i18next'\nexport default () => {\n    const { t } = useTranslation()\n    const [name, setName] = useState('')\n    const [error, setError] = useState()\n    const [loading, setLoading] = useState(false)\n    const hasError = Boolean(error)\n\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    useEffect(() => {\n        if (hasError) {\n            if (name.length < 5) {\n                setError(t('Name_must_five_'))\n            } else if (name.length >= 50) {\n                setError(t('Name_must_under_'))\n            } else {\n                setError()\n            }\n        }\n    }, [name, hasError, t])\n\n    const checkName = useCallback(() => {\n        if (name.length < 5) {\n            setError(t('Name_must_five_'))\n            return false\n        } else if (name.length >= 50) {\n            setError(t('Name_must_under_'))\n            return false\n        }\n        return true\n    }, [name.length, t])\n\n    const handleCreate = useCallback(() => {\n        if (!checkName()) return\n        setLoading(true)\n        BannerService.createBanner(idToken, { name })\n            .then(data => {\n                console.log('doing data', data)\n                dispatch(push(`/admin/banner/${data.slug}`))\n                dispatch(SnackbarActions.success(`Created ${data.name}`))\n            })\n            .catch(e => {\n                dispatch(\n                    SnackbarActions.error(t('Unable_to_create_banner_')), //\n                )\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [checkName, idToken, name, dispatch, t])\n\n    return (\n        <Box mt={3}>\n            <Typography variant=\"h6\" gutterBottom>\n                Create new frontpage banner\n            </Typography>\n            <Grid container spacing={2} direction=\"row\" alignItems=\"flex-end\">\n                <Grid item xs={12}>\n                    <Typography variant=\"caption\" color=\"error\">\n                        {error}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} sm={9}>\n                    <TextInput\n                        label=\"Banner name\"\n                        placeholder=\"Banner name\"\n                        value={name}\n                        onChange={setName}\n                        disabled={loading}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={3}>\n                    <Button\n                        disabled={hasError}\n                        onClick={handleCreate}\n                        loading={loading}\n                        fullWidth\n                        color=\"primary\"\n                        variant=\"contained\"\n                    >\n                        {t('Create_')}\n                    </Button>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { Grid, Box, Typography } from '@material-ui/core'\n\nimport Divider from 'components/generic/Divider'\n\nimport { useTranslation } from 'react-i18next'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\n\nimport BannerService from 'services/banner'\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nexport default ({ data = [] }) => {\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [banner, setBanner] = useState(data)\n    useEffect(() => {\n        BannerService.getAllBanners().then(pack => {\n            if (pack) setBanner(pack)\n        })\n    }, [])\n\n    const handleRemove = useCallback(\n        slug => {\n            BannerService.deleteBanner(idToken, slug)\n            setBanner(\n                banner.filter(function (obj) {\n                    return obj.slug !== slug\n                }),\n            )\n        },\n        [banner, idToken],\n    )\n\n    return (\n        <Box mt={3}>\n            {/* <Typography variant=\"h6\" gutterBottom>\n                {t('Your_hackerpack_')}\n            </Typography> */}\n            <Grid container spacing={3}>\n                {banner.map(company => (\n                    <div key={company.slug}>\n                        <Box p={2}>\n                            <IconButton\n                                edge=\"end\"\n                                aria-label=\"delete\"\n                                onClick={() => handleRemove(company.slug)}\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                            <IconButton\n                                edge=\"end\"\n                                aria-label=\"edit\"\n                                onClick={() =>\n                                    dispatch(\n                                        push(`admin/banner/${company.slug}`),\n                                    )\n                                }\n                            >\n                                <EditIcon />\n                            </IconButton>\n                            <span>{company.name}</span>\n                            <span>{company.icon}</span>\n                            {company.buttons.map(i => (\n                                <>\n                                    <span>{i.text}</span> <span>{i.push}</span>\n                                </>\n                            ))}\n                        </Box>\n                        <Divider variant=\"middle\" />\n                    </div>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport EventCardSmall from 'components/events/EventCardSmall'\nimport Divider from 'components/generic/Divider'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport { useTranslation } from 'react-i18next'\nimport { IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'\n\nimport EventService from 'services/events'\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nexport default ({ data = [] }) => {\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [events, setEvents] = useState(data)\n    const [approved, setApproved] = React.useState(false)\n\n    useEffect(() => {\n        EventService.getUnapprovedEvents(idToken).then(e => {\n            if (e) {\n                setEvents(e)\n            }\n        })\n    }, [idToken])\n\n    const handleRemove = useCallback(\n        slug => {\n            EventService.deleteEventBySlugAsOrganiser(idToken, slug)\n            setEvents(\n                events.filter(function (obj) {\n                    return obj.slug !== slug\n                }),\n            )\n        },\n        [events, idToken],\n    )\n\n    const handleApprove = useCallback(\n        async slug => {\n            try {\n                await EventService.setApproved(idToken, slug, true)\n                setApproved(true)\n            } catch (error) {\n                // handle error\n                console.log(error)\n                dispatch(\n                    SnackbarActions.error(\n                        'All the required details for an event are not there.',\n                    ),\n                )\n            }\n        },\n        [idToken],\n    )\n\n    return (\n        <Box mt={3}>\n            <Typography variant=\"h6\" gutterBottom>\n                {t('unapproved_events_')}\n            </Typography>\n            <Grid container spacing={3}>\n                {events.map(event =>\n                    event.published ? (\n                        <div key={event.slug}>\n                            <Box p={2}>\n                                <IconButton\n                                    edge=\"end\"\n                                    aria-label=\"delete\"\n                                    onClick={() => handleRemove(event.slug)}\n                                >\n                                    <DeleteIcon />\n                                </IconButton>\n                                <IconButton\n                                    edge=\"end\"\n                                    aria-label=\"Approve\"\n                                    onClick={() => handleApprove(event.slug)}\n                                >\n                                    <ThumbUpIcon\n                                        style={{\n                                            color: approved ? 'blue' : '',\n                                        }}\n                                    />\n                                </IconButton>\n                                <EventCardSmall\n                                    event={event}\n                                    handleClick={event =>\n                                        dispatch(\n                                            push(\n                                                `/organise/${event?.slug}/edit`,\n                                            ),\n                                        )\n                                    }\n                                />\n                            </Box>\n                            <Divider variant=\"middle\" />\n                        </div>\n                    ) : null,\n                )}\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport Divider from 'components/generic/Divider'\n\nimport { useTranslation } from 'react-i18next'\n\nimport EventService from 'services/events'\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nexport default ({ data = [] }) => {\n    const { t } = useTranslation()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [events, setEvents] = useState(data)\n    //TODO add state for counter component\n\n    useEffect(() => {\n        EventService.getPublicEvents().then(e => {\n            if (e) setEvents(e)\n        })\n    }, [])\n\n    const handleClick = useCallback(\n        (event, i) => {\n            EventService.setFrontpagePriority(\n                idToken,\n                event.slug,\n                event.frontPagePriority + i,\n            )\n        },\n        [idToken],\n    )\n\n    return (\n        <Box mt={3}>\n            <Typography variant=\"h6\" gutterBottom>\n                {t('event_priority_')}\n            </Typography>\n            <Grid container spacing={3}>\n                {events.map(event => (\n                    <>\n                        <Box p={2}>\n                            {event.slug}\n                            <button onClick={() => handleClick(event, 1)}>\n                                +\n                            </button>\n                            {event.frontPagePriority}\n                            <button onClick={() => handleClick(event, -1)}>\n                                -\n                            </button>\n                        </Box>\n                        <Divider variant=\"middle\" />\n                    </>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport GlobalNavBar from 'components/navbars/GlobalNavBar'\nimport Footer from 'components/layouts/Footer'\n\nimport Container from 'components/generic/Container'\n\n// import NewHackerpackForm from './NewHackerpackForm'\n// import HackerpackList from './HackerpackList'\n\n// import NewOrganizationForm from './NewOrganizationForm'\n// import OrganizationList from './OrganizationList'\nimport NewBannerForm from './NewBannerForm'\nimport BannerList from './BannerList'\n\nimport UnapprovedEvents from './UnapprovedEvents'\nimport EventPriority from './EventPriority'\n\nexport default () => {\n    return (\n        <PageWrapper\n            header={() => <GlobalNavBar />}\n            footer={() => <Footer />}\n            render={() => (\n                <Container center>\n                    {/* <NewHackerpackForm /> */}\n                    {/* <HackerpackList /> */}\n\n                    {/* <NewOrganizationForm />\n                    <OrganizationList /> */}\n\n                    <UnapprovedEvents />\n                    <NewBannerForm />\n                    <BannerList />\n\n                    <EventPriority />\n                </Container>\n            )}\n        />\n    )\n}\n","import { createSelector } from 'reselect'\n\nexport const getUsers = state => state.admin.users\nexport const usersLoading = state => state.admin.usersLoading\nexport const usersError = state => state.admin.usersError\nexport const usersUpdated = state => state.admin.usersUpdated\n\nexport const usersShouldUpdate = createSelector(\n    usersUpdated,\n    updated => Date.now() - usersUpdated > 1000 * 60 * 5,\n)\n\nexport const getRoles = state => state.admin.roles\nexport const rolesLoading = state => state.admin.rolesLoading\nexport const rolesError = state => state.admin.rolesError\nexport const rolesUpdated = state => state.admin.rolesUpdated\n\nexport const rolesShouldUpdate = createSelector(\n    rolesUpdated,\n    updated => Date.now() - rolesUpdated > 1000 * 60 * 5,\n)\n\nexport const getUsersFilters = state => state.admin.usersFilters\nexport const getUsersFiltersRoles = state => state.admin.usersFilters.roles\nexport const getUsersFiltersSortBy = state => state.admin.usersFilters.sortBy\n","import axios from 'axios'\n\nconst AdminService = {}\n\nfunction config(idToken) {\n    return {\n        headers: {\n            Authorization: `Bearer ${idToken}`,\n        },\n    }\n}\n\nAdminService.getRoles = idToken => {\n    return axios.get('/admin/roles', config(idToken)).then(res => res.data)\n}\n\nAdminService.getUsers = idToken => {\n    return axios.get('/admin/users', config(idToken)).then(res => res.data)\n}\n\nexport default AdminService\n","import _axios from 'services/axios'\n\nconst OrganizationService = {}\n\nfunction config(idToken) {\n    return {\n        headers: {\n            Authorization: `Bearer ${idToken}`,\n        },\n    }\n}\n\nconst BASE_ROUTE = '/organization'\n\nOrganizationService.createOrganization = (idToken, data) => {\n    return _axios.post(`${BASE_ROUTE}`, data, config(idToken))\n}\n\nOrganizationService.updateOrganization = (idToken, slug, data) => {\n    return _axios.patch(`${BASE_ROUTE}/${slug}`, data, config(idToken))\n}\n\nOrganizationService.getOrganizationBySlug = slug => {\n    return _axios.get(`${BASE_ROUTE}/${slug}`)\n}\n\nOrganizationService.deleteOrganization = (idToken, slug) => {\n    return _axios.delete(`${BASE_ROUTE}/${slug}`, config(idToken))\n}\n\nOrganizationService.getOrganizations = () => {\n    return _axios.get(`${BASE_ROUTE}`)\n}\n\nexport default OrganizationService\n","import { filter, concat } from 'lodash-es'\n\nimport * as ActionTypes from './actionTypes'\nimport { getUsersFiltersRoles } from './selectors'\n\nimport { getIdToken } from 'redux/auth/selectors'\nimport AdminService from 'services/admin'\n\nimport HackerpackService from 'services/hackerpack'\nimport BannerService from 'services/banner'\nimport OrganizationService from 'services/organization'\n\nexport const updateUsers = () => (dispatch, getState) => {\n    const idToken = getIdToken(getState())\n    dispatch({\n        type: ActionTypes.LOAD_USERS,\n        promise: AdminService.getUsers(idToken),\n        meta: {\n            onFailure: e => console.log('Error in updateUsers', e),\n        },\n    })\n}\n\nexport const updateRoles = () => (dispatch, getState) => {\n    const idToken = getIdToken(getState())\n    dispatch({\n        type: ActionTypes.LOAD_ROLES,\n        promise: AdminService.getRoles(idToken),\n        meta: {\n            onFailure: e => console.log('Error in updateRoles', e),\n        },\n    })\n}\n\nexport const toggleUsersFiltersRole = role => (dispatch, getState) => {\n    const roles = getUsersFiltersRoles(getState())\n    let newRoles\n    if (roles.indexOf(role) !== -1) {\n        newRoles = filter(roles, r => r !== role)\n    } else {\n        newRoles = concat(roles, role)\n    }\n\n    dispatch({\n        type: ActionTypes.SET_USERS_FILTERS_ROLES,\n        payload: newRoles,\n    })\n}\n\nexport const toggleUsersFiltersSortBy = field => dispatch => {\n    dispatch({\n        type: ActionTypes.SET_USERS_FILTERS_SORT_BY,\n        payload: field,\n    })\n}\n\nexport const editHackerpack =\n    (idToken, slug, values) => async (dispatch, getState) => {\n        const hackerpack = await HackerpackService.updateHackerpack(\n            idToken,\n            slug,\n            values,\n        )\n        return hackerpack\n    }\n\nexport const editBanner =\n    (idToken, slug, values) => async (dispatch, getState) => {\n        const ad = await BannerService.updateBanner(idToken, slug, values)\n        return ad\n    }\n\nexport const editOrganization =\n    (idToken, slug, values) => async (dispatch, getState) => {\n        const organization = await OrganizationService.updateOrganization(\n            idToken,\n            slug,\n            values,\n        )\n        return organization\n    }\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { Box, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Formik, FastField } from 'formik'\nimport * as yup from 'yup'\n\nimport ImageUpload from 'components/inputs/ImageUpload'\nimport TextInput from 'components/inputs/TextInput'\nimport BottomBar from 'components/inputs/BottomBar'\n\nimport MarkdownInput from 'components/inputs/MarkdownInput'\n\nimport HackerpackService from 'services/hackerpack'\n\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as AdminActions from 'redux/admin/actions'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport { useTranslation } from 'react-i18next'\nconst useStyles = makeStyles(theme => ({\n    topWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 15px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n        },\n    },\n    box: {\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n    },\n    imageUpload: {\n        width: '300px',\n        height: '300px',\n    },\n}))\n\nexport default () => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const { slug } = match.params\n\n    const [initialData, setInitialData] = useState({})\n\n    useEffect(() => {\n        HackerpackService.getHackerpackBySlug(slug).then(data => {\n            if (data) setInitialData(data)\n        })\n    }, [slug])\n\n    const classes = useStyles()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const validationSchema = useCallback(data => {\n        const validations = {}\n        validations['name'] = yup.string()\n        validations['description'] = yup.string()\n        validations['link'] = yup.string().url()\n        validations['icon'] = yup.string().url().nullable()\n        return validations\n    }, [])\n\n    const handleSubmit = useCallback(\n        (values, formikBag) => {\n            formikBag.setSubmitting(true)\n            dispatch(AdminActions.editHackerpack(idToken, slug, values))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                    dispatch(push(`/admin`))\n                })\n                .catch(err => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... Please try again',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    formikBag.setSubmitting(false)\n                })\n        },\n        [dispatch, idToken, slug],\n    )\n\n    return (\n        <Formik\n            validationSchema={props => {\n                return yup.lazy(values => {\n                    return yup.object().shape(validationSchema(values))\n                })\n            }}\n            enableReinitialize\n            initialValues={initialData}\n            onSubmit={handleSubmit}\n        >\n            {formikProps => (\n                <>\n                    <Box className={classes.topWrapper}>\n                        <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n                            <Grid container spacing={3}>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"name\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={t('Name_')}\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"description\"\n                                        render={({ field, form }) => (\n                                            <MarkdownInput\n                                                label={t('Description_')}\n                                                multiline\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"icon\"\n                                        render={({ field, form }) => (\n                                            <Box\n                                                width=\"100%\"\n                                                height=\"100%\"\n                                                borderRadius=\"50%\"\n                                                overflow=\"hidden\"\n                                                position=\"relative\"\n                                            >\n                                                <ImageUpload\n                                                    value={\n                                                        field.value\n                                                            ? {\n                                                                  url: field.value,\n                                                              }\n                                                            : undefined\n                                                    }\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value\n                                                                ? value.url\n                                                                : null,\n                                                        )\n                                                    }\n                                                    uploadUrl={`/api/upload/hackerpack/${slug}/icon/`}\n                                                    resizeMode=\"cover\"\n                                                />\n                                            </Box>\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"link\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={t('Link_')}\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Box>\n                    <BottomBar\n                        onSubmit={formikProps.handleSubmit}\n                        errors={formikProps.errors}\n                        dirty={formikProps.dirty}\n                        loading={formikProps.isSubmitting}\n                    />\n                </>\n            )}\n        </Formik>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Formik, FastField, FieldArray } from 'formik'\nimport * as yup from 'yup'\n\nimport ImageUpload from 'components/inputs/ImageUpload'\nimport TextInput from 'components/inputs/TextInput'\nimport BottomBar from 'components/inputs/BottomBar'\n\nimport BannerService from 'services/banner'\n\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as AdminActions from 'redux/admin/actions'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport { useTranslation } from 'react-i18next'\nimport Button from 'components/generic/Button'\nconst useStyles = makeStyles(theme => ({\n    topWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 15px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n        },\n    },\n    box: {\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n    },\n    imageUpload: {\n        width: '300px',\n        height: '300px',\n    },\n}))\n\nexport default () => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const { slug } = match.params\n    const router = match\n    console.log('router :>> ', router)\n\n    const [initialData, setInitialData] = useState({})\n\n    useEffect(() => {\n        BannerService.getBannerBySlug(slug).then(data => {\n            if (data) setInitialData(data)\n        })\n    }, [slug])\n\n    const classes = useStyles()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const validationSchema = useCallback(data => {\n        const validations = {}\n        validations['name'] = yup.string()\n        validations['buttons'] = yup\n            .array()\n            .of(yup.object().shape({ text: yup.string(), push: yup.string() }))\n        validations['icon'] = yup.string().url().nullable()\n        return validations\n    }, [])\n\n    const handleSubmit = useCallback(\n        (values, formikBag) => {\n            console.log(values)\n            const newVal = {\n                buttons: values.buttons,\n                name: values.name,\n                icon: values.icon,\n            }\n            formikBag.setSubmitting(true)\n            dispatch(AdminActions.editBanner(idToken, slug, newVal))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                    dispatch(push(`/admin`))\n                })\n                .catch(err => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... Please try again',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    formikBag.setSubmitting(false)\n                })\n        },\n        [dispatch, idToken, slug],\n    )\n\n    return (\n        <Formik\n            validationSchema={props => {\n                return yup.lazy(values => {\n                    return yup.object().shape(validationSchema(values))\n                })\n            }}\n            initialValues={initialData}\n            enableReinitialize\n            onSubmit={handleSubmit}\n        >\n            {formikProps => (\n                <>\n                    <Box className={classes.topWrapper}>\n                        <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n                            <Grid container spacing={3}>\n                                <Grid item xs={12} md={6}>\n                                    <Grid container direction=\"column\">\n                                        <Grid item xs={12} md={12}>\n                                            <FastField\n                                                name=\"name\"\n                                                render={({ field, form }) => (\n                                                    <TextInput\n                                                        label={t('Name_')}\n                                                        value={field.value}\n                                                        onChange={value =>\n                                                            form.setFieldValue(\n                                                                field.name,\n                                                                value,\n                                                            )\n                                                        }\n                                                        onBlur={() =>\n                                                            form.setFieldTouched(\n                                                                field.name,\n                                                            )\n                                                        }\n                                                    />\n                                                )}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} md={12}>\n                                            <Typography>\n                                                The name of the item isn't\n                                                basically used for anything, but\n                                                the Text on the button is shown\n                                                on top of the image. You can add\n                                                several buttons. The push\n                                                destination is important, for\n                                                now only tested inside the\n                                                platform, but should be used so\n                                                that you take everything after\n                                                \"app.hackjunction.com\",\n                                                including the last slash, and\n                                                add it there. For example\n                                                \"/pricing\" at the push\n                                                destiation would lead to\n                                                app.hackjunction.com/pricing\n                                            </Typography>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"icon\"\n                                        render={({ field, form }) => (\n                                            <Box\n                                                width=\"100%\"\n                                                height=\"200px\"\n                                                overflow=\"hidden\"\n                                                position=\"relative\"\n                                            >\n                                                <ImageUpload\n                                                    value={\n                                                        field.value\n                                                            ? {\n                                                                  url: field.value,\n                                                              }\n                                                            : undefined\n                                                    }\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value\n                                                                ? value.url\n                                                                : null,\n                                                        )\n                                                    }\n                                                    uploadUrl={`/api/upload/banner/${slug}/icon/`}\n                                                    resizeMode=\"cover\"\n                                                />\n                                            </Box>\n                                        )}\n                                    />\n                                </Grid>\n\n                                <FieldArray\n                                    name=\"buttons\"\n                                    render={({ push }) => (\n                                        <Grid container spacing={3}>\n                                            <Grid item xs={12} md={6}>\n                                                <FastField\n                                                    name=\"text\"\n                                                    render={({\n                                                        field,\n                                                        form,\n                                                    }) => (\n                                                        <TextInput\n                                                            label=\"Text on button\"\n                                                            value={field.value}\n                                                            onChange={value =>\n                                                                form.setFieldValue(\n                                                                    field.name,\n                                                                    value,\n                                                                )\n                                                            }\n                                                            onBlur={() =>\n                                                                form.setFieldTouched(\n                                                                    field.name,\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <FastField\n                                                    name=\"push\"\n                                                    render={({\n                                                        field,\n                                                        form,\n                                                    }) => (\n                                                        <TextInput\n                                                            label=\"Push destination\"\n                                                            value={field.value}\n                                                            onChange={value =>\n                                                                form.setFieldValue(\n                                                                    field.name,\n                                                                    value,\n                                                                )\n                                                            }\n                                                            onBlur={() =>\n                                                                form.setFieldTouched(\n                                                                    field.name,\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <Button\n                                                    type=\"button\"\n                                                    variant=\"outlinedNew\"\n                                                    color=\"theme_blue\"\n                                                    onClick={() =>\n                                                        push({\n                                                            text: formikProps\n                                                                .values.text,\n                                                            push: formikProps\n                                                                .values.push,\n                                                        })\n                                                    }\n                                                >\n                                                    Add button to image\n                                                </Button>\n                                            </Grid>\n                                        </Grid>\n                                    )}\n                                />\n                            </Grid>\n                        </Box>\n                    </Box>\n                    <BottomBar\n                        onSubmit={formikProps.handleSubmit}\n                        errors={formikProps.errors}\n                        dirty={formikProps.dirty}\n                        loading={formikProps.isSubmitting}\n                    />\n                </>\n            )}\n        </Formik>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { Box, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Formik, FastField } from 'formik'\nimport * as yup from 'yup'\n\nimport ImageUpload from 'components/inputs/ImageUpload'\nimport TextInput from 'components/inputs/TextInput'\nimport BottomBar from 'components/inputs/BottomBar'\n\nimport OrganizationService from 'services/organization'\n\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as AdminActions from 'redux/admin/actions'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport { useTranslation } from 'react-i18next'\nconst useStyles = makeStyles(theme => ({\n    topWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 15px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n        },\n    },\n    box: {\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n    },\n    imageUpload: {\n        width: '300px',\n        height: '300px',\n    },\n}))\n\nexport default () => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const { slug } = match.params\n\n    const [initialData, setInitialData] = useState({})\n\n    useEffect(() => {\n        OrganizationService.getOrganizationBySlug(slug).then(data => {\n            if (data) setInitialData(data)\n        })\n    }, [slug])\n\n    const classes = useStyles()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const validationSchema = useCallback(data => {\n        const validations = {}\n        validations['name'] = yup.string()\n        validations['about'] = yup.string()\n        validations['link'] = yup.string().url()\n        validations['icon'] = yup.string().url().nullable()\n        return validations\n    }, [])\n\n    const handleSubmit = useCallback(\n        (values, formikBag) => {\n            formikBag.setSubmitting(true)\n            dispatch(AdminActions.editOrganization(idToken, slug, values))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                    dispatch(push(`/admin`))\n                })\n                .catch(err => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... Please try again',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    formikBag.setSubmitting(false)\n                })\n        },\n        [dispatch, idToken, slug],\n    )\n\n    return (\n        <Formik\n            validationSchema={props => {\n                return yup.lazy(values => {\n                    return yup.object().shape(validationSchema(values))\n                })\n            }}\n            enableReinitialize\n            initialValues={initialData}\n            onSubmit={handleSubmit}\n        >\n            {formikProps => (\n                <>\n                    <Box className={classes.topWrapper}>\n                        <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n                            <Grid container spacing={3}>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"name\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={t('Name_')}\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"about\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={t('Description_')}\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"icon\"\n                                        render={({ field, form }) => (\n                                            <Box\n                                                width=\"100%\"\n                                                height=\"100%\"\n                                                borderRadius=\"50%\"\n                                                overflow=\"hidden\"\n                                                position=\"relative\"\n                                            >\n                                                <ImageUpload\n                                                    value={\n                                                        field.value\n                                                            ? {\n                                                                  url: field.value,\n                                                              }\n                                                            : undefined\n                                                    }\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value\n                                                                ? value.url\n                                                                : null,\n                                                        )\n                                                    }\n                                                    uploadUrl={`/api/upload/organization/${slug}/icon/`}\n                                                    resizeMode=\"cover\"\n                                                />\n                                            </Box>\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <FastField\n                                        name=\"link\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={t('Link_')}\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Box>\n                    <BottomBar\n                        onSubmit={formikProps.handleSubmit}\n                        errors={formikProps.errors}\n                        dirty={formikProps.dirty}\n                        loading={formikProps.isSubmitting}\n                    />\n                </>\n            )}\n        </Formik>\n    )\n}\n","import React from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nimport DefaultPage from './default'\nimport HackerpackForm from './hackerpack'\nimport BannerForm from './banner'\nimport OrganizationForm from './organization'\n\nexport default () => {\n    const match = useRouteMatch()\n    return (\n        <Switch>\n            <Route exact={true} path={`${match.url}`} component={DefaultPage} />\n            <Route\n                exact={false}\n                path={`${match.url}/hackerpack/:slug`}\n                component={HackerpackForm}\n            />\n            <Route\n                exact={false}\n                path={`${match.url}/banner/:slug`}\n                component={BannerForm}\n            />\n            <Route\n                exact={false}\n                path={`${match.url}/organization/:slug`}\n                component={OrganizationForm}\n            />\n            <Redirect to={match.url} />\n        </Switch>\n    )\n}\n"],"sourceRoot":""}