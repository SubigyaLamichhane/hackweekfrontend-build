{"version":3,"sources":["components/layouts/MaterialTabsLayout/index.js","components/events/EventCardSmall/index.js","graphql/queries/registrations.js","pages/_account/dashboard/index.js","pages/_account/profile/index.js","pages/_account/index.js"],"names":["useStyles","makeStyles","theme","root","transparent","flexGrow","width","backgroundColor","palette","background","paper","wrapper","textAlign","alignItems","tabs","location","baseRoute","dispatch","useDispatch","classes","pushRoute","useCallback","path","push","activeIndex","useMemo","relativePath","pathname","replace","findIndex","item","useEffect","safeIndex","useTheme","isMobile","useMediaQuery","breakpoints","down","React","createElement","className","Tabs","orientation","value","onChange","handleChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","aria-label","map","tab","index","Tab","Object","assign","key","label","id","a11yProps","Box","mt","p","Switch","component","Route","exact","Redirect","to","borderRadius","overflow","boxShadow","cursor","position","transition","image","objectFit","height","minHeight","handleClick","_event$coverImage","onClick","Paper","Grid","container","spacing","xs","md","Image","defaultImage","require","publicId","coverImage","transformation","display","flexDirection","justifyContent","Typography","_eventTimeFormatted","name","_eventLocationFormatted","Fragments","gql","GET_REGISTRATIONS_BY_USER","userId","useSelector","AuthSelectors","registrations","loading","error","data","useQuery","variables","registrationsByUser","useRegistrationsByUser","t","useTranslation","filteredRegistrations","filter","registration","status","PageWrapper","Boolean","length","EventCardSmall","slug","topWrapper","padding","up","box","imageUpload","user","userProfile","UserSelectors","userProfileLoading","hasProfile","advisor","setAdvisor","useState","roles","includes","console","log","locations","divisions","offices","hackCategories","validationSchema","validations","keys","forEach","field","fieldConfig","RegistrationFields","getField","required","indexOf","yup","url","nullable","handleSubmit","values","formikBag","setSubmitting","UserActions","then","SnackbarActions","catch","err","finally","Formik","props","shape","enableReinitialize","initialValues","onSubmit","formikProps","Fragment","margin","FastField","render","form","src","alt","flex","TextInput","setFieldValue","onBlur","setFieldTouched","disabled","platform","config","PLATFORM_OWNER_NAME","PhoneNumberInput","Select","options","gutterBottom","isMulti","BottomBar","errors","dirty","isSubmitting","match","useRouteMatch","useLocation","header","GlobalNavBar","footer","Footer","MaterialTabsLayout","Dashboard","Profile"],"mappings":"sIAAA,kHAuCA,MAAMA,EAAYC,YAAWC,IAAK,CAC9BC,KAAMA,EAAGC,kBAAa,CAClBC,SAAU,EACVC,MAAO,OACPC,gBAAiBH,EACX,cACAF,EAAMM,QAAQC,WAAWC,QAEnCC,QAAS,CACLC,UAAW,OACXC,WAAY,iBAIL,MAAGC,OAAMC,WAAUC,YAAWZ,eAAc,MACvD,MAAMa,EAAWC,cACXC,EAAUnB,EAAU,CAAEI,gBAEtBgB,EAAYC,sBACdC,IACIL,EAASM,YAAK,GAAGP,IAAYM,OAEjC,CAACN,EAAWC,IAOVO,EAAcC,kBAAQ,KACxB,MAAMC,EAAeX,EAASY,SAASC,QAAQZ,EAAW,IAE1D,OADYa,YAAUf,EAAMgB,GAAQA,EAAKR,OAASI,IAEnD,CAACV,EAAWD,EAASY,SAAUb,IAElCiB,oBAAU,MACe,IAAjBP,GACAJ,EAAUN,EAAK,GAAGQ,OAEvB,CAACR,EAAMU,EAAaJ,IAEvB,MAAMY,GAA6B,IAAjBR,EAAqBA,EAAc,EAC/CtB,EAAQ+B,cACRC,EAAWC,YAAcjC,EAAMkC,YAAYC,KAAK,OAEtD,OACIC,IAAAC,cAAA,OAAKC,UAAWrB,EAAQhB,MACpBmC,IAAAC,cAACE,IAAI,CACDC,YAAaR,EAAW,WAAa,aACrCS,MAAOX,EACPY,SAzBSC,CAACC,EAAOC,KACzB3B,EAAUN,EAAKiC,GAAUzB,OAyBjB0B,eAAe,UACfC,UAAU,UACVC,QAAQ,aACRC,cAAc,OACdC,aAAW,wBAEVtC,EAAKuC,IAAI,CAACC,EAAKC,IACZjB,IAAAC,cAACiB,IAAGC,OAAAC,OAAA,CACAC,IAAKL,EAAIM,MACTA,MAAON,EAAIM,OAnEnC,SAAmBL,GACf,MAAO,CACHM,GAAI,uBAAuBN,EAC3B,gBAAiB,4BAA4BA,GAiEzBO,CAAUP,GAAM,CACpBpC,QAASe,EAAW,CAAEvB,QAASQ,EAAQR,SAAY,QAI/D2B,IAAAC,cAACwB,IAAG,CAACC,GAAI,EAAGC,EAAG,GACX3B,IAAAC,cAAC2B,IAAM,KACFpD,EAAKuC,IAAI,EAAGM,MAAKrC,OAAM6C,aAAaZ,IAE7BjB,IAAAC,cAAC6B,IAAK,CACFT,IAAKA,EACLU,OAAO,EACP/C,KAAM,GAAGN,IAAYM,IACrB6C,UAAWA,KAIvB7B,IAAAC,cAAC+B,IAAQ,CAACC,GAAIvD,S,kCCrHlC,qEAOA,MAAMhB,EAAYC,YAAWC,IAAK,CAC9BQ,MAAO,CACH8D,aAAc,OACdC,SAAU,SACVC,UAAW,mCACXC,OAAQ,UACRC,SAAU,WACVC,WAAY,gBACZ,UAAW,CACPH,UAAW,qCAGnBI,MAAO,CACHC,UAAW,QACXC,OAAQ,OACR1E,MAAO,OACP2E,UAAW,YAIJ,MAAGnC,QAAOoC,kBAAmB,IAADC,EAOvC,MAAMhE,EAAUnB,IAEVoF,EAAU/D,sBAAY,KACxB6D,EAAYpC,IACb,CAACA,EAAOoC,IAEX,OAAOpC,EACHR,IAAAC,cAAC8C,IAAK,CAAC7C,UAAWrB,EAAQT,MAAO0E,QAASA,GACtC9C,IAAAC,cAAC+C,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBlD,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,GAAIC,GAAI,GACnBpD,IAAAC,cAACoD,IAAK,CACFnD,UAAWrB,EAAQ2D,MACnBc,aAAcC,EAAQ,KACtBC,SAA0B,QAAlBX,EAAErC,EAAMiD,kBAAU,IAAAZ,OAAA,EAAhBA,EAAkBW,SAC5BE,eAAgB,CACZ1F,MAAO,IACP0E,OAAQ,QAIpB1C,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,GAAIC,GAAI,GACnBpD,IAAAC,cAACwB,IAAG,CACAiB,OAAO,OACPiB,QAAQ,OACRC,cAAc,SACdC,eAAe,SACflC,EAAG,GAEH3B,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,UACfJ,EAAMuD,qBAEX/D,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,MAAMJ,EAAMwD,MAChChE,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,aACfJ,EAAMyD,6BAM3B,O,oLCvER,MAAMC,EACmBC,GAAG;;;;;;;;;;;;;;MAiBfC,EAA4BD,GAAG;;;;;;MAMtCD;eCXS,OACX,MAAMG,EAASC,YAAYC,MACpBC,EAAgB,GAAIC,EAASC,GDYFL,KAClC,MAAM,KAAEM,EAAI,QAAEF,EAAO,MAAEC,GAAUE,YAASR,EAA2B,CACjES,UAAW,CACPR,YAIR,MAAO,CAAK,OAAJM,QAAI,IAAJA,OAAI,EAAJA,EAAMG,oBAAqBL,EAASC,ICnBCK,CAAuBV,IAC9D,EAAEW,GAAMC,cACRtG,EAAWC,cACXsG,EAAwBV,EAAcW,OACxCC,GAAwC,eAAxBA,EAAaC,QAIjC,OACIrF,IAAAC,cAACqF,IAAW,CAACb,QAASA,EAASC,MAAOa,QAAQb,IAC1C1E,IAAAC,cAACwB,IAAG,CAACE,EAAG,GACJ3B,IAAAC,cAAC+C,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBlD,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IAIe,IAAzBqB,EAAcgB,QACXxF,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,SACfoE,EAAE,0BAIdE,EAAsBnE,IAAIqE,GACvBpF,IAAAC,cAAC+C,IAAI,CAAC3B,IAAK+D,EAAa7D,GAAI/B,MAAI,EAAC2D,GAAI,GAAIC,GAAI,GACzCpD,IAAAC,cAACwF,IAAc,CACXjF,MAAO4E,EAAa5E,MACpBoC,YAAapC,GACT7B,EAASM,YAAK,eAAmB,OAALuB,QAAK,IAALA,OAAK,EAALA,EAAOkF,gB,oJCfvE,MAAMhI,EAAYC,YAAWC,IAAK,CAC9B+H,WAAY,CACRhC,QAAS,OACTC,cAAe,SACfrF,WAAY,SACZJ,WAAY,QACZ+D,aAAc,MACdE,UAAW,mCACXwD,QAAShI,EAAMsF,QAAQ,GACvB,CAACtF,EAAMkC,YAAY+F,GAAG,OAAQ,CAC1BjC,cAAe,MACfrF,WAAY,eAGpBuH,IAAK,CACD3H,WAAY,QACZ+D,aAAc,MACdE,UAAW,mCACXwD,QAAShI,EAAMsF,QAAQ,IAE3B6C,YAAa,CACT/H,MAAO,QACP0E,OAAQ,YAID,WACX,MAAM/D,EAAWC,cACXoH,EAAO1B,YAAYC,KACnB0B,EAAc3B,YAAY4B,KAC1BC,EAAqB7B,YAAY4B,KACjCE,EAAa9B,YAAY4B,KACzBzB,EAAU0B,IAAuBC,GACjC,EAAEpB,GAAMC,eAKPoB,EAASC,GAAcC,oBAAS,GAEnCP,GAAQC,GAEJD,EAAKQ,OAEDR,EAAKQ,MAAMC,SAAS,aAGfJ,IACDC,GAAW,GACXI,QAAQC,IAAI,iBAM5B,MAAM9H,EAAUnB,IAEVkJ,EAAY,CACd,CAAEvG,MAAO,WAAYiB,MAAO,YAC5B,CAAEjB,MAAO,OAAQiB,MAAO,QACxB,CAAEjB,MAAO,QAASiB,MAAO,SAGvBkF,EAAQ,CACV,CAAEnG,MAAO,cAAeiB,MAAO,eAC/B,CAAEjB,MAAO,UAAWiB,MAAO,YAUzBuF,EAAY,CACd,CAAExG,MAAO,kBAAmBiB,MAAO,mBACnC,CAAEjB,MAAO,mBAAoBiB,MAAO,oBACpC,CAAEjB,MAAO,UAAWiB,MAAO,WAC3B,CAAEjB,MAAO,MAAOiB,MAAO,OACvB,CAAEjB,MAAO,YAAaiB,MAAO,aAC7B,CAAEjB,MAAO,QAASiB,MAAO,SACzB,CAAEjB,MAAO,kBAAmBiB,MAAO,mBACnC,CAAEjB,MAAO,KAAMiB,MAAO,MACtB,CAAEjB,MAAO,wBAAyBiB,MAAO,yBACzC,CACIjB,MAAO,mCACPiB,MAAO,oCAEX,CAAEjB,MAAO,UAAWiB,MAAO,WAC3B,CAAEjB,MAAO,QAASiB,MAAO,UAGvBwF,EAAU,CACZ,CAAEzG,MAAO,qBAAsBiB,MAAO,sBACtC,CAAEjB,MAAO,qBAAsBiB,MAAO,sBACtC,CAAEjB,MAAO,cAAeiB,MAAO,eAC/B,CAAEjB,MAAO,eAAgBiB,MAAO,gBAChC,CAAEjB,MAAO,cAAeiB,MAAO,eAC/B,CAAEjB,MAAO,gBAAiBiB,MAAO,iBACjC,CAAEjB,MAAO,cAAeiB,MAAO,eAC/B,CAAEjB,MAAO,cAAeiB,MAAO,eAC/B,CAAEjB,MAAO,eAAgBiB,MAAO,gBAChC,CAAEjB,MAAO,gBAAiBiB,MAAO,iBACjC,CAAEjB,MAAO,iBAAkBiB,MAAO,kBAClC,CACIjB,MAAO,8BACPiB,MAAO,gCA6BTyF,EAAiB,CACnB,CACI1G,MAAO,+CACPiB,MAAO,gDAEX,CACIjB,MAAO,wDACPiB,MAAO,yDAEX,CACIjB,MAAO,8DACPiB,MAAO,gEAuGT0F,EAAmBjI,sBAAY4F,IACjC,MAAMsC,EAAc,GAYpB,OAXA9F,OAAO+F,KAAKvC,GAAMwC,QAAQC,IACtB,MAAMC,EAAcC,qBAAmBC,SAASH,GAChD,GAAIC,EAAa,CACb,MAAMG,GACqD,IAAvD,CAAC,QAAS,YAAa,YAAYC,QAAQL,GAC/CH,EAAYG,GAASC,EAAYL,iBAAiBQ,MAI1DP,EAAoB,OAAIS,MAAaC,MAAMC,WAEpCX,GACR,IAEGY,EAAe9I,sBACjB,CAAC+I,EAAQC,KACD1B,IACAyB,EAAOzB,SAAU,GAErBK,QAAQC,IAAI,SAAUmB,GACtBC,EAAUC,eAAc,GACxBrJ,EAASsJ,IAA4BH,IAChCI,KAAK,KACFvJ,EAASwJ,IAAwB,qBAEpCC,MAAMC,IACH1J,EACIwJ,IACI,+CAIXG,QAAQ,KACLP,EAAUC,eAAc,MAGpC,CAAC3B,EAAS1H,IAGd,OACIqB,IAAAC,cAACqF,IAAW,CAACb,QAASA,GAClBzE,IAAAC,cAACsI,IAAM,CACHvB,iBAAkBwB,GACPd,IAASI,GACLJ,MAAae,MAAMzB,EAAiBc,KAGnDY,oBAAkB,EAClBC,cAAe1C,EACf2C,SAAUf,GAETgB,GACG7I,IAAAC,cAAAD,IAAA8I,SAAA,KACI9I,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQ8G,YACpB3F,IAAAC,cAACwB,IAAG,CAACzD,MAAM,QAAQ0E,OAAO,QAAQqG,OAAQ,GACtC/I,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,SACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACwB,IAAG,CACAzD,MAAM,OACN0E,OAAO,OACPR,aAAa,MACbC,SAAS,SACTG,SAAS,YAETtC,IAAAC,cAAA,OACIkJ,IAAK/B,EAAM/G,MACX+I,IAAI,SACJlJ,UAAU,sBAM9BF,IAAAC,cAACwB,IAAG,CAAC4H,KAAK,IAAI1F,QAAQ,OAAOC,cAAc,UACvC5D,IAAAC,cAAC+C,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBlD,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,GAAIC,GAAI,GACnBpD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,YACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACqJ,IAAS,CACNhI,MAAO0D,EAAE,eACT3E,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,WAQ9BhE,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,GAAIC,GAAI,GACnBpD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,WACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACqJ,IAAS,CACNhI,MAAO0D,EAAE,cACT3E,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,WAQ9BhE,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IACXnD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,QACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACqJ,IAAS,CACNhI,MAAO0D,EAAE,UACT3E,MAAO+G,EAAM/G,MAObqJ,UAAQ,EACRF,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,UAM1BhE,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,WACfoE,EAAE,iBAAkB,CACjB2E,SACIC,IAAOC,wBAIvB7J,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IACXnD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,cACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC6J,IAAgB,CACbxI,MAAO0D,EAAE,iBACT3E,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,UAM1BhE,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,WACfoE,EAAE,oBAwEXhF,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IACXnD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,WACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHzI,MAAO0D,EAAE,YACTgF,QAASpD,EACTvG,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,WAO9BhE,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IACXnD,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,OACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHzI,MAAO0D,EAAE,QACTgF,QAASxD,EACTnG,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,cAU1ChE,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC+C,IAAI,CAACC,WAAS,EAACC,QAAS,GACrBlD,IAAAC,cAAC+C,IAAI,CAACxD,MAAI,EAAC2D,GAAI,IACXnD,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,QAAQqJ,cAAY,GAAC,6DAIzCjK,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,YACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHzI,MAAM,YACN0I,QAAQ,YACR3J,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBACDrC,EAAMpD,MAGdkG,SAAO,SAO/BlK,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,QAAQqJ,cAAY,GAAC,oCAGzCjK,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,WACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHzI,MAAM,WACN0I,QAASnD,EACTxG,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBAAgBrC,EAAMpD,WAM/ChE,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,QAAQqJ,cAAY,GAAC,iCAGzCjK,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,SACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHzI,MAAM,SACN0I,QAASlD,EACTzG,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBAAgBrC,EAAMpD,WAuD/ChE,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,QAAQqJ,cAAY,GAAC,2DAIzCjK,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,WACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAAC8J,IAAM,CACHC,QAASjD,EACT1G,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBAAgBrC,EAAMpD,WAgC/ChE,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC6D,IAAU,CAAClD,QAAQ,QAAQqJ,cAAY,GAAC,6LAMzCjK,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,mBACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACqJ,IAAS,CACNjJ,MAAO+G,EAAM/G,MACbC,SAAUD,GACN6I,EAAKK,cACDnC,EAAMpD,KACN3D,GAGRmJ,OAAQA,IACJN,EAAKO,gBAAgBrC,EAAMpD,WA+B/ChE,IAAAC,cAAA,OAAKC,UAAU,UACXF,IAAAC,cAACwB,IAAG,CAACvB,UAAWrB,EAAQiH,IAAKpE,GAAI,GAC7B1B,IAAAC,cAAC+I,IAAS,CACNhF,KAAK,UACLiF,OAAQA,EAAG7B,QAAO8B,UACdlJ,IAAAC,cAACqJ,IAAS,CACNjJ,MAAO+G,EAAM/G,YAkKjCL,IAAAC,cAACwB,IAAG,CAACiB,OAAO,UACZ1C,IAAAC,cAACkK,IAAS,CACNvB,SAAUC,EAAYhB,aACtBuC,OAAQvB,EAAYuB,OACpBC,MAAOxB,EAAYwB,MACnB5F,QAASoE,EAAYyB,mBCj8BlC,eACX,MAAMC,EAAQC,cACR/L,EAAWgM,eACX,EAAEzF,GAAMC,cACd,OACIjF,IAAAC,cAACqF,IAAW,CACRoF,OAAQA,IAAM1K,IAAAC,cAAC0K,IAAY,MAC3BC,OAAQA,IAAM5K,IAAAC,cAAC4K,IAAM,MACrB5B,OAAQA,IACJjJ,IAAAC,cAAC6K,IAAkB,CACfhN,aAAW,EACXU,KAAM,CACF,CACI8C,MAAO,mBACPD,IAAK,YACLrC,KAAM,GACN6C,UAAWkJ,GAEf,CACIzJ,MAAO0D,EAAE,YACT3D,IAAK,UACLrC,KAAM,WACN6C,UAAWmJ,IAGnBtM,UAAW6L,EAAM5C,IACjBlJ,SAAUA","file":"static/js/28.f687b793.chunk.js","sourcesContent":["import React, { useMemo, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { findIndex } from 'lodash-es'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Tabs, Tab, Typography, Box, useMediaQuery } from '@material-ui/core'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            <Box>{children}</Box>\n        </Typography>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ transparent }) => ({\n        flexGrow: 1,\n        width: '100%',\n        backgroundColor: transparent\n            ? 'transparent'\n            : theme.palette.background.paper,\n    }),\n    wrapper: {\n        textAlign: 'left',\n        alignItems: 'flex-start',\n    },\n}))\n\nexport default ({ tabs, location, baseRoute, transparent = false }) => {\n    const dispatch = useDispatch()\n    const classes = useStyles({ transparent })\n\n    const pushRoute = useCallback(\n        path => {\n            dispatch(push(`${baseRoute}${path}`))\n        },\n        [baseRoute, dispatch],\n    )\n\n    const handleChange = (event, newValue) => {\n        pushRoute(tabs[newValue].path)\n    }\n\n    const activeIndex = useMemo(() => {\n        const relativePath = location.pathname.replace(baseRoute, '')\n        const idx = findIndex(tabs, item => item.path === relativePath)\n        return idx\n    }, [baseRoute, location.pathname, tabs])\n\n    useEffect(() => {\n        if (activeIndex === -1) {\n            pushRoute(tabs[0].path)\n        }\n    }, [tabs, activeIndex, pushRoute])\n\n    const safeIndex = activeIndex !== -1 ? activeIndex : 0\n    const theme = useTheme()\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'))\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                orientation={isMobile ? 'vertical' : 'horizontal'}\n                value={safeIndex}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                aria-label=\"scrollable auto tabs\"\n            >\n                {tabs.map((tab, index) => (\n                    <Tab\n                        key={tab.label}\n                        label={tab.label}\n                        {...a11yProps(index)}\n                        classes={isMobile ? { wrapper: classes.wrapper } : {}}\n                    />\n                ))}\n            </Tabs>\n            <Box mt={3} p={2}>\n                <Switch>\n                    {tabs.map(({ key, path, component }, index) => {\n                        return (\n                            <Route\n                                key={key}\n                                exact={true}\n                                path={`${baseRoute}${path}`}\n                                component={component}\n                            />\n                        )\n                    })}\n                    <Redirect to={baseRoute} />\n                </Switch>\n            </Box>\n        </div>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Paper, Grid, Box, Typography } from '@material-ui/core'\n\nimport Image from 'components/generic/Image'\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        borderRadius: '10px',\n        overflow: 'hidden',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.04)',\n        cursor: 'pointer',\n        position: 'relative',\n        transition: 'all 0.2s ease',\n        '&:hover': {\n            boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        },\n    },\n    image: {\n        objectFit: 'cover',\n        height: '100%',\n        width: '100%',\n        minHeight: '130px',\n    },\n}))\n\nexport default ({ event, handleClick }) => {\n    /*\n    if (!event.slug) {\n        return 'loading'\n    }\n    console.log('event is', event)\n    */\n    const classes = useStyles()\n\n    const onClick = useCallback(() => {\n        handleClick(event)\n    }, [event, handleClick])\n\n    return event ? (\n        <Paper className={classes.paper} onClick={onClick}>\n            <Grid container spacing={0}>\n                <Grid item xs={12} md={3}>\n                    <Image\n                        className={classes.image}\n                        defaultImage={require('assets/images/default_cover_image.png')}\n                        publicId={event.coverImage?.publicId}\n                        transformation={{\n                            width: 400,\n                            height: 150,\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12} md={9}>\n                    <Box\n                        height=\"100%\"\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        justifyContent=\"center\"\n                        p={2}\n                    >\n                        <Typography variant=\"button\">\n                            {event._eventTimeFormatted}\n                        </Typography>\n                        <Typography variant=\"h6\">{event.name}</Typography>\n                        <Typography variant=\"subtitle1\">\n                            {event._eventLocationFormatted}\n                        </Typography>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Paper>\n    ) : null\n}\n","import { gql, useQuery } from '@apollo/client'\n\nconst Fragments = {\n    RegistrationPreview: gql`\n        fragment RegistrationPreview on Registration {\n            _id\n            status\n            event {\n                slug\n                name\n                coverImage {\n                    publicId\n                }\n                _eventTimeFormatted\n                _eventLocationFormatted\n            }\n        }\n    `,\n}\n\nexport const GET_REGISTRATIONS_BY_USER = gql`\n    query Registration($userId: ID!) {\n        registrationsByUser(userId: $userId) {\n            ...RegistrationPreview\n        }\n    }\n    ${Fragments.RegistrationPreview}\n`\n\nexport const useRegistrationsByUser = userId => {\n    const { data, loading, error } = useQuery(GET_REGISTRATIONS_BY_USER, {\n        variables: {\n            userId,\n        },\n    })\n\n    return [data?.registrationsByUser, loading, error]\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport EventCardSmall from 'components/events/EventCardSmall'\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport { useRegistrationsByUser } from 'graphql/queries/registrations'\nimport { useTranslation } from 'react-i18next'\n\nexport default () => {\n    const userId = useSelector(AuthSelectors.getUserId)\n    const [registrations = [], loading, error] = useRegistrationsByUser(userId)\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const filteredRegistrations = registrations.filter(\n        registration => registration.status !== 'incomplete',\n    )\n\n    //TODO Erin had designs for the redesign. Follow it\n    return (\n        <PageWrapper loading={loading} error={Boolean(error)}>\n            <Box p={2}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        {/* <Typography variant=\"h6\" gutterBottom>\n                            {t('Your_registrations_')}\n                        </Typography> */}\n                        {registrations.length === 0 && (\n                            <Typography variant=\"body1\">\n                                {t('Looks_like_register_')}\n                            </Typography>\n                        )}\n                    </Grid>\n                    {filteredRegistrations.map(registration => (\n                        <Grid key={registration.id} item xs={12} md={6}>\n                            <EventCardSmall\n                                event={registration.event}\n                                handleClick={event =>\n                                    dispatch(push(`/dashboard/${event?.slug}`))\n                                }\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        </PageWrapper>\n    )\n}\n","import React, { useCallback, useState } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Formik, FastField, Field } from 'formik'\nimport { RegistrationFields } from '@hackjunction/shared'\nimport * as yup from 'yup'\nimport config from 'constants/config'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport ImageUpload from 'components/inputs/ImageUpload'\nimport DateInput from 'components/inputs/DateInput'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\nimport PhoneNumberInput from 'components/inputs/PhoneNumberInput'\n// import JobRoleInput from 'components/inputs/JobRoleInput'\nimport SkillsInput from 'components/inputs/SkillsInput'\nimport EducationInput from 'components/inputs/EducationInput'\nimport RecruitmentOptionInput from 'components/inputs/RecruitmentOptionInput'\nimport Select from 'components/inputs/Select'\nimport BottomBar from 'components/inputs/BottomBar'\n\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserActions from 'redux/user/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport { useTranslation } from 'react-i18next'\nconst useStyles = makeStyles(theme => ({\n    topWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 15px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n        },\n    },\n    box: {\n        background: 'white',\n        borderRadius: '7px',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        padding: theme.spacing(3),\n    },\n    imageUpload: {\n        width: '300px',\n        height: '300px',\n    },\n}))\n\nexport default () => {\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const userProfileLoading = useSelector(UserSelectors.userProfileLoading)\n    const hasProfile = useSelector(UserSelectors.hasProfile)\n    const loading = userProfileLoading || !hasProfile\n    const { t } = useTranslation()\n\n    // console.log('userProfile', userProfile)\n    // console.log('user roles -----------------------------\\n', user.roles)\n\n    const [advisor, setAdvisor] = useState(false)\n\n    if (user && userProfile) {\n        // @ts-ignore\n        if (user.roles) {\n            // @ts-ignore\n            if (user.roles.includes('Advisor')) {\n                // @ts-ignore\n                // console.log(user.roles)\n                if (!advisor) {\n                    setAdvisor(true)\n                    console.log('we are here')\n                }\n            }\n        }\n    }\n\n    const classes = useStyles()\n\n    const locations = [\n        { value: 'Americas', label: 'Americas' },\n        { value: 'EMEA', label: 'EMEA' },\n        { value: 'India', label: 'APAC' },\n    ]\n\n    const roles = [\n        { value: 'Participant', label: 'Participant' },\n        { value: 'Advisor', label: 'Advisor' },\n    ]\n    const expertise = [\n        { value: 'IE - module expertise', label: 'IE - module expertise' },\n        { value: 'Good presenter', label: 'Good presenter' },\n        { value: 'Creative', label: 'Creative' },\n        { value: 'Front-end developer', label: 'Front-end developer' },\n        { value: 'Back-end developer', label: 'Back-end developer' },\n    ]\n\n    const divisions = [\n        { value: 'Admin/Executive', label: 'Admin/Executive' },\n        { value: 'Customer Success', label: 'Customer Success' },\n        { value: 'Finance', label: 'Finance' },\n        { value: 'G&A', label: 'G&A' },\n        { value: 'Marketing', label: 'Marketing' },\n        { value: 'Legal', label: 'Legal' },\n        { value: 'People & Places', label: 'People & Places' },\n        { value: 'IT', label: 'IT' },\n        { value: 'Security & Compliance', label: 'Security & Compliance' },\n        {\n            value: 'R&D (Including Product + Design)',\n            label: 'R&D (Including Product + Design)',\n        },\n        { value: 'Revenue', label: 'Revenue' },\n        { value: 'Sales', label: 'Sales' },\n    ]\n\n    const offices = [\n        { value: 'Yes, San Francisco', label: 'Yes, San Francisco' },\n        { value: 'Yes, Mountain View', label: 'Yes, Mountain View' },\n        { value: 'Yes, Dallas', label: 'Yes, Dallas' },\n        { value: 'Yes, Chicago', label: 'Yes, Chicago' },\n        { value: 'Yes, Boston', label: 'Yes, Boston' },\n        { value: 'Yes, New York', label: 'Yes, New York' },\n        { value: 'Yes, Tandil', label: 'Yes, Tandil' },\n        { value: 'Yes, London', label: 'Yes, London' },\n        { value: 'Yes, Belfast', label: 'Yes, Belfast' },\n        { value: 'Yes, Belgrade', label: 'Yes, Belgrade' },\n        { value: 'Yes, Bangalore', label: 'Yes, Bangalore' },\n        {\n            value: 'No, I am a remote employee.',\n            label: 'No, I am a remote employee.',\n        },\n    ]\n\n    const collaborationInOffice = [\n        { value: 'Yes', label: 'Yes' },\n        {\n            value: 'No - I live close to an office but I will not join events in the office',\n            label: 'No - I live close to an office but I will not join events in the office',\n        },\n        {\n            value: 'No - I do not live close to an office so will participate in hack week events virtually',\n            label: 'No - I do not live close to an office so will participate in hack week events virtually',\n        },\n    ]\n\n    const shirtSizes = [\n        { value: 'XS', label: 'XS' },\n        { value: 'S', label: 'S' },\n        { value: 'M', label: 'M' },\n        { value: 'L', label: 'L' },\n        { value: 'XL', label: 'XL' },\n        { value: 'XXL', label: 'XXL' },\n        { value: '3XL', label: '3XL' },\n        { value: '4XL', label: '4XL' },\n        { value: '5XL', label: '5XL' },\n        { value: '6XL', label: '6XL' },\n    ]\n\n    const hackCategories = [\n        {\n            value: 'Better Together: Cross Functional Innovation',\n            label: 'Better Together: Cross Functional Innovation',\n        },\n        {\n            value: 'AI-Driven Innovation: Smart solutions For Real Impact',\n            label: 'AI-Driven Innovation: Smart solutions For Real Impact',\n        },\n        {\n            value: 'I don’t care or TBD! I just want to work on something.',\n            label: 'I don’t care or TBD! I just want to work on something.',\n        },\n    ]\n\n    const hackModules = [\n        {\n            value: 'DevOps Modernization - Continuous Integration',\n            label: 'DevOps Modernization - Continuous Integration',\n        },\n        {\n            value: 'DevOps Modernization - Continuous Delivery & GitOps',\n            label: 'DevOps Modernization - Continuous Delivery & GitOps',\n        },\n        {\n            value: 'DevOps Modernization - Database DevOps',\n            label: 'DevOps Modernization - Database DevOps',\n        },\n        {\n            value: 'DevOps Modernization - Infrastructure as Code Management',\n            label: 'DevOps Modernization - Infrastructure as Code Management',\n        },\n        {\n            value: 'DevOps Modernization - Internal Developer Portal',\n            label: 'DevOps Modernization - Internal Developer Portal',\n        },\n        {\n            value: 'DevOps Modernization - Artifact Registry',\n            label: 'DevOps Modernization - Artifact Registry',\n        },\n        {\n            value: 'DevOps Modernization - Cloud Development Environments',\n            label: 'DevOps Modernization - Cloud Development Environments',\n        },\n        {\n            value: 'DevOps Modernization - Service Reliability Management',\n            label: 'DevOps Modernization - Service Reliability Management',\n        },\n        {\n            value: 'DevOps Modernization - Internal Developer Portal',\n            label: 'DevOps Modernization - Internal Developer Portal',\n        },\n        {\n            value: 'Quality & Reliability - Chaos Engineering',\n            label: 'Quality & Reliability - Chaos Engineering',\n        },\n        {\n            value: 'Quality & Reliability - Feature Management & Experimentation',\n            label: 'Quality & Reliability - Feature Management & Experimentation',\n        },\n        {\n            value: 'Quality & Reliability - AI Test Automation',\n            label: 'Quality & Reliability - AI Test Automation',\n        },\n        {\n            value: 'Quality & Reliability - Incident Response',\n            label: 'Quality & Reliability - Incident Response',\n        },\n        {\n            value: 'Secure Software Delivery - Security Testing Orchestration',\n            label: 'Secure Software Delivery - Security Testing Orchestration',\n        },\n        {\n            value: 'Secure Software Delivery - Software Supply Chain ',\n            label: 'Secure Software Delivery - Software Supply Chain ',\n        },\n        {\n            value: 'Secure Software Delivery - Application Discovery & Risk Assessment ',\n            label: 'Secure Software Delivery - Application Discovery & Risk Assessment ',\n        },\n        {\n            value: 'Secure Software Delivery - Application Security Testing',\n            label: 'Secure Software Delivery - Application Security Testing',\n        },\n        {\n            value: 'Secure Software Delivery - Software Supply Chain ',\n            label: 'Secure Software Delivery - Software Supply Chain ',\n        },\n        {\n            value: 'Cost Optimization - Cloud Cost Management',\n            label: 'Cost Optimization - Cloud Cost Management',\n        },\n        {\n            value: 'Cost Optimization - Software Engineering Insights',\n            label: 'Cost Optimization - Software Engineering Insights',\n        },\n        { value: 'TBD', label: 'TBD' },\n        { value: 'N/A', label: 'N/A' },\n    ]\n\n    const tShirtSizes = [\n        { value: 'N/A (No swag for me)', label: 'N/A (No swag for me)' },\n        { value: 'XS', label: 'XS' },\n        { value: 'S', label: 'S' },\n        { value: 'M', label: 'M' },\n        { value: 'L', label: 'L' },\n        { value: 'XL', label: 'XL' },\n        { value: 'XXL', label: 'XXL' },\n        { value: '3XL', label: '3XL' },\n        { value: '4XL', label: '4XL' },\n        { value: '5XL', label: '5XL' },\n        { value: '6XL', label: '6XL' },\n    ]\n\n    const validationSchema = useCallback(data => {\n        const validations = {}\n        Object.keys(data).forEach(field => {\n            const fieldConfig = RegistrationFields.getField(field)\n            if (fieldConfig) {\n                const required =\n                    ['email', 'firstName', 'lastName'].indexOf(field) !== -1\n                validations[field] = fieldConfig.validationSchema(required)\n            }\n        })\n\n        validations['avatar'] = yup.string().url().nullable()\n\n        return validations\n    }, [])\n\n    const handleSubmit = useCallback(\n        (values, formikBag) => {\n            if (advisor) {\n                values.advisor = true\n            }\n            console.log('values', values)\n            formikBag.setSubmitting(true)\n            dispatch(UserActions.editUserProfile(values))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                })\n                .catch(err => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... Please try again',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    formikBag.setSubmitting(false)\n                })\n        },\n        [advisor, dispatch],\n    )\n\n    return (\n        <PageWrapper loading={loading}>\n            <Formik\n                validationSchema={props => {\n                    return yup.lazy(values => {\n                        return yup.object().shape(validationSchema(values))\n                    })\n                }}\n                enableReinitialize\n                initialValues={userProfile}\n                onSubmit={handleSubmit}\n            >\n                {formikProps => (\n                    <>\n                        <Box className={classes.topWrapper}>\n                            <Box width=\"300px\" height=\"300px\" margin={3}>\n                                <FastField\n                                    name=\"avatar\"\n                                    render={({ field, form }) => (\n                                        <Box\n                                            width=\"100%\"\n                                            height=\"100%\"\n                                            borderRadius=\"50%\"\n                                            overflow=\"hidden\"\n                                            position=\"relative\"\n                                        >\n                                            <img\n                                                src={field.value}\n                                                alt=\"avatar\"\n                                                className=\"w-full h-full\"\n                                            />\n                                        </Box>\n                                    )}\n                                />\n                            </Box>\n                            <Box flex=\"1\" display=\"flex\" flexDirection=\"column\">\n                                <Grid container spacing={3}>\n                                    <Grid item xs={12} md={6}>\n                                        <FastField\n                                            name=\"firstName\"\n                                            render={({ field, form }) => (\n                                                <TextInput\n                                                    label={t('First_name_')}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <FastField\n                                            name=\"lastName\"\n                                            render={({ field, form }) => (\n                                                <TextInput\n                                                    label={t('Last_name_')}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <FastField\n                                            name=\"email\"\n                                            render={({ field, form }) => (\n                                                <TextInput\n                                                    label={t('Email_')}\n                                                    value={field.value}\n                                                    // onChange={value =>\n                                                    //     form.setFieldValue(\n                                                    //         field.name,\n                                                    //         value,\n                                                    //     )\n                                                    // }\n                                                    disabled\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                        <Typography variant=\"caption\">\n                                            {t('Contact_email_', {\n                                                platform:\n                                                    config.PLATFORM_OWNER_NAME,\n                                            })}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <FastField\n                                            name=\"phoneNumber\"\n                                            render={({ field, form }) => (\n                                                <PhoneNumberInput\n                                                    label={t('Phone_number_')}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                        <Typography variant=\"caption\">\n                                            {t('Contact_phone_')}\n                                        </Typography>\n                                    </Grid>\n                                    {/* <Grid item xs={12}>\n                                        <FastField\n                                            name=\"dateOfBirth\"\n                                            render={({ field, form }) => (\n                                                <DateInput\n                                                    label={t('Date_of_birth_')}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                    disableFutureYears={true}\n                                                />\n                                            )}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <FastField\n                                            name=\"gender\"\n                                            render={({ field, form }) => (\n                                                <Select\n                                                    label={t('Gender_')}\n                                                    options=\"gender\"\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid>{' '} */}\n                                    {/* <Grid item xs={12}>\n                                        <FastField\n                                            name=\"tShirtSize\"\n                                            render={({ field, form }) => (\n                                                <Select\n                                                    label=\"What is your unisex t-shirt size?\"\n                                                    options={tShirtSizes}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid> */}\n                                    <Grid item xs={12}>\n                                        <FastField\n                                            name=\"location\"\n                                            render={({ field, form }) => (\n                                                <Select\n                                                    label={t('Location')}\n                                                    options={locations}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <FastField\n                                            name=\"role\"\n                                            render={({ field, form }) => (\n                                                <Select\n                                                    label={t('Role')}\n                                                    options={roles}\n                                                    value={field.value}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            value,\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Box>\n                        <Box className={classes.box} mt={3}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"body1\" gutterBottom>\n                                        What skills or expertise areas can you\n                                        bring to the team?\n                                    </Typography>\n                                    <FastField\n                                        name=\"expertise\"\n                                        render={({ field, form }) => (\n                                            <Select\n                                                label=\"Expertise\"\n                                                options=\"expertise\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                                isMulti\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                        <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                What division are you a part of?\n                            </Typography>\n                            <FastField\n                                name=\"division\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        label=\"Division\"\n                                        options={divisions}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box>\n                        <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                Are you based near an office?\n                            </Typography>\n                            <FastField\n                                name=\"office\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        label=\"Office\"\n                                        options={offices}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box>\n                        {/* <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                Do you plan to join us in person for an\n                                in-office collaboration day and happy hour\n                                during hack week?\n                            </Typography>\n                            <FastField\n                                name=\"collaborationInOffice\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        options={collaborationInOffice}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box> */}\n                        {/* <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                What size shirt would you like?\n                            </Typography>\n                            <FastField\n                                label=\"Shirt Size\"\n                                name=\"tShirtSize\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        options={shirtSizes}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box> */}\n                        <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                I plan on/would like to work on a hack related\n                                to…\n                            </Typography>\n                            <FastField\n                                name=\"category\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        options={hackCategories}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box>\n                        {/* <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                If you are planning on working on a hack related\n                                to our products, which module would your hack be\n                                related to?\n                            </Typography>\n                            <FastField\n                                name=\"hackModule\"\n                                render={({ field, form }) => (\n                                    <Select\n                                        options={hackModules}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box>  */}\n\n                        <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                Do you have an idea of a project you would like\n                                to work on? If YES, please share details: what\n                                are you thinking about working on? If NO, please\n                                type N/A to proceed to the next question.\n                            </Typography>\n                            <FastField\n                                name=\"ideaAboutProject\"\n                                render={({ field, form }) => (\n                                    <TextInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box>\n                        {/* <Box className={classes.box} mt={3}>\n                            <Typography variant=\"body1\" gutterBottom>\n                                For people not near an office, please provide\n                                your mailing address where we can send your hack\n                                week swag. (If you are near an office, please\n                                respond N/A.)\n                            </Typography>\n                            <FastField\n                                name=\"mailingAddress\"\n                                render={({ field, form }) => (\n                                    <TextInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                )}\n                            />\n                        </Box> */}\n                        <div className=\"hidden\">\n                            <Box className={classes.box} mt={3}>\n                                <FastField\n                                    name=\"advisor\"\n                                    render={({ field, form }) => (\n                                        <TextInput\n                                            value={field.value}\n                                            // onChange={value =>\n                                            //     form.setFieldValue(\n                                            //         field.name,\n                                            //         value,\n                                            //     )\n                                            // }\n                                            // onBlur={() =>\n                                            //     form.setFieldTouched(field.name)\n                                            // }\n                                        />\n                                    )}\n                                />\n                            </Box>\n                        </div>\n\n                        {/* <Box className={classes.box} mt={3}>\n                            <Typography variant=\"h6\">\n                                {t('Additional_links_')}\n                            </Typography>\n                            <Typography variant=\"body1\" gutterBottom>\n                                {t('You_can_link_')}\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <FastField\n                                        name=\"curriculumVitae\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={\n                                                    RegistrationFields.getField(\n                                                        'curriculumVitae',\n                                                    ).label\n                                                }\n                                                placeholder=\"myhomepage.com/cv\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                    <Typography variant=\"caption\">\n                                        {\n                                            RegistrationFields.getField(\n                                                'curriculumVitae',\n                                            ).hint\n                                        }\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FastField\n                                        name=\"portfolio\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={\n                                                    RegistrationFields.getField(\n                                                        'portfolio',\n                                                    ).label\n                                                }\n                                                placeholder=\"myhomepage.com/portfolio\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                    <Typography variant=\"caption\">\n                                        {\n                                            RegistrationFields.getField(\n                                                'portfolio',\n                                            ).hint\n                                        }\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FastField\n                                        name=\"github\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={\n                                                    RegistrationFields.getField(\n                                                        'github',\n                                                    ).label\n                                                }\n                                                placeholder=\"github.com/myusername\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                    <Typography variant=\"caption\">\n                                        {\n                                            RegistrationFields.getField(\n                                                'github',\n                                            ).hint\n                                        }\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FastField\n                                        name=\"linkedin\"\n                                        render={({ field, form }) => (\n                                            <TextInput\n                                                label={\n                                                    RegistrationFields.getField(\n                                                        'linkedin',\n                                                    ).label\n                                                }\n                                                placeholder=\"linkedin.com/in/myname\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    />\n                                    <Typography variant=\"caption\">\n                                        {\n                                            RegistrationFields.getField(\n                                                'linkedin',\n                                            ).hint\n                                        }\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Box> */}\n                        <Box height=\"300px\" />\n                        <BottomBar\n                            onSubmit={formikProps.handleSubmit}\n                            errors={formikProps.errors}\n                            dirty={formikProps.dirty}\n                            loading={formikProps.isSubmitting}\n                        />\n                    </>\n                )}\n            </Formik>\n        </PageWrapper>\n    )\n}\n","import React from 'react'\n\nimport { useRouteMatch, useLocation } from 'react-router'\n\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\n// import AccountNavBar from 'components/navbars/AccountNavBar'\nimport GlobalNavBar from 'components/navbars/GlobalNavBar'\n\nimport Footer from 'components/layouts/Footer'\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport Dashboard from './dashboard'\nimport Profile from './profile'\n\nimport { useTranslation } from 'react-i18next'\n\nexport default () => {\n    const match = useRouteMatch()\n    const location = useLocation()\n    const { t } = useTranslation()\n    return (\n        <PageWrapper\n            header={() => <GlobalNavBar />}\n            footer={() => <Footer />}\n            render={() => (\n                <MaterialTabsLayout\n                    transparent\n                    tabs={[\n                        {\n                            label: 'My Registrations',\n                            key: 'dashboard',\n                            path: '',\n                            component: Dashboard,\n                        },\n                        {\n                            label: t('Profile_'),\n                            key: 'profile',\n                            path: '/profile',\n                            component: Profile,\n                        },\n                    ]}\n                    baseRoute={match.url}\n                    location={location}\n                />\n            )}\n        />\n    )\n}\n"],"sourceRoot":""}