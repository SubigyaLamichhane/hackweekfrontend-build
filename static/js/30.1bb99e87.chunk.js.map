{"version":3,"sources":["pages/_projects/slug/default/index.js","pages/_projects/slug/by-track/track/index.js","pages/_projects/slug/by-challenge/challenge/index.js","pages/_projects/slug/view/projectId/ScoreForm.js","pages/_projects/slug/view/projectId/index.js","pages/_projects/slug/challenge/token/index.js","pages/_projects/slug/track/token/index.js","pages/_projects/slug/index.js","pages/_projects/index.js"],"names":["event","projects","activeFilter","setActiveFilter","useState","dispatch","useDispatch","userProfile","useSelector","UserSelectors","registrationStartTimeAlias","registrationEndTimeAlias","startTimeAlias","endTimeAlias","location","concatAndCapitalize","byChallenge","byTrack","useMemo","reduce","res","project","track","hasOwnProperty","push","challenges","forEach","challenge","onProjectSelected","useCallback","slug","_id","console","log","React","createElement","Fragment","EventHeroImage","subheading","Container","center","Box","mt","moment","isBefore","Winner","Filters","active","onChange","renderContent","tracks","length","textAlign","mb","Typography","variant","map","items","sorted","sortBy","item","description","ProjectsPreview","key","slice","count","label","name","moreLink","partner","ProjectsGrid","sortField","onSelect","match","useRouteMatch","find","params","filtered","data","filter","useEffect","window","scrollTo","title","indexOf","ScoreForm","showFullTeam","projectId","token","scoreExists","setScoreExists","setProject","loading","setLoading","error","setError","validToken","setValidToken","AuthSelectors","ProjectsService","validateToken","then","v","projectScore","setProjectScore","status","score","maxScore","message","ProjectScoresService","getScoreByEventSlugAndProjectIdAndPartnerToken","fetchProject","async","getPublicProjectById","err","onBack","goBack","PageWrapper","ProjectDetail","showTableLocation","scores","useStyles","makeStyles","theme","wrapper","display","flexDirection","justifyContent","padding","spacing","classes","setData","setProjects","draftsProjects","setDraftsProjects","finalProjects","setFinalProjects","fetchProjects","getChallengeProjectsWithToken","render","PageHeader","heading","Divider","Grid","className","container","xs","Button","onClick","color","height","url","showScore","getTrackProjectsWithToken","setEvent","fetchData","Promise","all","EventsService","getPublicEventBySlug","getProjectsByEvent","e","DashboardActions","OrganiserActions","Switch","Route","path","component","GalleryDetail","GalleryChallengeAdmin","GalleryTrackAdmin","galleryOpen","GalleryTrack","GalleryChallenge","exact","GalleryHome","Redirect","to","GlobalNavBar","ProjectGallery"],"mappings":"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","file":"static/js/30.1bb99e87.chunk.js","sourcesContent":["import React, { useState, useMemo, useCallback, useContext } from 'react'\nimport { push } from 'connected-react-router'\nimport { useDispatch } from 'react-redux'\n\nimport { sortBy } from 'lodash-es'\nimport { Box, Typography } from '@material-ui/core'\nimport Container from 'components/generic/Container'\nimport EventHeroImage from 'components/events/EventHeroImage'\nimport ProjectsPreview from './ProjectsPreview'\nimport Filters from './Filters'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\nimport Winner from 'pages/_events/slug/default/EventInformation/winner'\nimport moment from 'moment'\nimport { useSelector } from 'react-redux'\nimport * as UserSelectors from 'redux/user/selectors'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\nexport default ({ event, projects }) => {\n    const [activeFilter, setActiveFilter] = useState('')\n    const dispatch = useDispatch()\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    let registrationStartTimeAlias = 'registrationStartTime'\n    let registrationEndTimeAlias = 'registrationEndTime'\n    let startTimeAlias = 'startTime'\n    let endTimeAlias = 'endTime'\n\n    if (userProfile.location) {\n        registrationEndTimeAlias = concatAndCapitalize(\n            registrationEndTimeAlias,\n            userProfile.location,\n        )\n        registrationStartTimeAlias = concatAndCapitalize(\n            registrationStartTimeAlias,\n            userProfile.location,\n        )\n        startTimeAlias = concatAndCapitalize(\n            startTimeAlias,\n            userProfile.location,\n        )\n        endTimeAlias = concatAndCapitalize(endTimeAlias, userProfile.location)\n    }\n    const { byChallenge, byTrack } = useMemo(() => {\n        return projects.reduce(\n            (res, project) => {\n                if (project.track) {\n                    if (res.byTrack.hasOwnProperty(project.track)) {\n                        res.byTrack[project.track].push(project)\n                    } else {\n                        res.byTrack[project.track] = [project]\n                    }\n                }\n\n                if (project.challenges) {\n                    project.challenges.forEach(challenge => {\n                        if (res.byChallenge.hasOwnProperty(challenge)) {\n                            res.byChallenge[challenge].push(project)\n                        } else {\n                            res.byChallenge[challenge] = [project]\n                        }\n                    })\n                }\n\n                return res\n            },\n            {\n                byChallenge: {},\n                byTrack: {},\n            },\n        )\n    }, [projects])\n\n    const renderTrackPreviews = () => {\n        if (!event || !event.tracks) return null\n        if (projects.length === 0)\n            return (\n                <Container>\n                    <Box mt={3} textAlign=\"center\" mb={3}>\n                        <Typography variant=\"body\">\n                            All the projects that are submitted by the\n                            participants will be displayed in this section of\n                            the page.\n                        </Typography>\n                    </Box>\n                </Container>\n            )\n        return event.tracks.map(track => {\n            const items = byTrack[track.slug]\n            if (!items) return null\n            const sorted = sortBy(items, item => {\n                return -1 * item.description.length\n            })\n            return (\n                <>\n                    {/* <Typography variant='h4'>\n                        {track.name}\n                    </Typography> */}\n                    <ProjectsPreview\n                        key={track.slug}\n                        projects={sorted.slice(0, 3)}\n                        count={items.length}\n                        event={event}\n                        label={track.name}\n                        moreLink={`/projects/${event.slug}/by-track/${track.slug}`}\n                    />\n                </>\n            )\n        })\n    }\n\n    const renderChallengePreviews = () => {\n        if (!event || !event.challenges) return null\n\n        return event.challenges.map(challenge => {\n            const items = byChallenge[challenge.slug]\n            if (!items) return null\n            const sorted = sortBy(items, item => {\n                return -1 * item.description.length\n            })\n            return (\n                <ProjectsPreview\n                    key={challenge.slug}\n                    projects={sorted.slice(0, 3)}\n                    count={items.length}\n                    event={event}\n                    label={challenge.name}\n                    subheading={`By ${challenge.partner}`}\n                    moreLink={`/projects/${event.slug}/by-challenge/${challenge.slug}`}\n                />\n            )\n        })\n    }\n\n    const renderProjectGrid = () => {\n        if (!event) return null\n        if (projects.length === 0)\n            return (\n                <Container>\n                    <Box mt={3} textAlign=\"center\" mb={3}>\n                        <Typography variant=\"body\">\n                            All the projects that are submitted by the\n                            participants will be displayed in this section of\n                            the page.\n                        </Typography>\n                    </Box>\n                </Container>\n            )\n        return (\n            <Container>\n                <ProjectsGrid\n                    sortField={null}\n                    projects={projects}\n                    event={event}\n                    onSelect={onProjectSelected}\n                />\n            </Container>\n        )\n    }\n\n    const renderContent = () => {\n        console.log('activeFilter :>> ', activeFilter)\n\n        switch (activeFilter) {\n            case 'by-track':\n                return renderTrackPreviews()\n            case 'by-challenge':\n                return renderChallengePreviews()\n            default:\n                return renderProjectGrid()\n        }\n    }\n\n    const onProjectSelected = useCallback(\n        project => {\n            dispatch(push(`/projects/${event.slug}/view/${project._id}`))\n        },\n        [dispatch, event.slug],\n    )\n    console.log(event)\n    return (\n        <>\n            <EventHeroImage event={event} subheading=\"Project gallery\" />\n            <Container center>\n                <Box mt={5} />\n                {moment(event[endTimeAlias]).isBefore() ? (\n                    <Winner event={event} />\n                ) : (\n                    ''\n                )}\n                {/* <Winner event={event} /> */}\n                <Box mt={5} />\n                <Filters\n                    event={event}\n                    active={activeFilter}\n                    onChange={setActiveFilter}\n                />\n                {renderContent()}\n            </Container>\n        </>\n    )\n}\n","import React, { useMemo, useEffect, useCallback } from 'react'\n\nimport { push } from 'connected-react-router'\nimport { useRouteMatch } from 'react-router'\nimport { useDispatch } from 'react-redux'\nimport { find, sortBy } from 'lodash-es'\nimport { Box, Typography } from '@material-ui/core'\nimport Container from 'components/generic/Container'\nimport EventHeroImage from 'components/events/EventHeroImage'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\n\nexport default ({ event, projects }) => {\n    const dispatch = useDispatch()\n    const match = useRouteMatch()\n\n    const onProjectSelected = useCallback(\n        project => {\n            dispatch(push(`/projects/${event.slug}/view/${project._id}`))\n        },\n        [dispatch, event.slug],\n    )\n\n    const track = useMemo(() => {\n        if (!event || !event.tracks) return null\n        return find(event.tracks, track => {\n            return track.slug === match.params.track\n        })\n    }, [match, event])\n\n    const filtered = useMemo(() => {\n        if (!track || !projects) return []\n        const data = projects.filter(project => {\n            return project.track === track.slug\n        })\n        return sortBy(data, project => {\n            return -1 * project.description.length\n        })\n    }, [projects, track])\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n\n    return (\n        <>\n            <EventHeroImage\n                event={event}\n                title={track.name}\n                subheading={`${filtered.length} projects`}\n            />\n            <Container center>\n                <Box mt={3} />\n                <Typography variant=\"h4\">{track.name}</Typography>\n                <ProjectsGrid\n                    sortField={null}\n                    projects={filtered}\n                    event={event}\n                    onSelect={onProjectSelected}\n                />\n                <Box mt={5} />\n            </Container>\n        </>\n    )\n}\n","import React, { useMemo, useCallback } from 'react'\n\nimport { push } from 'connected-react-router'\nimport { useDispatch } from 'react-redux'\nimport { useRouteMatch } from 'react-router'\nimport { find, sortBy } from 'lodash-es'\nimport { Box } from '@material-ui/core'\n\nimport Container from 'components/generic/Container'\nimport EventHeroImage from 'components/events/EventHeroImage'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\n\nexport default ({ event, projects }) => {\n    const dispatch = useDispatch()\n    const match = useRouteMatch()\n\n    const onProjectSelected = useCallback(\n        project => {\n            dispatch(push(`/projects/${event.slug}/view/${project._id}`))\n        },\n        [dispatch, event.slug],\n    )\n\n    const challenge = useMemo(() => {\n        if (!event || !event.challenges) return null\n        return find(event.challenges, challenge => {\n            return challenge.slug === match.params.challenge\n        })\n    }, [match, event])\n\n    const filtered = useMemo(() => {\n        if (!challenge || !projects) return []\n        const data = projects.filter(project => {\n            return project.challenges.indexOf(challenge.slug) !== -1\n        })\n\n        return sortBy(data, item => {\n            return -1 * item.description.length\n        })\n    }, [projects, challenge])\n\n    return (\n        <>\n            <EventHeroImage\n                event={event}\n                title={challenge.partner}\n                subheading={challenge.name}\n            />\n            <Container center>\n                <Box mt={3} />\n                <ProjectsGrid\n                    sortField={null}\n                    projects={filtered}\n                    event={event}\n                    onSelect={onProjectSelected}\n                />\n                <Box mt={5} />\n            </Container>\n        </>\n    )\n}\n","import React from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport Button from 'components/generic/Button'\n\nimport { Box, TextField } from '@material-ui/core'\n\nconst ScoreForm = ({ event, project, submit, score }) => {\n    return (\n        <>\n            <Formik\n                initialValues={{ ...score }}\n                enableReinitialize={true}\n                onSubmit={submit}\n            >\n                {({ isSubmitting }) => (\n                    <Form>\n                        <Field name=\"score\">\n                            {({ field }) => (\n                                <TextField\n                                    fullWidth\n                                    label=\"Score\"\n                                    type=\"number\"\n                                    {...field}\n                                />\n                            )}\n                        </Field>\n                        <ErrorMessage name=\"score\" component=\"div\" />\n                        <Field name=\"message\">\n                            {({ field }) => (\n                                <TextField\n                                    fullWidth\n                                    label=\"Message\"\n                                    {...field}\n                                />\n                            )}\n                        </Field>\n                        <ErrorMessage name=\"message\" component=\"div\" />\n                        <Box p={2} />\n                        <Button\n                            color=\"theme_turquoise\"\n                            variant=\"contained\"\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                        >\n                            Save\n                        </Button>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    )\n}\n\nexport default ScoreForm\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { goBack } from 'connected-react-router'\nimport { useRouteMatch } from 'react-router'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport ProjectDetail from 'components/projects/ProjectDetail'\n// import ShareProject from 'components/projects/ProjectDetail/ShareProject'\n// import ScoreForm from './ScoreForm'\n// import Container from 'components/generic/Container'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// import moment from 'moment-timezone'\n// import { EventHelpers } from '@hackjunction/shared'\n\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport ProjectsService from 'services/projects'\nimport ProjectScoresService from 'services/projectScores'\nimport Container from 'components/generic/Container'\nimport ScoreForm from './ScoreForm'\n// import { set } from 'object-path'\n\nexport default ({ event, showFullTeam }) => {\n    const dispatch = useDispatch()\n\n    const match = useRouteMatch()\n    const { projectId, token } = match.params\n    const { slug } = event\n    const [scoreExists, setScoreExists] = useState(false)\n    const [project, setProject] = useState()\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n    // const hasAdvisor = useSelector(AuthSelectors.hasAdvisor)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const hasJudge = useSelector(AuthSelectors.hasJudge)\n    // const hasAdvisor = userProfile && userProfile.role === 'Advisor'\n    // console.log(useSelector(AuthSelectors.getRoles))\n    // console.log('project :>> ', project)\n    const [validToken, setValidToken] = useState(false)\n\n    useEffect(() => {\n        if (token && project && event) {\n            ProjectsService.validateToken(slug, token).then(v => {\n                if (v) setValidToken(v)\n            })\n        }\n    }, [event, project, slug, token])\n\n    const [projectScore, setProjectScore] = useState({\n        project: '',\n        event: '',\n        status: 'submitted',\n        score: 0,\n        maxScore: 10,\n        message: '',\n    })\n    useEffect(() => {\n        if (token && project && event) {\n            ProjectScoresService.getScoreByEventSlugAndProjectIdAndPartnerToken(\n                token,\n                event.slug,\n                project._id,\n            ).then(score => {\n                if (score[0]) {\n                    setProjectScore(score[0])\n                    setScoreExists(true)\n                }\n            })\n        }\n    }, [event, token, project])\n\n    const fetchProject = useCallback(async () => {\n        setLoading(true)\n        try {\n            const project = await ProjectsService.getPublicProjectById(\n                projectId,\n            )\n            setProject(project)\n        } catch (err) {\n            setError(true)\n        } finally {\n            setLoading(false)\n        }\n    }, [projectId])\n\n    const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n        values.project = project._id\n        values.event = event._id\n        try {\n            if (scoreExists) {\n                await ProjectScoresService.updateScoreByEventSlugAndPartnerToken(\n                    token,\n                    event.slug,\n                    values,\n                )\n                setProjectScore(values)\n            } else {\n                await ProjectScoresService.addScoreByEventSlugAndPartnerToken(\n                    token,\n                    event.slug,\n                    values,\n                )\n                setProjectScore(values)\n            }\n\n            // Refresh project data to update the UI\n            await fetchProject()\n\n            dispatch(SnackbarActions.success(`Score saved.`))\n            resetForm()\n        } catch (e) {\n            dispatch(\n                SnackbarActions.error(\n                    `Score could not be saved. Error: ${e.message}`,\n                ),\n            )\n        } finally {\n            setSubmitting(false)\n        }\n    }\n\n    const onBack = useCallback(() => {\n        dispatch(goBack())\n    }, [dispatch])\n\n    useEffect(() => {\n        fetchProject()\n    }, [fetchProject])\n    return (\n        <PageWrapper loading={loading} error={error}>\n            <ProjectDetail\n                project={project}\n                event={event}\n                onBack={onBack}\n                showFullTeam={showFullTeam}\n                fetchProject={fetchProject}\n                // showTableLocation={\n                //     !EventHelpers.isEventOver(\n                //         event,\n                //         moment,\n                //         userProfile.location,\n                //     )\n                // }\n                showTableLocation={true}\n                scores={projectScore}\n            />\n            {/* {hasJudge ? (\n                <Container>\n                    <ScoreForm\n                        event={event}\n                        project={project}\n                        submit={handleSubmit}\n                        score={projectScore}\n                    />\n                </Container>\n            ) : null} */}\n            {/* <ShareProject project={project} event={event} /> */}\n        </PageWrapper>\n    )\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useRouteMatch } from 'react-router'\nimport { push } from 'connected-react-router'\nimport { Box, Grid, Divider } from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\nimport Button from 'components/generic/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport ProjectsService from 'services/projects'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        padding: theme.spacing(2),\n    },\n}))\n\n//TODO make this and track one into a component\nexport default ({ event }) => {\n    const classes = useStyles()\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { slug } = event\n    const { token } = match.params\n    const [data, setData] = useState({})\n    const [projects, setProjects] = useState([])\n    const [draftsProjects, setDraftsProjects] = useState([])\n    const [finalProjects, setFinalProjects] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    const fetchProjects = useCallback(async () => {\n        setLoading(true)\n        try {\n            const data = await ProjectsService.getChallengeProjectsWithToken(\n                slug,\n                token,\n            )\n            setData(data)\n            setDraftsProjects(\n                data.projects.filter(project => project.status === 'draft'),\n            )\n            setFinalProjects(\n                data.projects.filter(project => project.status === 'final'),\n            )\n            setProjects(data.projects)\n        } catch (err) {\n            setError(true)\n        }\n        setLoading(false)\n    }, [slug, token])\n\n    useEffect(() => {\n        fetchProjects()\n    }, [fetchProjects])\n\n    if (!data) {\n        return null\n    }\n\n    return (\n        <PageWrapper\n            loading={loading || !data}\n            error={error}\n            render={() => (\n                <Container center>\n                    <PageHeader\n                        heading={data.challenge.name}\n                        subheading={data.projects.length + ' projects'}\n                    />\n                    <Box>FILTER</Box>\n                    <Divider />\n                    <Grid className={classes.wrapper} container spacing={1}>\n                        <Grid item xs={4}>\n                            <Button\n                                onClick={() => {\n                                    setProjects(finalProjects)\n                                }}\n                                variant=\"outlined\"\n                                color=\"theme_lightgray\"\n                            >\n                                Final\n                            </Button>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Button\n                                onClick={() => {\n                                    setProjects(draftsProjects)\n                                }}\n                                variant=\"outlined\"\n                                color=\"theme_lightgray\"\n                            >\n                                Draft\n                            </Button>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Button\n                                onClick={() => {\n                                    setProjects(data.projects)\n                                }}\n                                variant=\"outlined\"\n                                color=\"theme_lightgray\"\n                            >\n                                All\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Divider />\n                    <Box height={20} />\n                    <ProjectsGrid\n                        projects={projects}\n                        event={data.event}\n                        onSelect={project =>\n                            dispatch(push(`${match.url}/view/${project._id}`))\n                        }\n                        showScore={true}\n                        token={token}\n                    />\n                    <Box height={200} />\n                </Container>\n            )}\n        ></PageWrapper>\n    )\n}\n","import React, { useState, useEffect, useCallback } from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { useRouteMatch } from 'react-router'\nimport { push } from 'connected-react-router'\nimport { Box } from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport ProjectsGrid from 'components/projects/ProjectsGrid'\n\nimport ProjectsService from 'services/projects'\n\n//TODO make this and challenge one into a component\nexport default ({ event }) => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { slug } = event\n    const { token } = match.params\n    const [data, setData] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n    const fetchProjects = useCallback(async () => {\n        setLoading(true)\n        try {\n            const data = await ProjectsService.getTrackProjectsWithToken(\n                slug,\n                token,\n            )\n            setData(data)\n        } catch (err) {\n            setError(true)\n        }\n        setLoading(false)\n    }, [slug, token])\n\n    useEffect(() => {\n        fetchProjects()\n    }, [fetchProjects])\n\n    // TODO seems like a bad practice\n    if (!data) {\n        return null\n    }\n    return (\n        <PageWrapper\n            loading={loading || !data}\n            error={error}\n            render={() => (\n                <Container center>\n                    <PageHeader\n                        heading={data.track.name}\n                        subheading={data.projects.length + ' projects'}\n                    />\n                    <ProjectsGrid\n                        projects={data.projects}\n                        event={data.event}\n                        onSelect={project =>\n                            dispatch(push(`${match.url}/view/${project._id}`))\n                        }\n                        showScore={true}\n                        token={token}\n                    />\n                    <Box height={200} />\n                </Container>\n            )}\n        ></PageWrapper>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useRouteMatch } from 'react-router'\nimport { push } from 'connected-react-router'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport EventsService from 'services/events'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as OrganiserActions from 'redux/organiser/actions'\n// import DashboardService from 'services/dashboard'\nimport ProjectsService from 'services/projects'\nimport GalleryHome from './default'\nimport GalleryTrack from './by-track/track'\nimport GalleryChallenge from './by-challenge/challenge'\nimport GalleryDetail from './view/projectId'\nimport GalleryChallengeAdmin from './challenge/token'\nimport GalleryTrackAdmin from './track/token'\n// import { useEventPreview } from 'graphql/queries/events'\n\nexport default () => {\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    const { slug } = match.params\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(true)\n    const [event, setEvent] = useState()\n    const [projects, setProjects] = useState([])\n    // TODO use Graphql here to get event\n    // useEventPreview(eventId) but with slug\n    const fetchData = useCallback(async () => {\n        setLoading(true)\n        try {\n            const [event, projects] = await Promise.all([\n                EventsService.getPublicEventBySlug(slug),\n                ProjectsService.getProjectsByEvent(slug),\n                // Dash,\n            ])\n            if (!event) {\n                dispatch(push('/'))\n            }\n            setEvent(event)\n            setProjects(projects)\n        } catch (e) {\n            setError(true)\n        } finally {\n            setLoading(false)\n        }\n    }, [dispatch, slug])\n\n    useEffect(() => {\n        dispatch(DashboardActions.updateEvent(slug))\n        dispatch(DashboardActions.updateRegistration(slug))\n        dispatch(DashboardActions.updateTeam(slug))\n        //TODO dont use OrganiserSelectors here\n        dispatch(OrganiserActions.updateProjects(slug))\n        dispatch(OrganiserActions.updateGavelProjects(slug))\n        dispatch(OrganiserActions.updateRankings(slug))\n        dispatch(OrganiserActions.generateResults(slug)) // TODO do we need to get results always?\n        dispatch(DashboardActions.updateRegistrationsForEvent(slug))\n        dispatch(OrganiserActions.updateRegistrationsForEvent(slug))\n        dispatch(OrganiserActions.updateTeamsForEvent(slug))\n        dispatch(DashboardActions.updateTeamsForEvent(slug))\n        dispatch(DashboardActions.updateProjectScores(slug))\n    }, [slug, dispatch])\n\n    useEffect(() => {\n        fetchData()\n    }, [fetchData])\n\n    //First two routes are for challenge link cases\n    // TODO make this more modulary\n    return (\n        <PageWrapper loading={loading} error={error}>\n            <Switch>\n                <Route\n                    path={`${match.url}/challenge/:token/view/:projectId`}\n                    component={({ match }) => (\n                        <GalleryDetail\n                            event={event}\n                            match={match}\n                            showFullTeam={true}\n                        />\n                    )}\n                />\n                <Route\n                    path={`${match.url}/challenge/:token`}\n                    component={({ match }) => (\n                        <GalleryChallengeAdmin\n                            projects={projects}\n                            event={event}\n                            match={match}\n                        />\n                    )}\n                />\n                <Route\n                    path={`${match.url}/tracks/:token/view/:projectId`}\n                    component={({ match }) => (\n                        <GalleryDetail\n                            event={event}\n                            match={match}\n                            showFullTeam={true}\n                        />\n                    )}\n                />\n                <Route\n                    path={`${match.url}/tracks/:token`}\n                    component={({ match }) => (\n                        <GalleryTrackAdmin\n                            projects={projects}\n                            event={event}\n                            match={match}\n                        />\n                    )}\n                />\n                {/** Hide the rest of these routes if the gallery isn't open */}\n                {event?.galleryOpen && (\n                    <>\n                        <Route\n                            path={`${match.url}/view/:projectId`}\n                            component={({ match }) => (\n                                <GalleryDetail event={event} match={match} />\n                            )}\n                        />\n                        <Route\n                            path={`${match.url}/by-track/:track`}\n                            component={({ match }) => (\n                                <GalleryTrack\n                                    projects={projects}\n                                    event={event}\n                                    match={match}\n                                />\n                            )}\n                        />\n                        <Route\n                            path={`${match.url}/by-challenge/:challenge`}\n                            component={({ match }) => (\n                                <GalleryChallenge\n                                    projects={projects}\n                                    event={event}\n                                    match={match}\n                                />\n                            )}\n                        />\n                        <Route\n                            exact\n                            path={match.url}\n                            component={() => (\n                                <GalleryHome\n                                    projects={projects}\n                                    event={event}\n                                />\n                            )}\n                        />\n                    </>\n                )}\n                <Redirect to=\"/\" />\n            </Switch>\n        </PageWrapper>\n    )\n}\n","import React from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport { useRouteMatch } from 'react-router'\n\nimport GlobalNavBar from 'components/navbars/GlobalNavBar'\nimport ProjectGallery from './slug'\n\nexport default () => {\n    const match = useRouteMatch()\n\n    return (\n        <>\n            <GlobalNavBar />\n            <Switch>\n                <Route\n                    exact={false}\n                    path={`${match.url}/:slug`}\n                    component={ProjectGallery}\n                />\n                <Redirect to=\"/\" />\n            </Switch>\n        </>\n    )\n}\n"],"sourceRoot":""}