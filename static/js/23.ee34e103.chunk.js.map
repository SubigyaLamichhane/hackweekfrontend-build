{"version":3,"sources":["hooks/formHooks.js","components/layouts/MaterialTabsLayout/index.js","components/generic/ConfirmDialog/index.js","components/generic/Empty/index.js","components/inputs/SelectOld/index.js","components/generic/_Table/PageSizeSelect.js","components/generic/_Table/PageSelect.js","components/generic/_Table/Pagination.js","components/generic/_Table/ActionBar.js","components/generic/_Table/filterFunctions.js","components/generic/_Table/Table.js","components/generic/_Table/sortFunctions.js","components/generic/_Table/filters/SingleSelectFilter.js","components/generic/_Table/filterTypes.js","components/generic/_Table/filters/MultipleSelectFilter.js","components/generic/_Table/index.js","components/generic/_Table/filters/ContainsSearch.js","components/generic/StatusBadge/index.js","components/inputs/EventTagsSelect/index.js","components/generic/UserListItem/index.js","components/inputs/RegistrationStatusSelect/index.js","components/modals/BulkEmailModal/index.js","components/generic/UserListItem/OrganiserListItem.js","components/modals/BulkEditRegistrationModal/index.js","components/generic/Modal/index.js","components/modals/OrganiserSelectModal/index.js","components/renderRatingContent.js","components/layouts/SidebarLayout/index.js","components/navbars/BasicNavBar/index.js","components/inputs/PdfUpload/index.js","components/inputs/StreetAddressForm/index.js","components/filters/FilterValueInput.js","components/filters/FilterForm.js","components/filters/FilterListItem.js","components/filters/FilterList.js","components/filters/FilterSaveForm.js","components/filters/FilterGroupMenu.js","components/modals/EditRegistrationModal/EditRegistrationActions.js","components/generic/Tag/Variants.js","components/generic/DescriptionItem/index.js","components/modals/EditRegistrationModal/EditRegistrationContent.js","components/modals/EditRegistrationModal/index.js","pages/_dashboard/slug/reviewing/instructions-online.md","pages/_dashboard/slug/default/Blocks/RegistrationStatusBlock.js","pages/_dashboard/slug/default/Blocks/ProjectBlock.js","components/generic/NotificationBlock/IconHeader.js","components/generic/NotificationBlock/index.js","pages/_dashboard/slug/default/Blocks/TeamStatusBlock.js","pages/_dashboard/slug/default/Blocks/VisaInvitationBlock.js","pages/_dashboard/slug/default/Blocks/TravelGrantStatusBlock.js","pages/_dashboard/slug/default/Blocks/GavelReviewingBlock.js","pages/_dashboard/slug/default/Blocks/ReviewingPeriodBlock.js","utils/modifyPdf.js","pages/_dashboard/slug/default/Blocks/CertificateBlock.js","pages/_dashboard/slug/default/Blocks/EventOverBlock.js","pages/_dashboard/slug/default/Blocks/SocialMediaBlock.js","pages/_dashboard/slug/default/Blocks/TimeLineBlock.js","pages/_dashboard/slug/default/index.js","pages/_dashboard/slug/team/JoinTeam.js","pages/_dashboard/slug/team/EditTeam.js","pages/_dashboard/slug/team/index.js","pages/_dashboard/slug/project/ProjectImages.js","pages/_dashboard/slug/project/ProjectDocuments.js","pages/_dashboard/slug/project/ProjectVideo.js","pages/_dashboard/slug/project/SubmissionForm.js","components/modals/ProjectScoreModal/index.js","pages/_dashboard/slug/project/ProjectsList.js","pages/_dashboard/slug/project/index.js","pages/_dashboard/slug/reviewing/Instructions.js","pages/_dashboard/slug/reviewing/FirstProject.js","pages/_dashboard/slug/reviewing/VoteTimer.js","pages/_dashboard/slug/reviewing/CompareProjects.js","pages/_dashboard/slug/reviewing/Complete.js","pages/_dashboard/slug/reviewing/Disabled.js","pages/_dashboard/slug/reviewing/index.js","pages/_dashboard/slug/rating/index.js","pages/_dashboard/slug/finalist/index.js","pages/_dashboard/slug/travel-grant/TravelGrantForm.js","pages/_dashboard/slug/travel-grant/index.js","pages/_dashboard/slug/event-id/index.js","components/tables/AttendeeTableUserSide/index.js","pages/_dashboard/slug/participants/default/index.js","components/tables/TeamsTableUserSide/index.js","pages/_dashboard/slug/participants/teams/index.js","pages/_dashboard/slug/participants/index.js","pages/_dashboard/slug/index.js","pages/_dashboard/index.js"],"names":["useFormField","initialValue","validate","initialError","onChangeEvent","value","setValue","useState","error","setError","onChange","useCallback","e","target","newError","reset","undefined","handleValidate","err","dirty","useStyles","makeStyles","theme","root","transparent","flexGrow","width","backgroundColor","palette","background","paper","wrapper","textAlign","alignItems","tabs","location","baseRoute","dispatch","useDispatch","classes","pushRoute","path","push","activeIndex","useMemo","relativePath","pathname","replace","findIndex","item","useEffect","safeIndex","useTheme","isMobile","useMediaQuery","breakpoints","down","React","createElement","className","Tabs","orientation","handleChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","aria-label","map","tab","index","Tab","Object","assign","key","label","id","a11yProps","Box","mt","p","Switch","component","Route","exact","Redirect","to","ConfirmDialog","open","onClose","onCancel","onOk","title","message","cancelText","okText","handleCancel","handleOk","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","Empty","isEmpty","emptyText","button","hideIfNotEmpty","renderButton","text","pt","pb","pl","pr","display","flexDirection","justifyContent","InfoTwoToneIcon","Typography","chips","flexWrap","chip","margin","_Select","memo","disabled","helperText","multiple","onBlur","options","placeholder","type","preventDefault","items","Array","isArray","length","SelectOptions","COUNTRIES","COUNTRY_CODES","NATIONALITIES","DIETARY_RESTRICTIONS","NUM_HACKATHONS","GENDERS","EXPERTISE","INDUSTRIES","LANGUAGES","ROLES","SKILLS","THEMES","STATUSES","DAYS","MONTHS","YEARS","valueOrDefault","selectProps","onOpen","renderValue","Chip","TextField","fullWidth","select","SelectProps","MenuItem","ListItemText","primary","secondary","helper","gotoPage","pageSize","setPageSize","_setPageSize","size","ButtonGroup","bind","pageIndex","pageCount","canPreviousPage","previousPage","canNextPage","nextPage","IconButton","NavigateBeforeIcon","NavigateNextIcon","up","Pagination","props","PageSizeSelect","PageSelect","selectionActions","height","main","overflow","boxSizing","selectionTitle","fontWeight","ActionBar","selected","actions","enableExport","flatHeaders","selectionActive","_actions","base","concat","CSVLink","style","textDecoration","data","values","filename","headers","header","Header","filter","action","motion","div","variants","visible","hidden","animate","Fragment","mr","rows","filterValue","row","indexOf","_row$values$id","overflowX","position","table","tableRow","onRowClick","renderExpanded","baseStyles","clickableStyles","cursor","transition","tableHead","darken","tableHeadRow","tableHeadCell","fontSize","lineHeight","whiteSpace","tableHeadCellActive","tableHeadSortIcon","tableCell","tableFooter","expandedRow","_Table","columns","bulkActions","enablePagination","enableSelection","defaultColumn","Filters","Disabled","Sorters","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","pageOptions","selectedFlatRows","state","useTable","filterTypes","FilterFunctions","defaultCanFilter","initialState","useFilters","useSortBy","useExpanded","usePagination","useRowSelect","hooks","getToggleAllRowsSelectedProps","Checkbox","Cell","stopPropagation","getToggleRowSelectedProps","handleRowClick","toggleRowExpanded","isExpanded","pagination","columnCount","result","Table","TableHead","headerGroup","TableRow","getHeaderGroupProps","column","TableCell","getHeaderProps","getSortByToggleProps","TableSortLabel","active","canSort","isSorted","direction","isSortedDesc","icon","IconComponent","ExpandMoreIcon","hideSortIcon","render","TableBody","i","_row$getRowProps","getRowProps","cells","cell","getCellProps","colSpan","defaultProps","getValues","rowA","rowB","defaultValue","_rowA$values$key","_rowA$values","_rowB$values$key","_rowB$values","SingleSelectFilter","Filter","Component","preFilteredRows","setFilter","grouped","groupBy","keys","native","option","padding","spacing","optionSelected","theme_lightgray","SingleSelect","MultipleSelect","selectedValues","ContainsSearch","canFilter","Numeric","sortType","a","b","disableSortBy","Alphabetic","memoize","localeCompare","DateTime","Date","ArrayLength","Default","lighten","borderColor","borderWidth","typography","overline","StatusBadge","status","hideSoftStatuses","params","RegistrationStatuses","asObject","softAccepted","softRejected","pending","EventTagsSelect","tags","Select","isMulti","tag","UserListItem","user","selectable","onSelect","userName","firstName","lastName","userEmail","email","ListItem","ListItemAvatar","Avatar","alt","src","avatar","RegistrationStatusSelect","allowRestricted","asArray","userIds","idToken","useSelector","AuthSelectors","UserSelectors","OrganiserSelectors","loading","setLoading","confirmModalOpen","setConfirmModalOpen","headerImage","t","useTranslation","subject","subtitle","body","messageId","ctaText","ctaLink","fields","header_image","cta_text","cta_link","errors","field","forEach","SnackbarActions","handleTestEmail","EmailService","sendPreviewEmail","slug","then","catch","finally","handleConfirm","sendBulkEmail","autoHideDuration","fullScreen","PageWrapper","wrapContent","Container","center","amount","PageHeader","heading","subheading","paragraph","Grid","container","xs","TextInput","rawOnChange","TextAreaInput","textarea","userId","organisersMap","organiserModal","setOrganiserModal","confirmDialog","setConfirmDialog","rating","assignedTo","expandedIds","setExpandedIds","panel","toggleExpanded","handleClose","getEdits","edits","handleSubmit","OrganiserActions","ExpansionPanel","expanded","ExpansionPanelSummary","flex","ExpansionPanelDetails","Rating","num","OrganiserSelectModal","onClear","mb","OrganiserListItem","join","zIndex","wrapperPadded","content","maxWidth","contentMed","contentMax","borderRadius","inner","GenericModal","isOpen","children","footer","HyperModal","requestClose","contentClassName","clsx","wrapperClassName","organisers","setSelected","handleClear","Modal","List","organiser","RenderContent","projectsByRating","scores","ranked","project","images","url","name","punchline","description","technologies","tech","Scoring","LoadingSpinner","drawer","top","left","flexShrink","drawerToggle","drawerToggleDesktop","desktopOpen","marginLeft","drawerPaper","listItem","listItemSelected","listItemTextPrimary","listItemTextSecondary","listItemIcon","pageWrapper","pageWrapperInner","topContent","sidebarTopContent","routes","_routes","route","setMobileOpen","mobileOpen","setDesktopOpen","handleDrawerToggle","handleDrawerToggleDesktop","drawerContent","locked","ListItemIcon","LockIcon","lockedDescription","Hidden","mdUp","implementation","MenuIcon","smDown","KeyboardBackspaceIcon","Drawer","anchor","ModalProps","keepMounted","drawerDesktop","wrapperClass","marginRight","textTransform","alignSelf","BasicNavBar","paddingLeft","UserMenu","uploader","uploaderInner","uploadText","uploadUrl","resizeMode","beforeUpload","file","isPDF","isLt10M","handleRemove","info","response","_info$file$response$m","_info$file","_info$file$response","href","ml","Tooltip","ClearIcon","Upload","Dragger","listType","showUploadList","Authorization","CircularProgress","StreetAddressInput","showVenueName","country","addressLine","addressLine2","city","postalCode","venueName","fieldName","fieldValue","MULTI_TYPES","FilterTypes","ONE_OF","NOT_ONE_OF","CONTAINS_ONE_OF","NOT_CONTAINS_ONE_OF","FilterValueInput","filterType","valueType","inputParams","LESS_THAN","NOT_LESS_THAN","MORE_THAN","NOT_MORE_THAN","CONTAINS","NOT_CONTAINS","EQUALS","NOT_EQUALS","FilterValues","STRING","formatValue","formatOnChange","split","BOOLEAN","DATE","GENDER","NATIONALITY","COUNTRY","LANGUAGE","TAG","STATUS","NUMBER","IS_EMPTY","NOT_EMPTY","BOOLEAN_FALSE","BOOLEAN_TRUE","headingItem","onSubmit","setExpanded","setFilterType","setFilterValue","filterParams","JSON","parse","submitValue","filterOptions","RegistrationFields","filters","stringify","filterTypeOptions","filterTypesForType","expandIcon","aria-controls","ExpansionPanelActions","inline","FilterListItem","onRemove","getType","ListItemSecondaryAction","edge","DeleteIcon","badge","right","list","FilterList","activeItemKey","hasFilters","newFilters","idx","Badge","anchorOrigin","vertical","horizontal","badgeContent","showZero","Divider","activeItem","reservedLabels","onSave","onDelete","isEdit","isDefault","isAdd","handleEdit","handleCreate","handleDelete","onSelectedChange","showEdit","filterGroups","anchorEl","setAnchorEl","setFilters","handleFilterAdd","sortBy","Paper","aria-haspopup","currentTarget","Menu","Boolean","handleMenuItemClick","FilterForm","FilterSaveForm","registration","organiserModalOpen","setOrganiserModalOpen","travelGrant","formFields","formValues","formDirty","v","Yes","withStyles","No","NotAvailable","DescriptionItem","renderBoolean","bool","renderObjectFields","obj","labelMap","valueMap","primaryTypographyProps","secondaryTypographyProps","renderContent","role","Roles","getLabelForExperienceLevel","years","Skills","getLabelForSkillLevel","level","university","degree","graduationYear","applyAsTeam","applyAlone","moment","format","Misc","numHackathonOptions","getLabelForValue","rel","consent","relocation","relocationOptions","recruitmentStatuses","countryCode","number","answers","getCategory","sorted","getCategoryOrderByLabel","console","log","customAnswers","CustomAnswers","element","section","categoryNames","fieldToLabelMap","customField","find","registrationQuestions","f","customQuestions","questions","question","registrationId","onEdited","teamsMap","setRegistration","RegistrationsService","getFullRegistration","participantName","participantSubheading","_registration$answers","_team$code","team","countryOfResidence","code","async","MiscUtils","sleep","EditRegistrationContent","EditRegistrationActions","module","exports","DashboardSelectors","isRegistrationOpen","userProfile","registrationStartTimeAlias","registrationEndTimeAlias","startTimeAlias","endTimeAlias","concatAndCapitalize","cancelDialogOpen","setCancelDialogOpen","DashboardActions","rejected","accepted","acceptedToHub","confirmed","confirmedToHub","checkedIn","cancelled","eventName","time","window","config","CALENDAR_URL","PLATFORM_OWNER_NAME","GradientBox","hasAdvisor","projectLoading","isSubmissionsUpcoming","isSubmissionsPast","submissionsStartTimeAlias","submissionsEndTimeAlias","EventHelpers","isEventOver","gutterBottom","submissionsStartTime","submissionsDeadline","Countdown","daysInHours","date","renderer","formatted","hours","minutes","seconds","getBackgroundColor","light","IconHeader","getIcon","CheckCircleOutlinedIcon","ErrorOutlineOutlinedIcon","ReportProblemOutlinedIcon","InfoOutlinedIcon","SuccessHeader","ErrorHeader","WarningHeader","InfoHeader","NotificationBlock","titleExtra","bottom","bottomLoading","Card","CardContent","Skeleton","CardMedia","headerComponent","CardActions","appliedAsTeam","hasTeam","isTeamComplete","isAcceptancePending","md","lazy","eventType","EventTypes","physical","needsTravelGrant","challenge_instructions","faq","reviewMethod","ReviewingMethods","gavelPeerReview","lg","tracksEnabled","tracks","demoInstructions","voteCount","reviewingStartTimeAlias","reviewingEndTimeAlias","isVotingOpen","fromNow","modifyPdf","x","y","existingPdfBytes","fetch","res","arrayBuffer","pdfDoc","PDFDocument","load","font","embedFont","StandardFonts","Helvetica","getPages","textWidth","widthOfTextAtSize","drawText","align","rgb","pdfBytes","save","download","eventLoading","certificate","galleryOpen","doneTitle","socialIcon","SocialMediaBlock","region","setRegion","eventTimeline","FormControl","InputLabel","labelId","EventTimeline","accentColor","sidebarTextColor","forcedRegion","Helmet","property","SEO_IMAGE_URL","SEO_TWITTER_HANDLE","TimeLineBlock","EventOverBlock","ReviewingPeriodBlock","RegistrationStatusBlock","TravelGrantStatusBlock","CertificateBlock","ProjectBlock","TeamStatusBlock","GavelReviewingBlock","box","boxShadow","setCode","setName","handleJoin","_err$response","_err$response$data","textHighlight","theme_white","listItemName","teamSecond","idTokenData","editingName","setEditingName","teamName","setTeamName","deleteDialogOpen","setDeleteDialogOpen","isTeamOwner","owner","sub","allTeamMembers","members","handleUpdateName","trim","handleLeave","handleRemoveMember","profile","meta","autoFocus","teamLoading","teams","renderAddButton","roles","includes","JoinTeam","EditTeam","block","paddingTop","maxImages","getValue","slice","setActiveStep","splice","activeStep","SwipeableViews","axis","onChangeIndex","enableMouseEvents","apply","val","ImageUpload","MobileStepper","steps","nextButton","handleNext","prevActiveStep","backButton","handleBack","uppercase","isStringURL","str","URL","_","SubmissionForm","handleProjectSelected","projects","setProject","projectStatus","setProjectStatus","locationModalOpen","setLocationModalOpen","newLocation","setNewLocation","formikInstance","setFormikInstance","setFieldValue","handleLocationChangeConfirm","setLocation","handleLocationChangeCancel","foundProject","_id","initialValues","sourcePublic","hiddenMembers","track","tracknew","returnTracknew","locationnew","privacy","trackOptions","locationOptions","challengesEnabled","challenges","challenge","partner","Formik","enableReinitialize","validationSchema","yup","shape","ProjectSchema","setSubmitting","_res","_res$payload","_res$payload$response","_res$payload$response2","payload","formikProps","FastField","form","hint","touched","setFieldTouched","submitCount","ProjectImages","finalValue","toString","MarkdownInput","ProjectDocuments","ProjectVideo","demoLabel","demoHint","demoPlaceholder","BooleanInput","ProjectStatusInput","ErrorsBox","isSubmitting","BottomBar","submitForm","renderForm","MuiButton","ProjectScoreModal","score","NoScoreYet","EvaluatingScore","EvaluationSuccessful","maxScore","projectScores","projectSelectedCallback","selectedProjectScore","setSelectedProjectStore","projectScoreModalOpen","setProjectScoreModalOpen","challengeAndTrackSlugState","setChallengeAndTrackSlugState","challengeAndTrackSlugToNameMap","s","ProjectCard","elevation","m","selectedProjectId","setSelectedProjectId","showSubmissionForm","setShowSubmissionForm","showProjectSelector","setShowProjectSelector","setSubmissionsStartTimeAlias","setSubmissionsEndTimeAlias","setIsSubmissionsUpcoming","setIsSubmissionsPast","isFirstLoad","setIsFirstLoad","allowProjectSubmissionsPerChallenge","args","completed","days","weeks","Math","floor","parseInt","remainingDays","padStart","ProjectsList","my","instructions","setInstructions","instructionsOnline","handleBegin","Markdown","source","projectId","fetchProject","GavelService","getProjectDetails","handleDone","ProjectsGridItem","showTableLocation","onClickMore","transitionDuration","ProjectDetail","onBack","annotator","updatedAt","add","toDate","prevId","nextId","isFirstChoice","setProjects","confirmOpen","setConfirmOpen","fetchProjects","prev","next","Promise","all","handlePrevVote","handleNextVote","handleSkip","ignore","skipped","justify","labelBackground","VoteTimer","CheckCircleOutlineIcon","SentimentVeryDissatisfiedIcon","annotatorError","annotatorLoading","FirstProject","CompareProjects","Complete","Instructions","setScores","staredProjects","usersThatRated","showFullTeam","handleScoring","feedback","rankedProjects","audienceChoiceProjects","_unranked$winners$len","winners","runnersUp","sort","rankedIds","Set","unranked","has","topRating","secondRating","handleProjectSelection","byTrack","reduce","hasOwnProperty","runnerUps","sortedProjects","scoreA","round","globalScore","scoreB","regionalScoreA","regionalScore","highestScore","lastWinnerIndex","remainingProjects","runnerUpScore","rankProjectsByScore","paddingBottom","WinnerDisplay","travelGrantDetails","legalName","middleName","dateOfBirth","address","hasSSN","SSN","hasIBAN","IBAN","receiptsPdf","receiptsSum","schema","DateInput","Field","StreetAddressForm","accountNumber","swift","bankName","PdfUpload","isDeadlinePast","isGrantDeadlinePast","renderStatusBlock","travelGrantStatus","Statuses","not_submitted","travelGrantComment","travelGrantAmount","TravelGrantForm","qrCodeWrapper","textWrapper","marginTop","QRCode","emptyRenderer","attendees","minimal","filteredAttendees","attendee","useLocation","searchParams","URLSearchParams","search","organiserProfilesMap","query","hasModal","activeModal","get","setData","modal","original","selectedRows","accessor","readOnly","Tag","fetchData","ob","_ob$tags","_answers$dietaryRestr","_answers$spokenLangua","Email","Status","expertise","skills","industriesOfInterest","Tags","dietaryRestrictions","spokenLanguages","themesOfInterest","createdAt","flattenObject","resetSearch","EditRegistrationModal","BulkEditRegistrationModal","BulkEmailModal","registrations","registrationsLoading","filtered","FilterHelpers","applyFilters","acc","cur","appendCustomAnswers","FilterGroupMenu","AttendeeTable","simplifiedView","registrationsMap","reviewStatus","setReviewStatus","completedStatus","setCompletedStatus","ratingRange","setRatingRange","bulkEdit","setBulkEdit","bulkEmail","setBulkEmail","handleRatingRangeChange","teamsFiltered","membersMapped","member","ownerMapped","allMembers","reviewedCount","memberCount","avgRating","sumBy","toFixed","reviewedPercent","complete","filteredMemberIds","reg","registrationIds","paddingRight","Slider","onChangeCommitted","valueLabelDisplay","min","max","step","selection","teamsLoading","TeamsTable","match","useRouteMatch","MaterialTabsLayout","DefaultTab","TeamsTab","sidebarTop","sidebarLogo","objectFit","registrationLoading","lockedPages","shownPages","setHidden","ArrowBackIosIcon","SidebarLayout","Image","publicId","logo","transformation","DashboardIcon","DefaultPage","GroupIcon","ParticipantPage","winner","HowToVoteIcon","FinalistPage","TeamPage","submissions","AssignmentOutlinedIcon","ProjectPage","reviewing","StarRateIcon","ReviewingPage","RatingPage","eventID","FingerprintIcon","EventIDPage","FlightTakeoffIcon","TravelGrantPage","SlugPage"],"mappings":"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","file":"static/js/23.ee34e103.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\n\nexport const useFormField = (\n    initialValue,\n    validate = () => null,\n    initialError = null,\n    onChangeEvent = true,\n) => {\n    const [value, setValue] = useState(initialValue)\n    const [error, setError] = useState(initialError)\n\n    const onChange = useCallback(\n        e => {\n            const value = onChangeEvent ? e.target.value : e\n            setValue(value)\n            if (error) {\n                const newError = validate(value)\n\n                if (newError) {\n                    setError(newError)\n                } else {\n                    setError(null)\n                }\n            }\n        },\n        [error, validate, onChangeEvent],\n    )\n\n    const reset = useCallback(() => {\n        setValue(initialValue)\n        setError(undefined)\n    }, [initialValue])\n\n    const handleValidate = useCallback(() => {\n        const err = validate(value)\n        if (err) {\n            setError(err)\n            return err\n        } else {\n            setError()\n            return\n        }\n    }, [value, validate])\n\n    return {\n        value,\n        setValue,\n        onChange,\n        reset,\n        error,\n        setError,\n        validate: handleValidate,\n        dirty: value !== initialValue,\n    }\n}\n","import React, { useMemo, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { findIndex } from 'lodash-es'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Tabs, Tab, Typography, Box, useMediaQuery } from '@material-ui/core'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            <Box>{children}</Box>\n        </Typography>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ transparent }) => ({\n        flexGrow: 1,\n        width: '100%',\n        backgroundColor: transparent\n            ? 'transparent'\n            : theme.palette.background.paper,\n    }),\n    wrapper: {\n        textAlign: 'left',\n        alignItems: 'flex-start',\n    },\n}))\n\nexport default ({ tabs, location, baseRoute, transparent = false }) => {\n    const dispatch = useDispatch()\n    const classes = useStyles({ transparent })\n\n    const pushRoute = useCallback(\n        path => {\n            dispatch(push(`${baseRoute}${path}`))\n        },\n        [baseRoute, dispatch],\n    )\n\n    const handleChange = (event, newValue) => {\n        pushRoute(tabs[newValue].path)\n    }\n\n    const activeIndex = useMemo(() => {\n        const relativePath = location.pathname.replace(baseRoute, '')\n        const idx = findIndex(tabs, item => item.path === relativePath)\n        return idx\n    }, [baseRoute, location.pathname, tabs])\n\n    useEffect(() => {\n        if (activeIndex === -1) {\n            pushRoute(tabs[0].path)\n        }\n    }, [tabs, activeIndex, pushRoute])\n\n    const safeIndex = activeIndex !== -1 ? activeIndex : 0\n    const theme = useTheme()\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'))\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                orientation={isMobile ? 'vertical' : 'horizontal'}\n                value={safeIndex}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                aria-label=\"scrollable auto tabs\"\n            >\n                {tabs.map((tab, index) => (\n                    <Tab\n                        key={tab.label}\n                        label={tab.label}\n                        {...a11yProps(index)}\n                        classes={isMobile ? { wrapper: classes.wrapper } : {}}\n                    />\n                ))}\n            </Tabs>\n            <Box mt={3} p={2}>\n                <Switch>\n                    {tabs.map(({ key, path, component }, index) => {\n                        return (\n                            <Route\n                                key={key}\n                                exact={true}\n                                path={`${baseRoute}${path}`}\n                                component={component}\n                            />\n                        )\n                    })}\n                    <Redirect to={baseRoute} />\n                </Switch>\n            </Box>\n        </div>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core'\n\nconst ConfirmDialog = ({\n    open,\n    onClose = () => {},\n    onCancel = () => {},\n    onOk = () => {},\n    title,\n    message,\n    cancelText = 'Cancel',\n    okText = 'OK',\n}) => {\n    const handleCancel = useCallback(() => {\n        onClose()\n        onCancel()\n    }, [onClose, onCancel])\n\n    const handleOk = useCallback(() => {\n        onClose()\n        onOk()\n    }, [onClose, onOk])\n\n    return (\n        <Dialog\n            open={open}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {message}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCancel}>{cancelText}</Button>\n                <Button onClick={handleOk} color=\"primary\" variant=\"contained\">\n                    {okText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ConfirmDialog\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box, Button, Typography } from '@material-ui/core'\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: '#efefef',\n    },\n}))\n\nconst Empty = ({\n    isEmpty,\n    emptyText = 'No data',\n    button,\n    hideIfNotEmpty = false,\n}) => {\n    const classes = useStyles()\n\n    const renderButton = () => {\n        if (!button) return null\n        return (\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={button.onClick}\n            >\n                {button.text}\n            </Button>\n        )\n    }\n\n    if (!isEmpty && !hideIfNotEmpty) {\n        return (\n            <Box\n                pr={2}\n                pb={2}\n                pt={2}\n                pl={2}\n                display=\"flex\"\n                flexDirection=\"row\"\n                justifyContent=\"flex-end\"\n            >\n                {renderButton()}\n            </Box>\n        )\n    }\n\n    return (\n        <Box\n            pt={10}\n            pb={10}\n            pl={3}\n            pr={3}\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            className={classes.root}\n        >\n            <InfoTwoToneIcon />\n            <Box mt={2}>\n                <Typography variant=\"body1\">{emptyText}</Typography>\n            </Box>\n            {button && <Box mt={2}>{renderButton()}</Box>}\n        </Box>\n    )\n}\n\nexport default Empty\n","import React, { useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { TextField, MenuItem, Chip, ListItemText } from '@material-ui/core'\nimport { SelectOptions } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}))\n\nconst _Select = React.memo(\n    ({\n        disabled,\n        error,\n        helperText,\n        label,\n        multiple = false,\n        onBlur = () => {},\n        onChange = () => {},\n        options,\n        placeholder,\n        type,\n        value,\n    }) => {\n        const classes = useStyles()\n        const handleChange = useCallback(\n            e => {\n                e.preventDefault()\n                onChange(e.target.value)\n            },\n            [onChange],\n        )\n\n        const items = useMemo(() => {\n            if (Array.isArray(options) && options.length > 0) {\n                return options\n            }\n            switch (type) {\n                case 'country':\n                    return SelectOptions.COUNTRIES\n                case 'countryCode':\n                    return SelectOptions.COUNTRY_CODES\n                case 'nationality':\n                    return SelectOptions.NATIONALITIES\n                case 'dietary-restriction':\n                    return SelectOptions.DIETARY_RESTRICTIONS\n                case 'num-hackathons':\n                    return SelectOptions.NUM_HACKATHONS\n                case 'gender':\n                    return SelectOptions.GENDERS\n                case 'expertise':\n                    return SelectOptions.EXPERTISE\n                case 'industry':\n                    return SelectOptions.INDUSTRIES\n                case 'language':\n                    return SelectOptions.LANGUAGES\n                case 'role':\n                    return SelectOptions.ROLES\n                case 'skill':\n                    return SelectOptions.SKILLS\n                case 'theme':\n                    return SelectOptions.THEMES\n                case 'status':\n                    return SelectOptions.STATUSES\n                case 'day':\n                    return SelectOptions.DAYS\n                case 'month':\n                    return SelectOptions.MONTHS\n                case 'year':\n                    return SelectOptions.YEARS\n                default:\n                    return []\n            }\n        }, [type, options])\n\n        const valueOrDefault = value || (multiple ? [] : '')\n\n        const selectProps = {\n            multiple,\n            onOpen: e => e.preventDefault(),\n        }\n        if (multiple) {\n            selectProps.renderValue = (value = []) => {\n                return (\n                    <div className={classes.chips}>\n                        {value.map(item => (\n                            <Chip\n                                key={item}\n                                label={item}\n                                className={classes.chip}\n                            />\n                        ))}\n                    </div>\n                )\n            }\n        }\n\n        return (\n            <TextField\n                disabled={disabled}\n                error={error}\n                fullWidth\n                helperText={error || helperText}\n                label={label}\n                onBlur={onBlur}\n                onChange={handleChange}\n                placeholder={placeholder}\n                select\n                SelectProps={selectProps}\n                value={valueOrDefault}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value + item.label} value={item.value}>\n                        <ListItemText\n                            primary={item.label}\n                            secondary={item.helper}\n                        />\n                    </MenuItem>\n                ))}\n            </TextField>\n        )\n    },\n)\n\nexport default _Select\n","import React, { useCallback } from 'react'\n\nimport { Box, Button, ButtonGroup } from '@material-ui/core'\n\nexport default ({ gotoPage, pageSize, setPageSize }) => {\n    const opts = [\n        [10, 10],\n        [25, 25],\n        [50, 50],\n        [100, 100],\n        ['All', 100000],\n    ]\n\n    const _setPageSize = useCallback(\n        size => {\n            setPageSize(size)\n            gotoPage(0)\n        },\n        [setPageSize, gotoPage],\n    )\n\n    return (\n        <Box p={1}>\n            <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n                {opts.map(([label, value]) => (\n                    <Button\n                        onClick={_setPageSize.bind(null, value)}\n                        color={pageSize === value ? 'primary' : undefined}\n                        key={value}\n                    >\n                        {label}\n                    </Button>\n                ))}\n            </ButtonGroup>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport { Box, Typography, IconButton } from '@material-ui/core'\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext'\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore'\n\nexport default ({\n    pageIndex,\n    pageCount,\n    canPreviousPage,\n    previousPage,\n    canNextPage,\n    nextPage,\n    pageSize,\n}) => {\n    return (\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n            <IconButton disabled={!canPreviousPage} onClick={previousPage}>\n                <NavigateBeforeIcon />\n            </IconButton>\n            <Box p={1}>\n                <Typography variant=\"subtitle2\">\n                    Page {pageIndex + 1} of {pageCount}\n                </Typography>\n            </Box>\n            <IconButton disabled={!canNextPage} onClick={nextPage}>\n                <NavigateNextIcon />\n            </IconButton>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box } from '@material-ui/core'\n\nimport PageSizeSelect from './PageSizeSelect'\nimport PageSelect from './PageSelect'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            flexWrap: 'wrap',\n        },\n    },\n}))\n\nconst Pagination = props => {\n    const classes = useStyles()\n    const {\n        canPreviousPage,\n        canNextPage,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        pageSize,\n        pageIndex,\n    } = props\n\n    return (\n        <Box className={classes.wrapper}>\n            <PageSizeSelect\n                gotoPage={gotoPage}\n                pageSize={pageSize}\n                setPageSize={setPageSize}\n            />\n            <PageSelect\n                pageSize={pageSize}\n                pageIndex={pageIndex}\n                pageCount={pageCount}\n                canPreviousPage={canPreviousPage}\n                previousPage={previousPage}\n                canNextPage={canNextPage}\n                nextPage={nextPage}\n            />\n        </Box>\n    )\n}\n\nexport default Pagination\n","import React, { useMemo } from 'react'\n\nimport { Box, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { motion } from 'framer-motion'\nimport { CSVLink } from 'react-csv'\n\nconst useStyles = makeStyles(theme => ({\n    selectionActions: {\n        height: 0,\n        background: theme.palette.primary.main,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n    },\n    selectionTitle: {\n        color: 'white',\n        fontWeight: 'bold',\n    },\n}))\n\nconst ActionBar = ({ selected, actions = [], enableExport, flatHeaders }) => {\n    const classes = useStyles()\n    const selectionActive = selected.length > 0\n\n    const _actions = useMemo(() => {\n        let base = [...actions]\n        if (enableExport) {\n            base = base.concat({\n                key: 'export',\n                label: (\n                    <CSVLink\n                        style={{ textDecoration: 'none', color: 'inherit' }}\n                        data={selected.map(item => item.values)}\n                        filename=\"export.csv\"\n                        headers={flatHeaders\n                            .map(header => {\n                                if (typeof header.Header === 'string') {\n                                    return {\n                                        label: header.Header,\n                                        key: header.id,\n                                    }\n                                }\n                                // Not a proper header, filter it out\n                                return false\n                            })\n                            .filter(item => item)}\n                    >\n                        Export selected\n                    </CSVLink>\n                ),\n                action: () => {},\n            })\n        }\n        return base\n    }, [actions, enableExport, flatHeaders, selected])\n\n    return (\n        <motion.div\n            className={classes.selectionActions}\n            variants={{\n                visible: {\n                    height: 'auto',\n                },\n                hidden: {\n                    height: 0,\n                },\n            }}\n            animate={selectionActive ? 'visible' : 'hidden'}\n        >\n            <Box\n                p={1}\n                pt={0}\n                display=\"flex\"\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                flexWrap=\"wrap\"\n            >\n                <Box width=\"100%\" mt={1}>\n                    <Typography\n                        variant=\"subtitle2\"\n                        className={classes.selectionTitle}\n                    >\n                        {selected.length} selected\n                    </Typography>\n                </Box>\n                <>\n                    {_actions.map(action => (\n                        <Box key={action.key} mr={1} mt={1}>\n                            <Button\n                                onClick={action.action.bind(null, selected)}\n                                size=\"small\"\n                                variant=\"outlined\"\n                            >\n                                {action.label}\n                            </Button>\n                        </Box>\n                    ))}\n                </>\n            </Box>\n        </motion.div>\n    )\n}\n\nexport default ActionBar\n","import * as FilterTypes from './filterTypes'\n\nexport default {\n    [FilterTypes.SINGLE_SELECT]: (rows, id, filterValue) => {\n        if (!filterValue) return rows\n        return rows.filter(row => row.values[id] === filterValue)\n    },\n    [FilterTypes.MULTIPLE_SELECT]: (rows, id, filterValue) => {\n        if (!Array.isArray(filterValue) || filterValue.length === 0) return rows\n        return rows.filter(row => filterValue.indexOf(row.values[id]) !== -1)\n    },\n    [FilterTypes.CONTAINS_SEARCH]: (rows, id, filterValue) => {\n        return rows.filter(row => row.values[id]?.indexOf(filterValue) !== -1)\n    },\n    [FilterTypes.EXACT_SEARCH]: (rows, id, filterValue) => {\n        return rows.filter(row => row.values[id] === filterValue)\n    },\n}\n","import React, { useCallback, useMemo } from 'react'\nimport {\n    useTable,\n    usePagination,\n    useSortBy,\n    useFilters,\n    useRowSelect,\n    useExpanded,\n} from 'react-table'\n\nimport { makeStyles, darken } from '@material-ui/core/styles'\nimport {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TableSortLabel,\n    Checkbox,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport Empty from 'components/generic/Empty'\n\nimport Pagination from './Pagination'\nimport ActionBar from './ActionBar'\nimport FilterFunctions from './filterFunctions'\nimport { Filters, Sorters } from './index'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        width: '100%',\n        overflowX: 'scroll',\n        position: 'relative',\n    },\n    table: {\n        background: theme.palette.background.paper,\n    },\n    tableRow: ({ onRowClick, renderExpanded }) => {\n        const baseStyles = {}\n        const clickableStyles = {\n            cursor: 'pointer',\n            '&:hover': {\n                background: 'rgba(0,0,0,0.05)',\n                transition: 'all 0.2s ease',\n            },\n        }\n        if (\n            typeof onRowClick === 'function' ||\n            typeof renderExpanded === 'function'\n        ) {\n            return {\n                ...baseStyles,\n                ...clickableStyles,\n            }\n        } else {\n            return baseStyles\n        }\n    },\n    tableHead: {\n        background: darken(theme.palette.primary.main, 0.3),\n    },\n    tableHeadRow: {},\n    tableHeadCell: {\n        color: 'white !important',\n        fontWeight: 'bold',\n        fontSize: '12px',\n        lineHeight: '14px',\n        whiteSpace: 'nowrap',\n        transition: 'color 0.2s ease',\n    },\n    tableHeadCellActive: {\n        color: `white !important`,\n    },\n    tableHeadSortIcon: {\n        color: `white !important`,\n    },\n    tableCell: {},\n    tableFooter: {},\n    expandedRow: {\n        background: 'rgba(0,0,0,0.10)',\n    },\n}))\n\nconst _Table = ({\n    columns,\n    data,\n    onRowClick,\n    bulkActions,\n    enablePagination,\n    enableSelection,\n    enableExport,\n    renderExpanded,\n}) => {\n    const classes = useStyles({ onRowClick })\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            ...Filters.Disabled,\n            ...Sorters.Disabled,\n        }),\n        [],\n    )\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        selectedFlatRows,\n        flatHeaders,\n        state: { pageSize, pageIndex },\n    } = useTable(\n        {\n            columns,\n            data,\n            filterTypes: FilterFunctions,\n            defaultColumn,\n            defaultCanFilter: true,\n            initialState: {\n                pageIndex: 0,\n                pageSize: enablePagination ? 10 : 100000,\n            },\n        },\n        useFilters,\n        useSortBy,\n        useExpanded,\n        usePagination,\n        useRowSelect,\n        hooks => {\n            if (enableSelection) {\n                hooks.columns.push(columns => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <div>\n                                <Checkbox\n                                    color=\"primary\"\n                                    {...getToggleAllRowsSelectedProps()}\n                                />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div onClick={e => e.stopPropagation()}>\n                                <Checkbox\n                                    color=\"primary\"\n                                    {...row.getToggleRowSelectedProps()}\n                                />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ])\n            }\n        },\n    )\n\n    const handleRowClick = useCallback(\n        row => {\n            if (typeof renderExpanded === 'function') {\n                row.toggleRowExpanded(!row.isExpanded)\n            }\n\n            if (typeof onRowClick === 'function') {\n                onRowClick(row)\n            }\n        },\n        [onRowClick, renderExpanded],\n    )\n\n    const pagination = enablePagination && data.length > 10 && (\n        <Pagination\n            canPreviousPage={canPreviousPage}\n            canNextPage={canNextPage}\n            pageCount={pageCount}\n            gotoPage={gotoPage}\n            nextPage={nextPage}\n            previousPage={previousPage}\n            setPageSize={setPageSize}\n            pageOptions={pageOptions}\n            pageSize={pageSize}\n            pageIndex={pageIndex}\n            items={data.length}\n        />\n    )\n\n    const isEmpty = !data || data.length === 0\n\n    const columnCount = useMemo(() => {\n        let result = columns.length\n        if (enableSelection) {\n            result += 1\n        }\n\n        return result\n    }, [columns.length, enableSelection])\n\n    if (isEmpty) {\n        return <Empty isEmpty />\n    } else {\n        return (\n            <>\n                {pagination}\n                {enableSelection && (\n                    <ActionBar\n                        selected={selectedFlatRows}\n                        actions={bulkActions}\n                        enableExport={enableExport}\n                        flatHeaders={flatHeaders}\n                    />\n                )}\n                <Box className={classes.wrapper}>\n                    <Table {...getTableProps()} className={classes.table}>\n                        <TableHead className={classes.tableHead}>\n                            {headerGroups.map(headerGroup => (\n                                <TableRow\n                                    {...headerGroup.getHeaderGroupProps()}\n                                    className={classes.tableHeadRow}\n                                >\n                                    {headerGroup.headers.map(column => (\n                                        <TableCell\n                                            {...column.getHeaderProps(\n                                                column.getSortByToggleProps(),\n                                            )}\n                                        >\n                                            <TableSortLabel\n                                                active={\n                                                    column.canSort &&\n                                                    column.isSorted\n                                                }\n                                                direction={\n                                                    column.isSortedDesc\n                                                        ? 'desc'\n                                                        : 'asc'\n                                                }\n                                                classes={{\n                                                    root: classes.tableHeadCell,\n                                                    active: classes.tableHeadCellActive,\n                                                    icon: classes.tableHeadSortIcon,\n                                                }}\n                                                IconComponent={ExpandMoreIcon}\n                                                hideSortIcon\n                                            >\n                                                <Typography variant=\"overline\">\n                                                    {column.render('Header')}\n                                                </Typography>\n                                            </TableSortLabel>\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableHead>\n                        <TableBody {...getTableBodyProps()}>\n                            {page.map((row, i) => {\n                                prepareRow(row)\n                                return [\n                                    <TableRow\n                                        {...row.getRowProps()}\n                                        className={classes.tableRow}\n                                        onClick={handleRowClick.bind(null, row)}\n                                    >\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <TableCell\n                                                    {...cell.getCellProps()}\n                                                    onClick={e => {\n                                                        if (\n                                                            cell.column.id ===\n                                                            'selection'\n                                                        ) {\n                                                            e.stopPropagation()\n                                                        }\n                                                    }}\n                                                >\n                                                    {cell.render('Cell')}\n                                                </TableCell>\n                                            )\n                                        })}\n                                    </TableRow>,\n                                    row.isExpanded && (\n                                        <TableRow\n                                            className={classes.expandedRow}\n                                            key={\n                                                row.getRowProps()?.key +\n                                                '_expanded'\n                                            }\n                                        >\n                                            <TableCell colSpan={columnCount}>\n                                                {renderExpanded(row)}\n                                            </TableCell>\n                                        </TableRow>\n                                    ),\n                                ]\n                            })}\n                        </TableBody>\n                    </Table>\n                </Box>\n                {pagination}\n            </>\n        )\n    }\n}\n\n_Table.defaultProps = {\n    data: [],\n    columns: [],\n    onRowClick: () => {},\n    bulkActions: [],\n    enableExport: true,\n    enablePagination: true,\n    enableSelection: true,\n}\n\nexport default _Table\n","import { memoize } from 'lodash-es'\n\nconst getValues = (rowA, rowB, key, defaultValue) => {\n    return [\n        rowA?.values?.[key] ?? defaultValue,\n        rowB?.values?.[key] ?? defaultValue,\n    ]\n}\n\nexport const Numeric = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, 0)\n    return a - b\n}\n\nexport const Alphabetic = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, '')\n    return memoize((a, b) => {\n        return a.localeCompare(b)\n    })(a, b)\n}\n\nexport const DateTime = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, 0)\n    return memoize((a, b) => {\n        return new Date(a) - new Date(b)\n    })(a, b)\n}\n\nexport const ArrayLength = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, [])\n    return memoize((a, b) => {\n        return a.length - b.length\n    })(a, b)\n}\n","import React, { useCallback, useMemo } from 'react'\nimport { groupBy } from 'lodash-es'\nimport { TextField } from '@material-ui/core'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst Component = ({ column }) => {\n    const { filterValue, preFilteredRows, setFilter, id } = column\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    const options = useMemo(() => {\n        const grouped = groupBy(preFilteredRows, row => row.values[id])\n        return Object.keys(grouped).map(value => ({\n            value,\n            label: `${value} (${grouped[value].length})`,\n        }))\n    }, [preFilteredRows, id])\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            select\n            helperText={'Choose one'}\n            value={filterValue}\n            onChange={handleChange}\n            margin=\"dense\"\n            SelectProps={{\n                native: true,\n            }}\n            variant=\"filled\"\n        >\n            {options.map(({ value, label }) => (\n                <option key={value} value={value}>\n                    {label}\n                </option>\n            ))}\n        </TextField>\n    )\n}\n\nconst SingleSelectFilter = {\n    Filter: Component,\n    filter: FilterTypes.SINGLE_SELECT,\n}\n\nexport default SingleSelectFilter\n","export const CONTAINS_SEARCH = 'contains-search'\nexport const FUZZY_SEARCH = 'fuzzy-search'\nexport const EXACT_SEARCH = 'exact-search'\nexport const SINGLE_SELECT = 'single-select'\nexport const MULTIPLE_SELECT = 'multiple-select'\n","import React, { useCallback, useMemo } from 'react'\nimport { groupBy } from 'lodash-es'\nimport { TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst useStyles = makeStyles(theme => ({\n    option: {\n        padding: theme.spacing(1),\n    },\n    optionSelected: {\n        padding: theme.spacing(1),\n        background: theme.palette.theme_lightgray.main,\n    },\n}))\n\nconst Component = ({ column }) => {\n    const classes = useStyles()\n    const { filterValue, preFilteredRows, setFilter, id } = column\n    const selectedValues = filterValue || []\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    const options = useMemo(() => {\n        const grouped = groupBy(preFilteredRows, row => row.values[id])\n        return Object.keys(grouped).map(value => ({\n            value,\n            label: `${value} (${grouped[value].length})`,\n        }))\n    }, [preFilteredRows, id])\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            select\n            helperText={'Choose one or more'}\n            value={selectedValues}\n            onChange={handleChange}\n            SelectProps={{\n                multiple: true,\n            }}\n            variant=\"filled\"\n        >\n            {options.map(({ value, label }) => (\n                <option\n                    className={\n                        selectedValues.indexOf(value) !== -1\n                            ? classes.optionSelected\n                            : classes.option\n                    }\n                    key={value}\n                    value={value}\n                >\n                    {label}\n                </option>\n            ))}\n        </TextField>\n    )\n}\n\nconst MultipleSelectFilter = {\n    Filter: Component,\n    filter: FilterTypes.MULTIPLE_SELECT,\n}\n\nexport default MultipleSelectFilter\n","import Table from './Table'\nimport * as SortFunctions from './sortFunctions'\nimport SingleSelectFilter from './filters/SingleSelectFilter'\nimport MultipleSelectFilter from './filters/MultipleSelectFilter'\nimport ContainsSearchFilter from './filters/ContainsSearch'\n\nconst Filters = {\n    SingleSelect: SingleSelectFilter,\n    MultipleSelect: MultipleSelectFilter,\n    ContainsSearch: ContainsSearchFilter,\n    Disabled: {\n        Filter: () => null,\n        filter: null,\n        canFilter: false,\n    },\n}\n\nconst Sorters = {\n    Numeric: {\n        sortType: SortFunctions.Numeric,\n        disableSortBy: false,\n    },\n    Alphabetic: {\n        sortType: SortFunctions.Alphabetic,\n        disableSortBy: false,\n    },\n    DateTime: {\n        sortType: SortFunctions.DateTime,\n        disableSortBy: false,\n    },\n    ArrayLength: {\n        sortType: SortFunctions.ArrayLength,\n        disableSortBy: false,\n    },\n    Disabled: {\n        disableSortBy: true,\n    },\n    Default: {\n        disableSortBy: false,\n    },\n}\n\nexport { Table, Filters, Sorters }\n","import React, { useCallback } from 'react'\nimport { TextField } from '@material-ui/core'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst Component = ({ column }) => {\n    const { filterValue, setFilter } = column\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            helperText={'Contains value'}\n            value={filterValue}\n            onChange={handleChange}\n            margin=\"dense\"\n            variant=\"filled\"\n        />\n    )\n}\n\nconst ContainsSearchFilter = {\n    Filter: Component,\n    filter: FilterTypes.CONTAINS_SEARCH,\n}\n\nexport default ContainsSearchFilter\n","import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { makeStyles, lighten } from '@material-ui/core/styles'\nimport { Chip } from '@material-ui/core'\n\nimport { RegistrationStatuses } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ color }) => ({\n        backgroundColor: lighten(color, 0.33),\n        borderColor: color,\n        borderWidth: 2,\n    }),\n    label: ({ color }) => ({\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    }),\n}))\n\nconst propTypes = {\n    status: PropTypes.oneOf(RegistrationStatuses.ids).isRequired,\n    hideSoftStatuses: PropTypes.bool,\n}\n\nconst defaultProps = {\n    hideSoftStatuses: false,\n}\n\nconst StatusBadge = ({ status, hideSoftStatuses }) => {\n    const params = useMemo(() => {\n        if (hideSoftStatuses) {\n            switch (status) {\n                case RegistrationStatuses.asObject.softAccepted.id:\n                case RegistrationStatuses.asObject.softRejected.id:\n                    return RegistrationStatuses.asObject.pending\n                default:\n                    break\n            }\n        }\n        return RegistrationStatuses.asObject[status]\n    }, [hideSoftStatuses, status])\n    const classes = useStyles(params)\n    if (!params) return <Chip size=\"small\" label=\"???\" />\n    return (\n        <Chip\n            classes={classes}\n            variant=\"outlined\"\n            size=\"small\"\n            label={params.label}\n        />\n    )\n}\n\nStatusBadge.propTypes = propTypes\nStatusBadge.defaultProps = defaultProps\n\nexport default StatusBadge\n","import React from 'react'\n\nimport Select from 'components/inputs/Select'\n\nconst EventTagsSelect = ({\n    value,\n    onChange,\n    tags = [],\n    placeholder = 'Select tags',\n}) => {\n    return (\n        <Select\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            isMulti\n            options={tags.map(tag => ({\n                value: tag.label,\n                label: tag.label,\n            }))}\n        />\n    )\n}\n\nexport default EventTagsSelect\n","import React from 'react'\nimport {\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    Avatar,\n} from '@material-ui/core'\n\nconst UserListItem = ({\n    user,\n    selectable = false,\n    selected = false,\n    onSelect = () => {},\n}) => {\n    const userName = user ? `${user.firstName} ${user.lastName}` : ''\n    const userEmail = user ? user.email : ''\n\n    return (\n        <ListItem button={selectable} onClick={onSelect} selected={selected}>\n            {user ? (\n                <>\n                    <ListItemAvatar>\n                        <Avatar alt={userName} src={user ? user.avatar : ''} />\n                    </ListItemAvatar>\n                    <ListItemText primary={userName} secondary={userEmail} />\n                </>\n            ) : (\n                <ListItemText primary=\"No one\" />\n            )}\n        </ListItem>\n    )\n}\n\nexport default UserListItem\n","import React from 'react'\n\nimport { RegistrationStatuses } from '@hackjunction/shared'\nimport Select from 'components/inputs/Select'\n\nconst RegistrationStatusSelect = ({\n    value,\n    onChange,\n    placeholder = 'Select status',\n    selectProps,\n    allowRestricted = false,\n}) => {\n    return (\n        <Select\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            options={RegistrationStatuses.asArray.map(status => ({\n                label: status.label,\n                value: status.id,\n            }))}\n        />\n    )\n}\n\nexport default RegistrationStatusSelect\n","import React, { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Dialog,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Button from 'components/generic/Button'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useFormField } from 'hooks/formHooks'\nimport EmailService from 'services/email'\nimport { useTranslation } from 'react-i18next'\n\nexport default ({ visible, userIds = [], onClose }) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const user = useSelector(UserSelectors.userProfile)\n    const event = useSelector(OrganiserSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n    const headerImage = useFormField('')\n    const { t } = useTranslation()\n    const subject = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return t('Subject_required_')\n        }\n        if (value.length > 50) {\n            return t('Subject_most_chars_')\n        }\n\n        return\n    })\n    const subtitle = useFormField('')\n    const body = useFormField('', value => {\n        if (!body || body.length === 0) {\n            return t('Body_required_')\n        }\n\n        if (body.length > 1000) {\n            return t('Body_most_chars_')\n        }\n\n        return\n    })\n    const messageId = useFormField('')\n    const ctaText = useFormField('')\n    const ctaLink = useFormField(\n        '',\n        useCallback(\n            value => {\n                if (ctaText.value && ctaText.value.length > 0) {\n                    if (!value || value.length === 0) {\n                        return t('Call_to_action_required_')\n                    }\n                    if (value.indexOf('http') !== 0) {\n                        return t('Call_to_action_valid_')\n                    }\n                }\n                return\n            },\n            [ctaText.value, t],\n        ),\n    )\n\n    const fields = [\n        headerImage,\n        subject,\n        subtitle,\n        body,\n        messageId,\n        ctaText,\n        ctaLink,\n    ]\n\n    const params = {\n        subject: subject.value,\n        subtitle: subtitle.value,\n        header_image: headerImage.value,\n        body: body.value,\n        cta_text: ctaText.value,\n        cta_link: ctaLink.value,\n    }\n\n    const validate = useCallback(() => {\n        const errors = fields\n            .map(field => {\n                return field.validate()\n            })\n            .filter(error => typeof error !== 'undefined')\n\n        if (errors.length > 0) {\n            errors.forEach(error => {\n                dispatch(SnackbarActions.error(error))\n            })\n            return false\n        }\n        return true\n    }, [dispatch, fields])\n\n    const handleTestEmail = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        EmailService.sendPreviewEmail(idToken, event.slug, user.email, params)\n            .then(() => {\n                dispatch(\n                    SnackbarActions.success(\n                        t('Test_email_sent_', { user: user.email }),\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n        return null\n    }, [validate, idToken, event.slug, user.email, params, dispatch, t])\n\n    const handleConfirm = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        EmailService.sendBulkEmail(\n            idToken,\n            event.slug,\n            userIds,\n            params,\n            messageId.value,\n        )\n            .then(data => {\n                dispatch(\n                    SnackbarActions.success(t(''), { autoHideDuration: 5000 }),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n                onClose()\n            })\n    }, [\n        validate,\n        idToken,\n        event.slug,\n        userIds,\n        params,\n        messageId.value,\n        dispatch,\n        onClose,\n        t,\n    ])\n\n    if (!userIds.length) return null\n\n    return (\n        <Dialog fullScreen open={visible} onClose={onClose}>\n            <DialogContent>\n                <PageWrapper loading={loading} wrapContent={false}>\n                    <Container center>\n                        <ConfirmDialog\n                            open={confirmModalOpen}\n                            title={t('Sure_')}\n                            message={t('Will_send_to_', {\n                                amount: userIds.length,\n                            })}\n                            onClose={setConfirmModalOpen}\n                            onOk={handleConfirm}\n                        />\n                        <PageHeader\n                            heading=\"Bulk email\"\n                            subheading={\n                                userIds.length + ' selected participants'\n                            }\n                        />\n                        <Typography variant=\"body1\" paragraph>\n                            {t('Send_email_selected_')}\n                        </Typography>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={headerImage.value}\n                                    onChange={headerImage.setValue}\n                                    error={headerImage.error}\n                                    rawOnChange\n                                    label={t('URL_header_')}\n                                    helperText={t('URL_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subject.value}\n                                    onChange={subject.setValue}\n                                    error={subject.error}\n                                    rawOnChange\n                                    label={t('Subject_')}\n                                    helperText={t('Subect_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subtitle.value}\n                                    onChange={subtitle.setValue}\n                                    error={subtitle.error}\n                                    rawOnChange\n                                    label={t('Subtitle_')}\n                                    helperText={t('Subtitle_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextAreaInput\n                                    value={body.value}\n                                    textarea\n                                    onChange={body.setValue}\n                                    rawOnChange\n                                    label={t('Message_body_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={messageId.value}\n                                    onChange={messageId.setValue}\n                                    error={messageId.error}\n                                    rawOnChange\n                                    label={t('Unique_message_id')}\n                                    helperText={t('Enter_unique_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaText.value}\n                                    onChange={ctaText.setValue}\n                                    error={ctaText.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_')}\n                                    helperText={t('Call_to_action_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaLink.value}\n                                    onChange={ctaLink.setValue}\n                                    error={ctaLink.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_link_')}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </PageWrapper>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Box p={1} />\n                <Button onClick={handleTestEmail}>{t('Send_yourself_')}</Button>\n                <Box p={1} />\n                <Button\n                    loading={loading}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={setConfirmModalOpen}\n                >\n                    {t('Send_to_recipients_', { amount: userIds.length })}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport UserListItem from './index'\n\nexport default ({ userId }) => {\n    const organisersMap = useSelector(OrganiserSelectors.organisersMap)\n    return <UserListItem user={organisersMap[userId]} />\n}\n","import React, { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n    Box,\n    Typography,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Dialog,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\nimport Rating from '@material-ui/lab/Rating'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport OrganiserSelectModal from 'components/modals/OrganiserSelectModal'\nimport OrganiserListItem from 'components/generic/UserListItem/OrganiserListItem'\nimport EventTagsSelect from 'components/inputs/EventTagsSelect'\nimport RegistrationStatusSelect from 'components/inputs/RegistrationStatusSelect'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Button from 'components/generic/Button'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useFormField } from 'hooks/formHooks'\nimport { useTranslation } from 'react-i18next'\nexport default ({ visible, userIds = [], onClose }) => {\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const event = useSelector(OrganiserSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [organiserModal, setOrganiserModal] = useState(false)\n    const [confirmDialog, setConfirmDialog] = useState(false)\n    const rating = useFormField(null)\n    const assignedTo = useFormField(null)\n    const tags = useFormField([])\n    const status = useFormField('pending')\n\n    const [expandedIds, setExpandedIds] = useState([])\n\n    const isExpanded = useCallback(\n        panel => {\n            return expandedIds.indexOf(panel) !== -1\n        },\n        [expandedIds],\n    )\n\n    const toggleExpanded = panel => {\n        if (isExpanded(panel)) {\n            setExpandedIds(expandedIds.filter(id => id !== panel))\n        } else {\n            setExpandedIds(expandedIds.concat(panel))\n        }\n    }\n\n    const reset = useCallback(() => {\n        rating.reset()\n        assignedTo.reset()\n        tags.reset()\n        status.reset()\n        setLoading(false)\n        setExpandedIds([])\n    }, [rating, assignedTo, tags, status])\n\n    const handleClose = useCallback(() => {\n        reset()\n        onClose()\n    }, [reset, onClose])\n\n    const getEdits = useCallback(() => {\n        const edits = {}\n        if (isExpanded('rating')) edits.rating = rating.value\n        if (isExpanded('assignedTo')) edits.assignedTo = assignedTo.value\n        if (isExpanded('tags')) edits.tags = tags.value\n        if (isExpanded('status')) edits.status = status.value\n        return edits\n    }, [rating, assignedTo, tags, status, isExpanded])\n\n    const handleSubmit = useCallback(() => {\n        setLoading(true)\n        const edits = getEdits()\n\n        dispatch(\n            OrganiserActions.bulkEditRegistrations(userIds, edits, event.slug),\n        )\n            .then(() => {\n                dispatch(\n                    SnackbarActions.success(\n                        `Edited ${userIds.length} registrations`,\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n                handleClose()\n            })\n    }, [getEdits, dispatch, userIds, event.slug, handleClose, t])\n\n    if (!userIds.length) return null\n    return (\n        <Dialog fullScreen open={visible} onClose={handleClose}>\n            <PageWrapper loading={loading} wrapContent={false}>\n                <DialogContent>\n                    <ConfirmDialog\n                        open={confirmDialog}\n                        title=\"Are you sure?\"\n                        message={`This will apply your configured changes to ${userIds.length} registrations, and you won't be able to revert them. Please make sure you are not making any unintended changes.`}\n                        onClose={() => setConfirmDialog(false)}\n                        onOk={handleSubmit}\n                    />\n                    <Container center>\n                        <PageHeader\n                            heading=\"Bulk edit\"\n                            subheading={\n                                userIds.length + ' selected participants'\n                            }\n                        />\n                        <Typography variant=\"body1\" paragraph>\n                            {t('Edit_selected_registrations_')}\n                            {t('un_expanded_')}\n                            {t('Edit_selected_registration_cont_')}\n                        </Typography>\n                        <ExpansionPanel\n                            expanded={isExpanded('rating')}\n                            onChange={() => toggleExpanded('rating')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Rating_')}\n                                    </Typography>\n                                    {isExpanded('rating') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {rating.value\n                                                ? 'Set rating to ' +\n                                                  rating.value\n                                                : 'Clear rating'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <Rating\n                                    value={rating.value}\n                                    onChange={(e, num) => rating.setValue(num)}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('assignedTo')}\n                            onChange={() => toggleExpanded('assignedTo')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Assigned to')}\n                                    </Typography>\n                                    {isExpanded('assignedTo') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {assignedTo.value\n                                                ? 'Change assigned to'\n                                                : 'Clear assigned to'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <OrganiserSelectModal\n                                    open={organiserModal}\n                                    onClose={setOrganiserModal}\n                                    onSelect={value =>\n                                        assignedTo.setValue(value.userId)\n                                    }\n                                    onClear={assignedTo.setValue}\n                                />\n                                <Box display=\"flex\" flexDirection=\"column\">\n                                    <Box mb={1} width=\"100%\">\n                                        <OrganiserListItem\n                                            userId={\n                                                assignedTo\n                                                    ? assignedTo.value\n                                                    : null\n                                            }\n                                        />\n                                    </Box>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => setOrganiserModal(true)}\n                                    >\n                                        {t('Change_')}\n                                    </Button>\n                                </Box>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('tags')}\n                            onChange={() => toggleExpanded('tags')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Tags_')}\n                                    </Typography>\n                                    {isExpanded('tags') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {tags.value && tags.value.length\n                                                ? 'Set tags to ' +\n                                                  tags.value.join(', ')\n                                                : 'Clear tags'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <EventTagsSelect\n                                    value={tags.value}\n                                    onChange={tags.setValue}\n                                    tags={event.tags}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('status')}\n                            onChange={() => toggleExpanded('status')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Status_')}\n                                    </Typography>\n                                    {isExpanded('status') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {t('Set_status_', {\n                                                value: status.value,\n                                            })}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <RegistrationStatusSelect\n                                    value={status.value}\n                                    onChange={status.setValue}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    </Container>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button\n                        onClick={() => setConfirmDialog(true)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={expandedIds.length === 0}\n                    >\n                        {expandedIds.length === 0\n                            ? 'Expand panels to make edits'\n                            : ` Apply edits to ${userIds.length} registrations`}\n                    </Button>\n                </DialogActions>\n            </PageWrapper>\n        </Dialog>\n    )\n}\n","import React from 'react'\n\nimport HyperModal from 'react-hyper-modal'\nimport clsx from 'clsx'\nimport { Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        zIndex: 2000,\n    },\n    wrapperPadded: {\n        padding: theme.spacing(2),\n    },\n    content: {\n        background: '#ffffff',\n        width: '100% !important',\n        maxWidth: '600px',\n        zIndex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'stretch',\n    },\n    contentMed: {\n        maxWidth: '900px',\n    },\n    contentMax: {\n        maxWidth: 'none',\n        height: '100% !important',\n        borderRadius: '0 !important',\n    },\n    header: {\n        padding: theme.spacing(3),\n        textAlign: 'center',\n    },\n    inner: {\n        padding: '1rem',\n        flex: 1,\n        overflow: 'auto',\n    },\n}))\n\nconst GenericModal = ({\n    title,\n    isOpen,\n    handleClose,\n    size,\n    children,\n    footer = null,\n}) => {\n    const classes = useStyles()\n    return (\n        <HyperModal\n            isOpen={isOpen}\n            requestClose={handleClose}\n            classes={{\n                contentClassName: clsx({\n                    [classes.content]: true,\n                    [classes.contentMed]: size === 'med',\n                    [classes.contentMax]: size === 'max',\n                }),\n                wrapperClassName: clsx({\n                    [classes.wrapper]: true,\n                    [classes.wrapperPadded]: size !== 'max',\n                }),\n            }}\n        >\n            {title && (\n                <Box className={classes.header}>\n                    <Typography variant=\"h6\">{title}</Typography>\n                </Box>\n            )}\n            <Box className={classes.inner}>{children}</Box>\n            {footer}\n        </HyperModal>\n    )\n}\n\nexport default GenericModal\n","import React, { useState, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Box, List, Button } from '@material-ui/core'\n\nimport Modal from 'components/generic/Modal'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport { useTranslation } from 'react-i18next'\nimport UserListItem from 'components/generic/UserListItem'\n\nexport default ({ open, onClose, onClear, onSelect }) => {\n    const organisers = useSelector(OrganiserSelectors.organisers)\n    const [selected, setSelected] = useState()\n    const { t } = useTranslation()\n    const handleClear = useCallback(() => {\n        onClose()\n        onClear()\n    }, [onClose, onClear])\n    const handleSubmit = useCallback(() => {\n        onClose()\n        onSelect(selected)\n    }, [selected, onClose, onSelect])\n    return (\n        <Modal\n            isOpen={open}\n            handleClose={onClose}\n            title=\"Select a user\"\n            footer={\n                <Box\n                    p={1}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                >\n                    <Button fullWidth onClick={handleClear}>\n                        {t('Clear_selection_')}\n                    </Button>\n                    <Box mt={1} />\n                    <Button\n                        onClick={handleSubmit}\n                        disabled={!selected}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        {selected\n                            ? `${selected.firstName} ${selected.lastName}`\n                            : 'Select a user'}\n                    </Button>\n                </Box>\n            }\n        >\n            <List>\n                {organisers.map(organiser => (\n                    <UserListItem\n                        selectable\n                        onSelect={() => setSelected(organiser)}\n                        selected={\n                            selected && selected.userId === organiser.userId\n                        }\n                        key={organiser.userId}\n                        user={organiser}\n                    />\n                ))}\n            </List>\n        </Modal>\n    )\n}\n","import Typography from '@material-ui/core/Typography'\nimport Scoring from 'pages/_dashboard/slug/rating/Scoring'\nimport React from 'react'\nimport LoadingSpinner from './loadingCircle'\n\nconst RenderContent = ({\n    projectsByRating,\n    setSelected,\n    user,\n    scores,\n    event,\n    ranked,\n}) => {\n    if (!projectsByRating) return <LoadingSpinner />\n    if (projectsByRating.length === 0)\n        return ranked ? (\n            <div>\n                The reviewing process is currently underway. Upon its\n                conclusion, the list of winners will be showcased on this page.\n            </div>\n        ) : (\n            <div>\n                At present, no projects have been submitted. Please revisit at a\n                later time to assess and rate your preferred projects.\n            </div>\n        )\n    return (\n        <div>\n            {projectsByRating.map((project, index) => {\n                return (\n                    <div\n                        onClick={() => {\n                            setSelected(project)\n                        }}\n                        className=\"lg:flex hover:cursor-pointer items-center justify-between bg-[#A9EFF2] text-gray-800 w-full mb-4 p-4 rounded-lg \"\n                    >\n                        <div className=\"flex flex-col mb-2 lg:mb-0 justify-center items-center lg:flex-row\">\n                            {ranked && (\n                                <div className=\"mr-8 text-xl font-bold\">\n                                    {index + 1 + ')'}\n                                </div>\n                            )}\n                            <img\n                                src={\n                                    (project.images[0] &&\n                                        project.images[0].url) ||\n                                    'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg'\n                                }\n                                alt=\"project\"\n                                className=\"w-full max-w-md lg:w-32 lg:h-32 mr-0 lg:mr-2 object-cover rounded-md\"\n                            />\n                            <div className=\"flex flex-col justify-start mb-2 lg:mb-0\">\n                                <Typography variant=\"body1\">\n                                    <h3 className=\"text-gray-800 text-3xl text-left\">\n                                        {project.name}\n                                    </h3>\n                                </Typography>\n                                <Typography variant=\"body1\">\n                                    <h3 className=\" text-gray-800 text-lg font-bold\">\n                                        {project.punchline}\n                                    </h3>\n                                </Typography>\n                                <Typography variant=\"body1\">\n                                    <h3 className=\" text-gray-800 text-md text-left\">\n                                        {project.description}\n                                    </h3>\n                                </Typography>\n                                {/* <Typography variant=\"body1\">\n                              {project.rating}\n                          </Typography> */}\n                                <Typography variant=\"body1\">\n                                    <div className=\"flex text-left\">\n                                        <div className=\"mr-2\">\n                                            Technologies:\n                                        </div>\n                                        {project.technologies.map(\n                                            (tech, index) => {\n                                                if (\n                                                    index ===\n                                                    project.technologies\n                                                        .length -\n                                                        1\n                                                ) {\n                                                    return (\n                                                        <div className=\"mr-2\">\n                                                            {tech}\n                                                        </div>\n                                                    )\n                                                }\n                                                return (\n                                                    <div className=\"mr-2\">\n                                                        {tech},\n                                                    </div>\n                                                )\n                                            },\n                                        )}\n                                    </div>\n                                </Typography>\n                            </div>\n                        </div>\n                        <Scoring\n                            project={project}\n                            user={user}\n                            scores={scores}\n                            slug={event.slug}\n                            event={event}\n                        />\n                    </div>\n                )\n            })}{' '}\n        </div>\n    )\n}\n\nexport default RenderContent\n","import React, { useMemo, useEffect, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch } from 'react-redux'\nimport { findIndex } from 'lodash-es'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport Container from 'components/generic/Container/index'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport LockIcon from '@material-ui/icons/Lock'\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace'\nimport {\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Hidden,\n    IconButton,\n    Box,\n} from '@material-ui/core'\nimport { push } from 'connected-react-router'\n\nconst SIDEBAR_WIDTH = 300\n\nconst useStyles = makeStyles(theme => ({\n    drawer: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        [theme.breakpoints.up('md')]: {\n            width: SIDEBAR_WIDTH,\n            flexShrink: 0,\n        },\n    },\n    drawerToggle: {\n        padding: '10px',\n        position: 'fixed',\n        top: theme.spacing(1),\n        left: theme.spacing(1),\n        background: '#fbfbfb',\n        zIndex: 100,\n    },\n    drawerToggleDesktop: {\n        padding: '10px',\n        position: 'fixed',\n        top: theme.spacing(1),\n        left: ({ desktopOpen }) =>\n            desktopOpen ? SIDEBAR_WIDTH + theme.spacing(1) : theme.spacing(1),\n        background: '#fbfbfb',\n        zIndex: 100,\n        transition: 'left 225ms cubic-bezier(0, 0, 0.2, 1) 0ms',\n    },\n    content: {\n        flexGrow: 1,\n        position: 'relative',\n        transition: 'margin-left 225ms cubic-bezier(0, 0, 0.2, 1) 0ms',\n        [theme.breakpoints.up('md')]: {\n            marginLeft: ({ desktopOpen }) => (desktopOpen ? SIDEBAR_WIDTH : 0),\n        },\n    },\n    drawerPaper: {\n        width: SIDEBAR_WIDTH,\n        maxWidth: '80%',\n        background: 'black',\n        zIndex: 998,\n    },\n\n    listItem: {\n        color: 'rgba(255,255,255,0.6)',\n    },\n    listItemSelected: {\n        color: 'white',\n    },\n    listItemTextPrimary: {\n        color: 'inherit',\n    },\n    listItemTextSecondary: {\n        color: 'inherit',\n    },\n    listItemIcon: {\n        color: 'inherit',\n    },\n    pageWrapper: {\n        padding: 0,\n        [theme.breakpoints.up('md')]: {\n            padding: theme.spacing(2),\n        },\n    },\n    pageWrapperInner: {\n        padding: theme.spacing(2),\n        maxWidth: '1400px',\n    },\n}))\n\nexport default React.memo(\n    ({\n        topContent,\n        sidebarTopContent,\n        baseRoute,\n        location,\n        routes: _routes,\n    }) => {\n        const dispatch = useDispatch()\n        const routes = _routes.filter(route => !route.hidden)\n\n        const activeIndex = useMemo(() => {\n            const relativePath = location.pathname.replace(baseRoute, '')\n            const idx = findIndex(routes, item => {\n                if (item.exact) {\n                    return relativePath === item.path\n                } else {\n                    return relativePath.indexOf(item.path) !== -1\n                }\n            })\n\n            return idx\n        }, [baseRoute, location.pathname, routes])\n\n        const pushRoute = useCallback(\n            path => {\n                dispatch(push(`${baseRoute}${path}`))\n            },\n            [baseRoute, dispatch],\n        )\n\n        useEffect(() => {\n            if (activeIndex === -1) {\n                pushRoute(routes[0].path)\n            }\n        }, [routes, activeIndex, pushRoute])\n\n        useEffect(() => {\n            setMobileOpen(false)\n        }, [activeIndex])\n\n        const safeIndex = activeIndex === -1 ? 0 : activeIndex\n\n        const [mobileOpen, setMobileOpen] = React.useState(false)\n        const [desktopOpen, setDesktopOpen] = React.useState(true)\n\n        const classes = useStyles({ desktopOpen })\n\n        const handleDrawerToggle = () => {\n            setMobileOpen(!mobileOpen)\n        }\n\n        const handleDrawerToggleDesktop = () => {\n            setDesktopOpen(!desktopOpen)\n        }\n\n        const drawerContent = (\n            <>\n                <Box p={2}>{sidebarTopContent}</Box>\n                <List>\n                    {routes\n                        .filter(route => !route.hidden)\n                        .map((route, index) => {\n                            return (\n                                <ListItem\n                                    disabled={route.locked}\n                                    button\n                                    key={route.path}\n                                    selected={index === safeIndex}\n                                    classes={{\n                                        root: classes.listItem,\n                                        selected: classes.listItemSelected,\n                                    }}\n                                    onClick={() => pushRoute(route.path)}\n                                >\n                                    <ListItemIcon\n                                        className={classes.listItemIcon}\n                                    >\n                                        {route.locked ? (\n                                            <LockIcon />\n                                        ) : (\n                                            route.icon\n                                        )}\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        classes={{\n                                            primary:\n                                                classes.listItemTextPrimary,\n                                            secondary:\n                                                classes.listItemTextSecondary,\n                                        }}\n                                        primary={route.label}\n                                        secondary={\n                                            route.locked\n                                                ? route.lockedDescription\n                                                : ''\n                                        }\n                                    />\n                                </ListItem>\n                            )\n                        })}\n                </List>\n            </>\n        )\n\n        return (\n            <div className={classes.root}>\n                <Hidden mdUp implementation=\"css\">\n                    <IconButton\n                        onClick={handleDrawerToggle}\n                        className={classes.drawerToggle}\n                        aria-label=\"toggle drawer\"\n                    >\n                        <MenuIcon fontSize=\"large\" />\n                    </IconButton>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <IconButton\n                        onClick={handleDrawerToggleDesktop}\n                        className={classes.drawerToggleDesktop}\n                        aria-label=\"toggle drawer desktop\"\n                    >\n                        {desktopOpen ? (\n                            <KeyboardBackspaceIcon />\n                        ) : (\n                            <MenuIcon fontSize=\"large\" />\n                        )}\n                    </IconButton>\n                </Hidden>\n                <Hidden mdUp implementation=\"css\">\n                    <nav className={classes.drawer}>\n                        <Drawer\n                            variant=\"temporary\"\n                            anchor=\"left\"\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            ModalProps={{\n                                keepMounted: true, // Better open performance on mobile.\n                            }}\n                        >\n                            {drawerContent}\n                        </Drawer>\n                    </nav>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <nav className={classes.drawerDesktop}>\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            variant=\"persistent\"\n                            anchor=\"left\"\n                            open={desktopOpen}\n                            onClose={handleDrawerToggleDesktop}\n                        >\n                            {drawerContent}\n                        </Drawer>\n                    </nav>\n                </Hidden>\n                <main className={classes.content}>\n                    {topContent}\n                    <Container\n                        className={classes.pageWrapperInner}\n                        wrapperClass={classes.pageWrapper}\n                    >\n                        <Switch>\n                            {routes.map(\n                                (\n                                    {\n                                        key,\n                                        path,\n                                        hidden,\n                                        component,\n                                        exact = false,\n                                        locked,\n                                    },\n                                    index,\n                                ) => {\n                                    if (hidden || locked) {\n                                        return null\n                                    } else {\n                                        return (\n                                            <Route\n                                                key={key}\n                                                exact={exact}\n                                                path={`${baseRoute}${path}`}\n                                                component={component}\n                                            />\n                                        )\n                                    }\n                                },\n                            )}\n                            <Redirect to={baseRoute} />\n                        </Switch>\n                    </Container>\n                </main>\n            </div>\n        )\n    },\n)\n","import React from 'react'\nimport UserMenu from 'components/UserMenu'\nimport LanguageMenu from 'components/LanguageMenu'\n\nimport { Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        width: '100%',\n        height: '78px',\n        background: 'white',\n        padding: theme.spacing(0, 2),\n    },\n    inner: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        margin: '0',\n        height: '100%',\n    },\n    text: {\n        marginRight: theme.spacing(1),\n        textTransform: 'uppercase',\n        color: 'black',\n        alignSelf: 'flex-end',\n        display: 'none',\n    },\n}))\n\nconst BasicNavBar = ({ text }) => {\n    const classes = useStyles()\n    return (\n        <div className={classes.wrapper}>\n            <div className={classes.inner}>\n                <Typography variant=\"button\" style={{ paddingLeft: '50px' }}>\n                    {text}\n                </Typography>\n                <div className={classes.inner}>\n                    <UserMenu />\n                    {/* <LanguageMenu /> */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BasicNavBar\n","import React, { useCallback, useState } from 'react'\n\nimport {\n    Box,\n    Typography,\n    CircularProgress,\n    IconButton,\n    Tooltip,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Upload } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { useTranslation } from 'react-i18next'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nconst useStyles = makeStyles(theme => ({\n    uploader: {\n        background: 'gray',\n        width: '100%',\n        cursor: 'pointer',\n    },\n    uploaderInner: {\n        width: '100%',\n        height: '100px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: theme.spacing(3),\n    },\n    uploadText: {\n        color: 'white',\n        textAlign: 'center',\n    },\n}))\n\nexport default ({ value, onChange, uploadUrl, resizeMode = 'contain' }) => {\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [loading, setLoading] = useState(false)\n    const classes = useStyles()\n\n    const beforeUpload = useCallback(\n        file => {\n            const isPDF = file.type === 'application/pdf'\n            if (!isPDF) {\n                dispatch(SnackbarActions.show(t('Upload_pdf_')))\n            }\n            const isLt10M = file.size / 1024 / 1024 < 10\n            if (!isLt10M) {\n                dispatch(SnackbarActions.show(t('Upload_size_ten_')))\n            }\n            return isPDF && isLt10M\n        },\n        [dispatch, t],\n    )\n\n    const handleRemove = useCallback(() => {\n        onChange()\n    }, [onChange])\n\n    const handleChange = useCallback(\n        info => {\n            if (info.file.status === 'uploading') {\n                setLoading(true)\n                return\n            }\n            if (info.file.status === 'done') {\n                onChange(info.file.response)\n                setLoading(false)\n            }\n\n            if (info.file.status === 'error') {\n                const message =\n                    info?.file?.response?.message ?? t('Something_went_wrong_')\n                dispatch(SnackbarActions.error(message))\n                setLoading(false)\n            }\n        },\n        [dispatch, onChange, t],\n    )\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n            {value && value.url ? (\n                <Box\n                    flex=\"1\"\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    alignItems=\"flex-start\"\n                >\n                    <Box flex=\"1\">\n                        <a href={value.url}>{value.url}</a>\n                    </Box>\n                    <Box ml={2}>\n                        <Tooltip title=\"Remove\">\n                            <IconButton onClick={handleRemove}>\n                                <ClearIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                </Box>\n            ) : (\n                <Upload.Dragger\n                    name=\"pdf\"\n                    listType=\"picture\"\n                    className={classes.uploader}\n                    showUploadList={false}\n                    action={uploadUrl}\n                    headers={{\n                        Authorization: `Bearer ${idToken}`,\n                    }}\n                    beforeUpload={beforeUpload}\n                    onChange={handleChange}\n                >\n                    <Box className={classes.uploaderInner}>\n                        {loading ? (\n                            <CircularProgress />\n                        ) : (\n                            <Typography className={classes.uploadText}>\n                                {t('Click_or_drag_')}\n                            </Typography>\n                        )}\n                    </Box>\n                </Upload.Dragger>\n            )}\n        </Box>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport Select from 'components/inputs/Select'\nimport TextInput from 'components/inputs/TextInput'\n\nconst StreetAddressInput = ({\n    value = {},\n    onChange,\n    onBlur,\n    showVenueName = false,\n}) => {\n    const { country, addressLine, addressLine2, city, postalCode, venueName } =\n        value\n\n    const handleChange = useCallback(\n        (fieldName, fieldValue) => {\n            onChange({\n                ...value,\n                [fieldName]: fieldValue,\n            })\n        },\n        [value, onChange],\n    )\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Select\n                    label=\"Country\"\n                    options=\"country\"\n                    value={country}\n                    onChange={value => handleChange('country', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={9}>\n                <TextInput\n                    label=\"Street address\"\n                    value={addressLine}\n                    onChange={value => handleChange('addressLine', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={3}>\n                <TextInput\n                    label=\"Apartment/Unit/Other\"\n                    value={addressLine2}\n                    onChange={value => handleChange('addressLine2', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={8}>\n                <TextInput\n                    label=\"City\"\n                    value={city}\n                    onChange={value => handleChange('city', value)}\n                />\n            </Grid>\n            <Grid item xs={4}>\n                <TextInput\n                    label=\"Postal code\"\n                    value={postalCode}\n                    onChange={value => handleChange('postalCode', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            {showVenueName && (\n                <Grid item xs={12}>\n                    <TextInput\n                        label=\"Venue name\"\n                        value={venueName}\n                        onChange={value => handleChange('venueName', value)}\n                        onBlur={onBlur}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n\nexport default StreetAddressInput\n","import React from 'react'\nimport { FilterTypes, FilterValues } from '@hackjunction/shared'\n\nimport TextInput from 'components/inputs/TextInput'\nimport Select from 'components/inputs/SelectOld'\n\nconst MULTI_TYPES = [\n    FilterTypes.filterTypes.ONE_OF.id,\n    FilterTypes.filterTypes.NOT_ONE_OF.id,\n    FilterTypes.filterTypes.CONTAINS_ONE_OF.id,\n    FilterTypes.filterTypes.NOT_CONTAINS_ONE_OF.id,\n]\n\nconst FilterValueInput = ({\n    filterType,\n    valueType,\n    value,\n    onChange,\n    event,\n}) => {\n    const inputParams = { value, onChange }\n    switch (filterType) {\n        case FilterTypes.filterTypes.LESS_THAN.id:\n        case FilterTypes.filterTypes.NOT_LESS_THAN.id:\n        case FilterTypes.filterTypes.MORE_THAN.id:\n        case FilterTypes.filterTypes.NOT_MORE_THAN.id:\n            return (\n                <TextInput\n                    label=\"Enter a number\"\n                    helperText=\"If the field is a text field or a list of values, compares the length of the value\"\n                    {...inputParams}\n                />\n            )\n        case FilterTypes.filterTypes.CONTAINS.id:\n        case FilterTypes.filterTypes.NOT_CONTAINS.id:\n        case FilterTypes.filterTypes.EQUALS.id:\n        case FilterTypes.filterTypes.NOT_EQUALS.id:\n        case FilterTypes.filterTypes.ONE_OF.id:\n        case FilterTypes.filterTypes.NOT_ONE_OF.id:\n        case FilterTypes.filterTypes.CONTAINS_ONE_OF.id:\n        case FilterTypes.filterTypes.NOT_CONTAINS_ONE_OF.id:\n            const isMulti = MULTI_TYPES.indexOf(filterType) !== -1\n            switch (valueType) {\n                case FilterValues.STRING:\n                    if (isMulti) {\n                        return (\n                            <TextInput\n                                label=\"Enter values (comma-separated)\"\n                                formatValue={value =>\n                                    Array.isArray(value) ? value.join(',') : ''\n                                }\n                                formatOnChange={value => value.split(',')}\n                                {...inputParams}\n                            />\n                        )\n                    } else {\n                        return (\n                            <TextInput label=\"Enter value\" {...inputParams} />\n                        )\n                    }\n                case FilterValues.BOOLEAN:\n                    return <TextInput label=\"Boolean field\" {...inputParams} />\n                case FilterValues.DATE:\n                    return <TextInput label=\"Date field\" {...inputParams} />\n                case FilterValues.GENDER:\n                    return (\n                        <Select\n                            label=\"Select gender\"\n                            type=\"gender\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.NATIONALITY:\n                    return (\n                        <Select\n                            label=\"Select nationality\"\n                            type=\"nationality\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.COUNTRY:\n                    return (\n                        <Select\n                            label=\"Select country\"\n                            type=\"country\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.LANGUAGE:\n                    return (\n                        <Select\n                            label=\"Select language\"\n                            type=\"language\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.TAG:\n                    const options = event.tags.map(tag => ({\n                        value: tag.label,\n                        label: tag.label,\n                    }))\n                    return (\n                        <Select\n                            label=\"Select tag\"\n                            options={options}\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.STATUS:\n                    return (\n                        <Select\n                            label=\"Select status\"\n                            type=\"status\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.NUMBER:\n                    return (\n                        <TextInput\n                            type=\"number\"\n                            label=\"Enter a number\"\n                            {...inputParams}\n                        />\n                    )\n                default:\n                    return null\n            }\n        case FilterTypes.filterTypes.IS_EMPTY:\n        case FilterTypes.filterTypes.NOT_EMPTY:\n        case FilterTypes.filterTypes.BOOLEAN_FALSE.id:\n        case FilterTypes.filterTypes.BOOLEAN_TRUE.id:\n            return null\n        default:\n            return null\n    }\n}\n\nexport default FilterValueInput\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { RegistrationFields, FilterTypes } from '@hackjunction/shared'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport {\n    Grid,\n    Button,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ExpansionPanelActions,\n    Typography,\n} from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport Select from 'components/inputs/SelectOld'\nimport FilterValueInput from './FilterValueInput'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n    },\n    headingItem: {\n        marginRight: theme.spacing(1),\n    },\n    body: {\n        padding: theme.spacing(3),\n    },\n}))\n\nexport default ({ onSubmit }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n    const [filter, setFilter] = useState()\n    const [filterType, setFilterType] = useState()\n    const [filterValue, setFilterValue] = useState()\n    const { t } = useTranslation()\n    useEffect(() => {\n        setFilterType(undefined)\n    }, [filter])\n\n    useEffect(() => {\n        setFilterValue(undefined)\n    }, [filterType])\n\n    const toggleExpanded = useCallback(() => {\n        setExpanded(!expanded)\n    }, [expanded])\n\n    const handleClear = useCallback(() => {\n        setExpanded(false)\n        setFilter(undefined)\n        setFilterType(undefined)\n        setFilterValue(undefined)\n    }, [])\n\n    const filterParams = useMemo(() => {\n        return filter ? JSON.parse(filter) : null\n    }, [filter])\n\n    const submitValue = useMemo(() => {\n        if (!filterParams) return null\n        if (!filterType) return null\n\n        return {\n            label: filterParams.label,\n            path: filterParams.path,\n            type: filterType,\n            value: filterValue,\n        }\n    }, [filterParams, filterType, filterValue])\n\n    const handleSubmit = useCallback(() => {\n        onSubmit(submitValue)\n        handleClear()\n    }, [submitValue, onSubmit, handleClear])\n\n    const filterOptions = useMemo(() => {\n        return RegistrationFields.filters.map(filter => ({\n            value: JSON.stringify(filter),\n            label: filter.label,\n        }))\n    }, [])\n\n    const filterTypeOptions = useMemo(() => {\n        if (!filterParams) return []\n        const options = FilterTypes.filterTypesForType[filterParams.type]\n        if (!options) return []\n\n        return options.map(option => ({\n            value: option,\n            label: FilterTypes.filterTypes[option].label,\n            helper: FilterTypes.filterTypes[option].helper,\n        }))\n    }, [filterParams])\n\n    return (\n        <ExpansionPanel expanded={expanded} onChange={toggleExpanded}>\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div className={classes.headingItem}>\n                    <Typography color=\"textPrimary\">Add a filter</Typography>\n                </div>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.body}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Select\n                            label={t('Choose_field_')}\n                            placeholder={t('Choose_field_')}\n                            helperText={t('Choose_field_filter_')}\n                            value={filter}\n                            onChange={setFilter}\n                            options={filterOptions}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        {filterTypeOptions.length > 0 && (\n                            <Select\n                                label={t('How_to_filter_')}\n                                value={filterType}\n                                onChange={setFilterType}\n                                helperText={t('Choose_how_to_filter_')}\n                                options={filterTypeOptions}\n                            />\n                        )}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FilterValueInput\n                            filterType={filterType}\n                            valueType={\n                                filterParams ? filterParams.valueType : null\n                            }\n                            value={filterValue}\n                            onChange={setFilterValue}\n                            event={event}\n                        />\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n            <ExpansionPanelActions>\n                <Button onClick={handleClear}>Cancel</Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSubmit}\n                    disabled={!submitValue}\n                >\n                    Add\n                </Button>\n            </ExpansionPanelActions>\n        </ExpansionPanel>\n    )\n}\n","import React from 'react'\n\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Typography,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Chip,\n} from '@material-ui/core'\nimport { FilterTypes } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline',\n    },\n    chips: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}))\n\nconst FilterListItem = ({ filter = {}, onRemove }) => {\n    const classes = useStyles()\n    const getType = () => {\n        const params = FilterTypes.filterTypes[filter.type]\n        return params ? params.label : filter.type\n    }\n\n    const renderValue = value => {\n        if (Array.isArray(value)) {\n            return (\n                <div className={classes.chips}>\n                    {value.map(item => (\n                        <Chip\n                            key={item}\n                            label={item}\n                            className={classes.chip}\n                        />\n                    ))}\n                </div>\n            )\n        }\n        return value\n    }\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={filter.label}\n                secondary={\n                    <>\n                        <Typography\n                            variant=\"body2\"\n                            className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {getType()}\n                        </Typography>{' '}\n                        {renderValue(filter.value)}\n                    </>\n                }\n            />\n            {typeof onRemove === 'function' && (\n                <ListItemSecondaryAction>\n                    <IconButton\n                        edge=\"end\"\n                        aria-label=\"delete\"\n                        onClick={onRemove}\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            )}\n        </ListItem>\n    )\n}\n\nexport default FilterListItem\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport {\n    List,\n    Divider,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Typography,\n    Badge,\n} from '@material-ui/core'\nimport FilterListItem from 'components/filters/FilterListItem'\nimport { useTranslation } from 'react-i18next'\n\nconst useStyles = makeStyles(theme => ({\n    headingItem: {\n        marginRight: theme.spacing(1),\n    },\n    badge: {\n        right: -1 * theme.spacing(2),\n        top: theme.spacing(1),\n    },\n    list: {\n        width: '100%',\n    },\n}))\nconst FilterList = ({ activeItemKey, filters = [], onChange = () => {} }) => {\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n    const toggleExpanded = useCallback(() => setExpanded(!expanded), [expanded])\n    const hasFilters = filters.length !== 0\n    const { t } = useTranslation()\n\n    useEffect(() => {\n        setExpanded(false)\n    }, [activeItemKey])\n\n    const handleRemove = useCallback(\n        index => {\n            const newFilters = filters.filter((filter, idx) => {\n                return idx !== index\n            })\n            onChange(newFilters)\n        },\n        [onChange, filters],\n    )\n\n    return (\n        <ExpansionPanel\n            disabled={!hasFilters}\n            expanded={expanded}\n            onChange={toggleExpanded}\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <Badge\n                    color=\"primary\"\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    badgeContent={filters.length}\n                    classes={{ badge: classes.badge }}\n                    showZero={false}\n                >\n                    <Typography color=\"textPrimary\">\n                        {t('Active_filters_')}\n                    </Typography>\n                </Badge>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <List className={classes.list}>\n                    {filters.map((filter, index) => (\n                        <React.Fragment\n                            key={filter.path + filter.type + filter.value}\n                        >\n                            {index !== 0 && <Divider />}\n                            <FilterListItem\n                                filter={filter}\n                                onRemove={() => handleRemove(index)}\n                            />\n                        </React.Fragment>\n                    ))}\n                </List>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    )\n}\n\nexport default FilterList\n","import React, { useState, useEffect, useCallback } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ExpansionPanelActions,\n    Typography,\n    Button,\n    Grid,\n    CircularProgress,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport TextInput from 'components/inputs/TextInput'\nimport { useFormField } from 'hooks/formHooks'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nexport default ({ filters, activeItem, reservedLabels, onSave, onDelete }) => {\n    const dispatch = useDispatch()\n    const event = useSelector(OrganiserSelectors.event)\n    const isEdit = !activeItem.isDefault && !activeItem.isAdd\n    const [loading, setLoading] = useState(false)\n    const [expanded, setExpanded] = useState(false)\n    const label = useFormField(isEdit ? activeItem.label : '', value => {\n        if (value.length === 0) {\n            return 'Name is required'\n        }\n\n        if (value.length > 50) {\n            return 'Name must be under 50 characters'\n        }\n\n        if (!isEdit) {\n            if (reservedLabels.indexOf(value) !== -1) {\n                return 'Name is already taken'\n            }\n        }\n\n        return\n    })\n\n    const description = useFormField(\n        isEdit ? activeItem.description : '',\n        value => {\n            if (value.length > 100) {\n                return 'Description must be under 100 characters'\n            }\n\n            return\n        },\n    )\n\n    const toggleExpanded = useCallback(\n        (event, isExpanded) => {\n            setExpanded(isExpanded)\n            label.setValue(isEdit ? activeItem.label : '')\n            description.setValue(isEdit ? activeItem.description : '')\n        },\n        [label, isEdit, activeItem.label, activeItem.description, description],\n    )\n\n    useEffect(() => {\n        setExpanded(false)\n    }, [])\n\n    const handleSubmit = () => {\n        const errs = [label.validate(), description.validate()].filter(\n            err => err !== undefined,\n        )\n        if (errs.length > 0) {\n            return\n        }\n\n        if (isEdit) {\n            handleEdit(label.value, description.value)\n        } else {\n            handleCreate(label.value, description.value)\n        }\n    }\n\n    const handleEdit = useCallback(\n        (label, description) => {\n            setLoading(true)\n            dispatch(\n                OrganiserActions.editFilterGroup(\n                    event.slug,\n                    label,\n                    description,\n                    filters,\n                ),\n            )\n                .then(item => {\n                    dispatch(SnackbarActions.success('Edits saved!'))\n                    toggleExpanded(null, false)\n                    onSave(item)\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, event.slug, filters, onSave, toggleExpanded],\n    )\n\n    const handleCreate = useCallback(\n        (label, description) => {\n            setLoading(true)\n            dispatch(\n                OrganiserActions.createFilterGroup(\n                    event.slug,\n                    label,\n                    description,\n                    filters,\n                ),\n            )\n                .then(item => {\n                    dispatch(SnackbarActions.success('Filter group deleted'))\n                    toggleExpanded(null, false)\n                    onSave(item)\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, event.slug, filters, onSave, toggleExpanded],\n    )\n\n    const handleDelete = useCallback(() => {\n        setLoading(true)\n        dispatch(OrganiserActions.deleteFilterGroup(event.slug, label.value))\n            .then(() => {\n                dispatch(SnackbarActions.success('Filter group deleted'))\n                toggleExpanded(null, false)\n                onDelete()\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error('Something went wrong'))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [dispatch, event.slug, label.value, onDelete, toggleExpanded])\n\n    return (\n        <ExpansionPanel\n            expanded={expanded}\n            onChange={toggleExpanded}\n            disabled={filters.length === 0}\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"save-filters\"\n                id=\"save-filters\"\n            >\n                <Typography>\n                    {isEdit ? 'Edit these filters' : 'Save these filters'}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container spacing={3}>\n                    {!isEdit && (\n                        <Grid item xs={12}>\n                            <Typography>\n                                You can save this filter group for later use.\n                                This allows you to easily view stats for the\n                                group, and do things like bulk edit their\n                                applications or send an email to everyone in the\n                                group.\n                            </Typography>\n                        </Grid>\n                    )}\n                    <Grid item xs={12}>\n                        <TextInput\n                            rawOnChange\n                            disabled={isEdit}\n                            label=\"Name\"\n                            helperText=\"Give a descriptive name to the filter group e.g. participants from Finland\"\n                            {...label}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextInput\n                            rawOnChange\n                            label=\"Description\"\n                            helperText=\"Add a short description, if needed\"\n                            {...description}\n                        />\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n            <ExpansionPanelActions>\n                {loading && <CircularProgress size={24} />}\n                {isEdit && (\n                    <Button\n                        disabled={loading}\n                        color=\"error\"\n                        variant=\"contained\"\n                        onClick={handleDelete}\n                    >\n                        Delete filter group\n                    </Button>\n                )}\n                <Button\n                    disabled={loading}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                >\n                    {isEdit ? 'Save edits' : 'Create new filter group'}\n                </Button>\n            </ExpansionPanelActions>\n        </ExpansionPanel>\n    )\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport { sortBy } from 'lodash-es'\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Paper,\n    Box,\n    Divider,\n} from '@material-ui/core'\n\nimport FilterForm from './FilterForm'\nimport FilterList from './FilterList'\nimport FilterSaveForm from './FilterSaveForm'\nimport { useTranslation } from 'react-i18next'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n}))\n\nexport default ({\n    onChange = () => {},\n    onSelectedChange = () => {},\n    showEdit = true,\n}) => {\n    const filterGroups = useSelector(OrganiserSelectors.filterGroups)\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const [anchorEl, setAnchorEl] = React.useState(null)\n\n    const [selected, setSelected] = useState()\n    const [filters, setFilters] = useState([])\n    // console.log('filters', filters)\n    useEffect(() => {\n        if (selected) {\n            setFilters(selected.filters)\n        } else {\n            setFilters([])\n        }\n    }, [selected])\n\n    useEffect(() => {\n        onSelectedChange(selected)\n    }, [selected, onSelectedChange])\n\n    useEffect(() => {\n        onChange(filters)\n    }, [filters, onChange])\n\n    const handleFilterAdd = useCallback(\n        filter => {\n            setFilters(filters.concat(filter))\n        },\n        [filters],\n    )\n\n    const handleClickListItem = event => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleMenuItemClick = option => {\n        if (option.isDefault) {\n            setSelected()\n        } else {\n            setSelected(option)\n        }\n        setAnchorEl(null)\n    }\n    const handleClose = () => {\n        setAnchorEl(null)\n    }\n\n    const options = useMemo(() => {\n        let items = [\n            {\n                label: t('All_participants_'),\n                description: t('No filters'),\n                filters: [],\n                isDefault: true,\n            },\n        ]\n\n        if (showEdit) {\n            items.push({\n                label: t('New_filters_'),\n                description: t('Apply_filter_'),\n                filters: [],\n                isAdd: true,\n            })\n        }\n\n        items = items.concat(sortBy(filterGroups, 'label'))\n\n        return items\n    }, [filterGroups, showEdit, t])\n\n    const activeItem = selected || options[0]\n    const reservedLabels = options.map(option => option.label)\n\n    return (\n        <Paper className={classes.root}>\n            <List component=\"nav\" aria-label=\"Selected filter group\">\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    aria-label=\"when device is locked\"\n                    onClick={handleClickListItem}\n                >\n                    <ListItemText\n                        primary={activeItem.label}\n                        secondary={activeItem.description}\n                    />\n                </ListItem>\n            </List>\n            <Menu\n                id=\"lock-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {options.map((option, index) => {\n                    let items = []\n                    if (index !== 0) {\n                        items.push(<Divider key={option.label + 'divider'} />)\n                    }\n                    items.push(\n                        <MenuItem\n                            key={option.label}\n                            selected={option.label === activeItem.label}\n                            onClick={() => handleMenuItemClick(option)}\n                        >\n                            <ListItemText\n                                primary={option.label}\n                                secondary={\n                                    option.isAdd || option.isDefault\n                                        ? option.description\n                                        : ''\n                                }\n                            />\n                        </MenuItem>,\n                    )\n                    return items\n                })}\n            </Menu>\n            {showEdit && !activeItem.isDefault && (\n                <Box p={2}>\n                    <FilterForm onSubmit={handleFilterAdd} />\n                    <FilterList\n                        activeItemKey={activeItem ? activeItem.label : null}\n                        filters={filters}\n                        onChange={setFilters}\n                    />\n                    <FilterSaveForm\n                        filters={filters}\n                        activeItem={activeItem}\n                        reservedLabels={reservedLabels}\n                        onSave={setSelected}\n                        onDelete={setSelected}\n                    />\n                </Box>\n            )}\n        </Paper>\n    )\n}\n","import React, { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Grid, Typography, Box } from '@material-ui/core'\nimport { Rating } from '@material-ui/lab'\n\nimport Button from 'components/generic/Button'\nimport EventTagsSelect from 'components/inputs/EventTagsSelect'\nimport OrganiserSelectModal from 'components/modals/OrganiserSelectModal'\nimport RegistrationStatusSelect from 'components/inputs/RegistrationStatusSelect'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport { useTranslation } from 'react-i18next'\nimport { useFormField } from 'hooks/formHooks'\n\nexport default ({ registration, onSubmit, onCancel }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const organisersMap = useSelector(OrganiserSelectors.organisersMap)\n    const [organiserModalOpen, setOrganiserModalOpen] = useState(false)\n    const rating = useFormField(registration.rating)\n    const assignedTo = useFormField(registration.assignedTo)\n    const tags = useFormField(registration.tags)\n    const status = useFormField(registration.status)\n    const travelGrant = useFormField(registration.travelGrant)\n    const { t } = useTranslation()\n    const formFields = [rating, assignedTo, tags, status, travelGrant]\n    const formValues = {\n        rating: rating.value,\n        assignedTo: assignedTo.value,\n        tags: tags.value,\n        status: status.value,\n        travelGrant: travelGrant.value,\n    }\n    const formDirty = formFields.map(field => field.dirty).indexOf(true) !== -1\n\n    const handleSubmit = useCallback(() => {\n        const errors = formFields\n            .map(field => {\n                return field.validate()\n            })\n            .filter(err => typeof err !== 'undefined')\n\n        if (errors.length > 0) {\n            return\n        }\n\n        onSubmit(formValues)\n    }, [formFields, formValues, onSubmit])\n\n    const renderAssignedTo = () => {\n        if (assignedTo.value) {\n            const user = organisersMap[assignedTo.value]\n            return user ? `${user.firstName} ${user.lastName}` : '???'\n        }\n        return 'No one'\n    }\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Box pt={3}>\n                    <Typography variant=\"h5\">{t('Edit_reg_')}</Typography>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Rating_')}</Typography>\n                <Rating\n                    name=\"disabled\"\n                    value={rating.value}\n                    onChange={(e, value) => rating.setValue(value)}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Assigned_to_')}</Typography>\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    alignItems=\"center\"\n                    flexWrap=\"wrap\"\n                >\n                    <Box\n                        pt={0.5}\n                        pb={0.5}\n                        pr={2}\n                        pl={2}\n                        mr={2}\n                        style={{ backgroundColor: 'lightgray' }}\n                    >\n                        <Typography variant=\"subtitle2\">\n                            {renderAssignedTo()}\n                        </Typography>\n                    </Box>\n                    <Button onClick={() => setOrganiserModalOpen(true)}>\n                        {t('Change_')}\n                    </Button>\n                </Box>\n                <OrganiserSelectModal\n                    open={organiserModalOpen}\n                    onClose={() => setOrganiserModalOpen(false)}\n                    onClear={() => assignedTo.setValue()}\n                    onSelect={({ userId }) => assignedTo.setValue(userId)}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Tags_')} </Typography>\n                <EventTagsSelect\n                    value={tags.value}\n                    onChange={v => {\n                        // Null tags causes problems, use empty array instead\n                        if (v === null) {\n                            tags.setValue([])\n                        } else {\n                            tags.setValue(v)\n                        }\n                    }}\n                    tags={event.tags}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Status_')} </Typography>\n                <RegistrationStatusSelect\n                    allowRestricted\n                    value={status.value}\n                    onChange={status.setValue}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <TextInput\n                    label=\"Travel grant amount (EUR)\"\n                    helperText=\"Enter 0 to reject travel grant. If the participant previously had no travel grant value, entering a value will trigger an email notification.\"\n                    type=\"number\"\n                    value={travelGrant.value}\n                    onChange={travelGrant.setValue}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    justifyContent=\"flex-end\"\n                >\n                    <Button onClick={onCancel}>{t('Cancel_')}</Button>\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSubmit}\n                        disabled={!formDirty}\n                    >\n                        {t('Save_changes_')}\n                    </Button>\n                </Box>\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\nimport { withStyles, lighten } from '@material-ui/core/styles'\nimport { Chip } from '@material-ui/core'\n\nexport const Yes = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#00ff00', 0.4),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"Yes\" />)\n\nexport const No = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#ff0000', 0.4),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"No\" />)\n\nexport const NotAvailable = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#ffa500', 0.2),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"N/A\" />)\n","import React from 'react'\n\nimport { isEmpty } from 'lodash-es'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Typography,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n} from '@material-ui/core'\nimport { Skills, Roles, Misc } from '@hackjunction/shared'\nimport { Yes, No, NotAvailable } from 'components/generic/Tag/Variants'\nimport moment from 'moment'\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        fontWeight: 'bold',\n    },\n}))\n\nconst DescriptionItem = ({ title, content, fieldName }) => {\n    const classes = useStyles()\n    const renderBoolean = bool => {\n        if (bool === true) {\n            return <Yes />\n        }\n        if (bool === false) {\n            return <No />\n        }\n        return <NotAvailable />\n    }\n\n    const renderObjectFields = (obj, labelMap = {}, valueMap = {}) => {\n        return (\n            <List>\n                {Object.keys(obj).map(key => (\n                    <ListItem key={key}>\n                        <ListItemText\n                            primaryTypographyProps={{\n                                variant: 'body2',\n                                classes: { root: classes.title },\n                            }}\n                            secondaryTypographyProps={{ variant: 'subtitle1' }}\n                            primary={labelMap[key] || key}\n                            secondary={\n                                valueMap[key]\n                                    ? valueMap[key](obj[key])\n                                    : obj[key] || 'N/A'\n                            }\n                        ></ListItemText>\n                    </ListItem>\n                ))}\n            </List>\n        )\n    }\n\n    const renderContent = (content, fieldName) => {\n        switch (fieldName) {\n            case 'roles':\n                return (\n                    <List>\n                        {content.map(item => (\n                            <ListItem key={item.role}>\n                                <ListItemText\n                                    primary={item.role}\n                                    secondary={Roles.getLabelForExperienceLevel(\n                                        item.years,\n                                    )}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                        classes: { root: classes.title },\n                                    }}\n                                    secondaryTypographyProps={{\n                                        variant: 'subtitle1',\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                )\n            case 'expertise':\n                return (\n                    <List>\n                        {content.map(item => {\n                            const label = Skills.getLabelForSkillLevel(\n                                item.level,\n                            )\n                            return (\n                                <ListItem\n                                    key={item}\n                                    style={{ textAlign: 'center' }}\n                                >\n                                    <ListItemText\n                                        primary={item}\n                                        secondary={label}\n                                        primaryTypographyProps={{\n                                            variant: 'body2',\n                                            classes: {},\n                                        }}\n                                    />\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                )\n            case 'education':\n                return renderObjectFields(content, {\n                    level: 'Level',\n                    university: 'University',\n                    degree: 'Degree',\n                    graduationYear: 'Graduation Year',\n                })\n            case 'teamOptions':\n                return renderObjectFields(\n                    content,\n                    {\n                        applyAsTeam: 'Applying as a team?',\n                        applyAlone: 'Applying also alone?',\n                    },\n                    {\n                        applyAsTeam: renderBoolean,\n                        applyAlone: renderBoolean,\n                    },\n                )\n            case 'dateOfBirth':\n                return moment(content).format('DD.MM.YYYY')\n            case 'numHackathons':\n                return Misc.numHackathonOptions.getLabelForValue(content)\n            case 'portfolio':\n            case 'github':\n            case 'linkedin':\n            case 'curriculumVitae':\n                return (\n                    <a href={content} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {content}\n                    </a>\n                )\n            case 'recruitmentOptions':\n                return renderObjectFields(\n                    content,\n                    {\n                        consent: 'Can share data with partners?',\n                        relocation: 'Willing to relocate?',\n                        status: 'Job-seeking status',\n                    },\n                    {\n                        consent: renderBoolean,\n                        relocation: value =>\n                            Misc.relocationOptions.getLabelForValue(value),\n                        status: value =>\n                            Misc.recruitmentStatuses.getLabelForValue(value),\n                    },\n                )\n            case 'dietaryRestrictions':\n            case 'spokenLanguages':\n                if (!content || !content.length) return 'None'\n                return content.join(', ')\n            case 'themesOfInterest':\n            case 'industriesOfInterest':\n                return (\n                    <List>\n                        {content.map(item => (\n                            <ListItem key={item}>\n                                <ListItemText\n                                    primary={item}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                        classes: { root: classes.title },\n                                    }}\n                                    secondaryTypographyProps={{\n                                        variant: 'subtitle1',\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                )\n            case 'phoneNumber':\n                return `${content.countryCode} ${content.number}`\n            default:\n                if (!content) return <NotAvailable />\n                const contentType = typeof content\n\n                switch (contentType) {\n                    case 'string':\n                        return content\n                    case 'boolean':\n                        return renderBoolean(content)\n                    case 'array':\n                        if (isEmpty(content)) return 'None'\n                        return content.join(', ')\n                    case 'object':\n                        return renderObjectFields(content)\n                    default:\n                        return ''\n                }\n        }\n    }\n\n    return (\n        <Grid item xs={12}>\n            {/* {title ===\n            'What skills or expertise areas can you bring to the team?' ? (\n                ''\n            ) : ( */}\n            <Typography variant=\"body2\" classes={{ root: classes.title }}>\n                {title}\n            </Typography>\n            {/* )} */}\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                {renderContent(content, fieldName)}\n            </Typography>\n        </Grid>\n    )\n}\n\nexport default DescriptionItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RegistrationFields } from '@hackjunction/shared'\nimport { groupBy, sortBy, find } from 'lodash-es'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Typography,\n    Grid,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport DescriptionItem from 'components/generic/DescriptionItem'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nexport default React.memo(({ registration }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const fields = Object.keys(registration.answers)\n    const grouped = groupBy(fields, field =>\n        RegistrationFields.getCategory(field),\n    )\n    const sorted = sortBy(Object.keys(grouped), label =>\n        RegistrationFields.getCategoryOrderByLabel(label),\n    )\n    console.log('registration.answers', registration.answers)\n    const customAnswers = {}\n    if (registration.answers.CustomAnswers) {\n        registration.answers.CustomAnswers.forEach(element => {\n            if (!customAnswers[element.section]) {\n                customAnswers[element.section] = {}\n            }\n            customAnswers[element.section][element.key] = element.value\n        })\n    }\n    const categoryNames = sorted.filter(key => key !== '')\n    return (\n        <>\n            {categoryNames.map(name => (\n                <ExpansionPanel key={name}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls={`${name}-content`}\n                        id={`${name}-header`}\n                    >\n                        <Typography>{name}</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Grid container spacing={3}>\n                            {grouped[name].map(field => {\n                                console.log(\n                                    'registration-field',\n                                    registration.answers[field],\n                                )\n                                let label =\n                                    RegistrationFields.fieldToLabelMap[field]\n                                if (!label) {\n                                    const customField = find(\n                                        event.registrationQuestions,\n                                        f => f.name === field,\n                                    )\n                                    if (customField) {\n                                        label = customField.label\n                                    }\n                                }\n                                return (\n                                    <DescriptionItem\n                                        title={label}\n                                        content={registration.answers[field]}\n                                        fieldName={field}\n                                    />\n                                )\n                            })}\n                        </Grid>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            ))}\n            {console.log(event.customQuestions)}\n            {event.customQuestions.map(section => {\n                return (\n                    <ExpansionPanel key={section.name}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls={`${section.name}-content`}\n                            id={`${section.name}-header`}\n                        >\n                            <Typography>{section.label}</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Grid container spacing={3}>\n                                {section.questions.map(question => {\n                                    return (\n                                        <DescriptionItem\n                                            title={question.label}\n                                            content={\n                                                customAnswers[section.name]\n                                                    ? customAnswers[\n                                                          section.name\n                                                      ][question.name]\n                                                    : null\n                                            }\n                                        />\n                                    )\n                                })}\n                            </Grid>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            })}\n        </>\n    )\n})\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Dialog } from '@material-ui/core'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport RegistrationsService from 'services/registrations'\nimport MiscUtils from 'utils/misc'\n\nimport EditRegistrationActions from './EditRegistrationActions'\nimport EditRegistrationContent from './EditRegistrationContent'\n\nexport default ({\n    registrationId,\n    onClose = () => {},\n    onEdited = () => {},\n}) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const event = useSelector(OrganiserSelectors.event)\n    const teamsMap = useSelector(OrganiserSelectors.teamsMap)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [registration, setRegistration] = useState()\n    const { slug } = event\n\n    useEffect(() => {\n        if (registrationId) {\n            setLoading(true)\n            RegistrationsService.getFullRegistration(\n                idToken,\n                slug,\n                registrationId,\n            )\n                .then(data => {\n                    setRegistration(data)\n                })\n                .catch(err => {\n                    setError(true)\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        }\n    }, [idToken, registrationId, slug])\n\n    const participantName = useMemo(() => {\n        if (!registration) return ''\n        const { firstName, lastName } = registration.answers\n        return `${firstName} ${lastName}`\n    }, [registration])\n\n    const participantSubheading = useMemo(() => {\n        if (!registration) return ''\n        const team = teamsMap[registration.user]\n        const countryText = registration?.answers?.countryOfResidence\n        const teamText = `Team: ${team?.code ?? 'No team'}`\n\n        return [countryText, teamText].filter(value => !!value).join(' // ')\n    }, [registration, teamsMap])\n\n    const handleEdit = useCallback(\n        async data => {\n            setLoading(true)\n            await MiscUtils.sleep(1000)\n            dispatch(\n                OrganiserActions.editRegistration(registrationId, data, slug),\n            )\n                .then(data => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                    onEdited(data)\n                    onClose()\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, registrationId, slug, onEdited, onClose],\n    )\n\n    return (\n        <Dialog open={!!registrationId} onClose={onClose} fullScreen>\n            <PageWrapper loading={loading || !registration} error={error}>\n                <Container center>\n                    <PageHeader\n                        heading={participantName}\n                        subheading={participantSubheading}\n                    />\n                    <EditRegistrationContent registration={registration} />\n                    <EditRegistrationActions\n                        registration={registration}\n                        onSubmit={handleEdit}\n                        onCancel={onClose}\n                    />\n                </Container>\n            </PageWrapper>\n        </Dialog>\n    )\n}\n","module.exports = __webpack_public_path__ + \"static/media/instructions-online.6016a553.md\";","import React, { useCallback, useState, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { RegistrationStatuses } from '@hackjunction/shared'\nimport moment from 'moment-timezone'\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogContentText,\n    CircularProgress,\n    Typography,\n    Box,\n    Grid,\n} from '@material-ui/core'\n\nimport Button from 'components/generic/Button'\nimport GradientBox from 'components/generic/GradientBox'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport config from 'constants/config'\n\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport { useTranslation } from 'react-i18next'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\n// TODO can't read null\nexport default () => {\n    const { t } = useTranslation()\n\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const isRegistrationOpen = useSelector(\n        DashboardSelectors.isRegistrationOpen,\n    )\n\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    let registrationStartTimeAlias = 'registrationStartTime'\n    let registrationEndTimeAlias = 'registrationEndTime'\n    let startTimeAlias = 'startTime'\n    let endTimeAlias = 'endTime'\n\n    if (userProfile.location) {\n        registrationEndTimeAlias = concatAndCapitalize(\n            registrationEndTimeAlias,\n            userProfile.location,\n        )\n        registrationStartTimeAlias = concatAndCapitalize(\n            registrationStartTimeAlias,\n            userProfile.location,\n        )\n        startTimeAlias = concatAndCapitalize(\n            startTimeAlias,\n            userProfile.location,\n        )\n        endTimeAlias = concatAndCapitalize(endTimeAlias, userProfile.location)\n    }\n\n    const [loading, setLoading] = useState(false)\n    const [cancelDialogOpen, setCancelDialogOpen] = useState(false)\n    const { status } = registration\n\n    const handleConfirm = useCallback(() => {\n        setLoading(true)\n        dispatch(DashboardActions.confirmRegistration(event.slug))\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong, please try again',\n                    ),\n                )\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [dispatch, event.slug])\n\n    const handleCancel = useCallback(() => {\n        setLoading(true)\n        dispatch(DashboardActions.cancelRegistration(event.slug))\n            .catch(() => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong while cancelling your participation',\n                    ),\n                )\n            })\n            .finally(() => {\n                setCancelDialogOpen(false)\n                setLoading(false)\n            })\n    }, [dispatch, event.slug])\n\n    const color = useMemo(() => {\n        switch (status) {\n            case RegistrationStatuses.asObject.pending.id:\n            case RegistrationStatuses.asObject.softAccepted.id:\n            case RegistrationStatuses.asObject.softRejected.id: {\n                return 'theme_turquoise'\n            }\n            case RegistrationStatuses.asObject.rejected.id: {\n                return 'error'\n            }\n            case RegistrationStatuses.asObject.accepted.id:\n            case RegistrationStatuses.asObject.acceptedToHub.id:\n            case RegistrationStatuses.asObject.confirmed.id:\n            case RegistrationStatuses.asObject.confirmedToHub.id:\n            case RegistrationStatuses.asObject.checkedIn.id: {\n                return 'theme_turquoise'\n            }\n            case RegistrationStatuses.asObject.cancelled.id: {\n                return 'theme_orange'\n            }\n            default:\n                return null\n        }\n    }, [status])\n\n    const title = useMemo(() => {\n        switch (status) {\n            case RegistrationStatuses.asObject.pending.id:\n            case RegistrationStatuses.asObject.softAccepted.id:\n            case RegistrationStatuses.asObject.softRejected.id: {\n                return 'Pending'\n            }\n            case RegistrationStatuses.asObject.rejected.id: {\n                return 'Rejected'\n            }\n            case RegistrationStatuses.asObject.accepted.id: {\n                return 'Accepted'\n            }\n            case RegistrationStatuses.asObject.acceptedToHub.id: {\n                return 'Accepted to Hub'\n            }\n            case RegistrationStatuses.asObject.cancelled.id: {\n                return 'Cancelled'\n            }\n            case RegistrationStatuses.asObject.confirmed.id: {\n                return 'Confirmed'\n            }\n            case RegistrationStatuses.asObject.confirmedToHub.id: {\n                return 'Confirmed to Hub'\n            }\n            // case RegistrationStatuses.asObject.checkedIn.id: {\n            //     switch (event.eventType) {\n            //         case EventTypes.physical.id:\n            //             return 'Checked in';\n            //         default:\n            //             return 'Completed';\n            //     }\n            // }\n            default:\n                return null\n        }\n    }, [status])\n\n    const body = useMemo(() => {\n        switch (status) {\n            case RegistrationStatuses.asObject.pending.id:\n            case RegistrationStatuses.asObject.softAccepted.id:\n            case RegistrationStatuses.asObject.softRejected.id: {\n                if (isRegistrationOpen) {\n                    return t('Registration_info_open_')\n                } else {\n                    return t('Registration_info_closed_')\n                }\n            }\n            case RegistrationStatuses.asObject.rejected.id: {\n                return t('Registration_info_rejected_')\n            }\n            case RegistrationStatuses.asObject.accepted.id: {\n                return t('Registration_info_accepted_', {\n                    eventName: event.name,\n                })\n            }\n            case RegistrationStatuses.asObject.acceptedToHub.id: {\n                return t('Registration_info_accepted_', {\n                    eventName: event.name,\n                })\n            }\n            case RegistrationStatuses.asObject.cancelled.id: {\n                return t('Registration_info_cancelled_')\n            }\n            case RegistrationStatuses.asObject.confirmed.id: {\n                return t('Registration_info_confirmed_')\n            }\n            case RegistrationStatuses.asObject.confirmedToHub.id: {\n                return t('Registration_info_confirmed_')\n            }\n            case RegistrationStatuses.asObject.checkedIn.id: {\n                return t('Registration_info_checked_in_', {\n                    time: moment(event[startTimeAlias]).format('LLLL'),\n                })\n            }\n            default:\n                return null\n        }\n    }, [status, isRegistrationOpen, t, event.name, event[startTimeAlias]])\n\n    const action = useMemo(() => {\n        if (!event) return null\n        switch (status) {\n            case RegistrationStatuses.asObject.pending.id:\n            case RegistrationStatuses.asObject.softAccepted.id:\n            case RegistrationStatuses.asObject.softRejected.id: {\n                if (isRegistrationOpen) {\n                    return (\n                        <Button\n                            onClick={() =>\n                                dispatch(push(`/events/${event.slug}/register`))\n                            }\n                            color=\"theme_white\"\n                            variant=\"contained\"\n                        >\n                            {t('Edit_registration_')}\n                        </Button>\n                    )\n                }\n                return null\n            }\n            case RegistrationStatuses.asObject.rejected.id:\n            case RegistrationStatuses.asObject.cancelled.id: {\n                return (\n                    <Button\n                        onClick={() =>\n                            window.open(config.CALENDAR_URL, '_blank')\n                        }\n                        color=\"theme_white\"\n                        variant=\"contained\"\n                    >\n                        {config.PLATFORM_OWNER_NAME} event calendar\n                    </Button>\n                )\n            }\n            case RegistrationStatuses.asObject.accepted.id: {\n                return (\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"flex-end\"\n                        flexWrap=\"wrap\"\n                    >\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() => setCancelDialogOpen(true)}\n                                color=\"theme_white\"\n                            >\n                                Can't make it after all?\n                            </Button>\n                        </Box>\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={handleConfirm}\n                                color=\"theme_white\"\n                                variant=\"contained\"\n                            >\n                                Confirm participation\n                            </Button>\n                        </Box>\n                    </Box>\n                )\n            }\n            case RegistrationStatuses.asObject.acceptedToHub.id: {\n                return (\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"flex-end\"\n                        flexWrap=\"wrap\"\n                    >\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() => setCancelDialogOpen(true)}\n                                color=\"theme_white\"\n                            >\n                                Can't make it after all?\n                            </Button>\n                        </Box>\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={handleConfirm}\n                                color=\"theme_white\"\n                                variant=\"contained\"\n                            >\n                                Confirm participation\n                            </Button>\n                        </Box>\n                    </Box>\n                )\n            }\n            case RegistrationStatuses.asObject.confirmed.id: {\n                return (\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"flex-end\"\n                        flexWrap=\"wrap\"\n                    >\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() => setCancelDialogOpen(true)}\n                                color=\"theme_white\"\n                            >\n                                Cancel participation\n                            </Button>\n                        </Box>\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() =>\n                                    dispatch(\n                                        push(\n                                            `/dashboard/${event.slug}/event-id`,\n                                        ),\n                                    )\n                                }\n                                color=\"theme_white\"\n                                variant=\"contained\"\n                            >\n                                Your event ID\n                            </Button>\n                        </Box>\n                    </Box>\n                )\n            }\n            case RegistrationStatuses.asObject.confirmedToHub.id: {\n                return (\n                    <Box\n                        display=\"flex\"\n                        flexDirection=\"row\"\n                        justifyContent=\"flex-end\"\n                        flexWrap=\"wrap\"\n                    >\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() => setCancelDialogOpen(true)}\n                                color=\"theme_white\"\n                            >\n                                Cancel participation\n                            </Button>\n                        </Box>\n                        <Box ml={1} mt={1}>\n                            <Button\n                                onClick={() =>\n                                    dispatch(\n                                        push(\n                                            `/dashboard/${event.slug}/event-id`,\n                                        ),\n                                    )\n                                }\n                                color=\"theme_white\"\n                                variant=\"contained\"\n                            >\n                                Your event ID\n                            </Button>\n                        </Box>\n                    </Box>\n                )\n            }\n            default:\n                return null\n        }\n    }, [event, status, isRegistrationOpen, t, dispatch, handleConfirm])\n\n    if (!title) {\n        return null\n    }\n\n    return (\n        <Grid item xs={12}>\n            <GradientBox p={3} color={color}>\n                <Dialog\n                    open={cancelDialogOpen}\n                    onClose={() => setCancelDialogOpen(false)}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        Cancel your participation?\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            Are you sure you wish to cancel your participation?\n                            This means your spot will be given to someone on the\n                            waiting list, and you won't be able to attend the\n                            event yourself. If you really can't make it, please\n                            cancel your participation so we can take someone\n                            else instead.\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        {loading && <CircularProgress size={24} />}\n                        <Button\n                            loading={loading}\n                            onClick={() => setCancelDialogOpen(false)}\n                            color=\"primary\"\n                        >\n                            No, I don't want to cancel\n                        </Button>\n                        <Button\n                            loading={loading}\n                            onClick={handleCancel}\n                            color=\"secondary\"\n                        >\n                            Yes, I'm sure\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Typography key=\"overline\" variant=\"button\" color=\"inherit\">\n                    Registration status\n                </Typography>\n                <Typography key=\"title\" variant=\"h4\" color=\"inherit\" paragraph>\n                    {title}\n                </Typography>\n                <Typography key=\"body\" variant=\"body1\" paragraph>\n                    {body}\n                </Typography>\n                {action}\n            </GradientBox>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport moment from 'moment-timezone'\nimport Countdown from 'react-countdown-now'\nimport { push } from 'connected-react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Grid, Typography } from '@material-ui/core'\nimport { RegistrationStatuses, EventHelpers } from '@hackjunction/shared'\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport Button from 'components/generic/Button'\nimport GradientBox from 'components/generic/GradientBox'\n\nimport { useTranslation } from 'react-i18next'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\nexport default () => {\n    const { t } = useTranslation()\n    const hasAdvisor = useSelector(AuthSelectors.hasAdvisor)\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const project = useSelector(DashboardSelectors.projects)\n    const projectLoading = useSelector(DashboardSelectors.projectsLoading)\n    const isSubmissionsUpcoming = useSelector(\n        DashboardSelectors.isSubmissionsUpcoming,\n    )\n    const isSubmissionsPast = useSelector(DashboardSelectors.isSubmissionsPast)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    // const hasAdvisor = userProfile && userProfile.role === 'Advisor'\n\n    let submissionsStartTimeAlias = 'submissionsStartTime'\n    let submissionsEndTimeAlias = 'submissionsEndTime'\n\n    if (userProfile.location) {\n        submissionsStartTimeAlias = concatAndCapitalize(\n            'submissionsStartTime',\n            userProfile.location,\n        )\n        submissionsEndTimeAlias = concatAndCapitalize(\n            'submissionsEndTime',\n            userProfile.location,\n        )\n    }\n\n    if (registration?.status !== RegistrationStatuses.asObject.checkedIn.id)\n        return null\n    if (EventHelpers.isEventOver(event, moment, userProfile.location))\n        return null\n    if (projectLoading) return null\n    console.log(hasAdvisor)\n\n    if (isSubmissionsUpcoming) {\n        return (\n            <Grid item xs={12}>\n                <GradientBox color=\"theme_white\" p={3}>\n                    <Typography variant=\"button\" gutterBottom>\n                        {t('Project_submissions_')}\n                    </Typography>\n                    <Typography variant=\"h4\" gutterBottom>\n                        {t('Project_submissions_not_open_')}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        {t('Project_submissions_upcoming_', {\n                            submissionsStartTime: moment(\n                                event[submissionsStartTimeAlias],\n                            ).format('LLLL'),\n                            submissionsDeadline: moment(\n                                event[submissionsEndTimeAlias],\n                            ).format('LLLL'),\n                        })}\n                    </Typography>\n                </GradientBox>\n            </Grid>\n        )\n    }\n\n    if (isSubmissionsPast) {\n        return (\n            <Grid item xs={12}>\n                <GradientBox color=\"theme_white\" p={3}>\n                    <Typography variant=\"button\" gutterBottom>\n                        {t('Project_submissions_')}\n                    </Typography>\n                    <Typography variant=\"h4\" color=\"secondary\" gutterBottom>\n                        {t('Project_submissions_closed_')}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        {t('Project_submissions_closed_text_')}\n                    </Typography>\n                </GradientBox>\n            </Grid>\n        )\n    }\n\n    // Project submissions are open\n\n    if (!project) {\n        if (!hasAdvisor) {\n            return (\n                <Grid item xs={12}>\n                    <GradientBox color=\"theme_orange\" p={3}>\n                        <Typography variant=\"button\" gutterBottom>\n                            Project submissions\n                        </Typography>\n                        <Typography variant=\"h4\">\n                            Project submissions are open\n                        </Typography>\n                        <Typography variant=\"h6\" gutterBottom>\n                            The submission deadline is in{' '}\n                            <Countdown\n                                daysInHours\n                                date={event[submissionsEndTimeAlias]}\n                                renderer={({ formatted }) =>\n                                    `${formatted.hours}:${formatted.minutes}:${formatted.seconds}`\n                                }\n                            />\n                        </Typography>\n                        <Typography variant=\"body1\" gutterBottom>\n                            You haven't yet submitted a project! You should go\n                            and submit a draft of your project as soon as you\n                            have a rough idea of what you're making. You're free\n                            to edit your project submission as many times as you\n                            wish until the final submission deadline, and the\n                            project won't be visible to others until the end.\n                            It'll take you under a minute, we promise.\n                        </Typography>\n                        <Button\n                            variant=\"containedGrey\"\n                            color=\"theme_white\"\n                            onClick={() =>\n                                dispatch(\n                                    push(`/dashboard/${event.slug}/project`),\n                                )\n                            }\n                        >\n                            Make a draft submission\n                        </Button>\n                    </GradientBox>\n                </Grid>\n            )\n        }\n    }\n\n    return (\n        <Grid item xs={12}>\n            <GradientBox color=\"theme_turquoise\" p={3}>\n                <Typography variant=\"button\" gutterBottom>\n                    Project submissions\n                </Typography>\n                <Typography variant=\"h4\">\n                    Project submissions are open!\n                </Typography>\n                <Typography variant=\"h6\" gutterBottom>\n                    The submission deadline is in{' '}\n                    <Countdown\n                        daysInHours\n                        date={event[submissionsEndTimeAlias]}\n                        renderer={({ formatted }) =>\n                            `${formatted.hours}:${formatted.minutes}:${formatted.seconds}`\n                        }\n                    />\n                </Typography>\n\n                {hasAdvisor ? (\n                    <Typography variant=\"body1\" gutterBottom>\n                        As an advisor you can't submit the project. But you can\n                        guide your team in the project.\n                    </Typography>\n                ) : (\n                    <>\n                        <Typography variant=\"body1\" gutterBottom>\n                            Great, you've already made a submission! You can\n                            make edits to it until the final submission\n                            deadline, so make sure to make it as polished as\n                            possible!\n                        </Typography>\n                        <Button\n                            variant=\"containedGrey\"\n                            color=\"theme_white\"\n                            onClick={() =>\n                                dispatch(\n                                    push(`/dashboard/${event.slug}/project`),\n                                )\n                            }\n                        >\n                            Edit your submission\n                        </Button>\n                    </>\n                )}\n            </GradientBox>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box } from '@material-ui/core'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined'\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined'\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined'\n\nconst getBackgroundColor = (type, theme) => {\n    switch (type) {\n        case 'success':\n            return theme.palette.primary.main\n        case 'error':\n            return theme.palette.error.light\n        case 'warning':\n            return 'orange'\n        case 'info':\n            return '#888'\n        default:\n            return '#888'\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ type }) => ({\n        padding: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: getBackgroundColor(type, theme),\n    }),\n    icon: {\n        color: 'white',\n        fontSize: '32px',\n    },\n}))\n\nconst IconHeader = ({ type }) => {\n    const classes = useStyles({ type })\n    const getIcon = () => {\n        switch (type) {\n            case 'success':\n                return <CheckCircleOutlinedIcon className={classes.icon} />\n            case 'error':\n                return <ErrorOutlineOutlinedIcon className={classes.icon} />\n            case 'warning':\n                return <ReportProblemOutlinedIcon className={classes.icon} />\n            case 'info':\n                return <InfoOutlinedIcon className={classes.icon} />\n            default:\n                return <InfoOutlinedIcon className={classes.icon} />\n        }\n    }\n\n    return <Box className={classes.root}>{getIcon()}</Box>\n}\n\nexport const SuccessHeader = props => {\n    return <IconHeader type=\"success\" {...props} />\n}\n\nexport const ErrorHeader = props => {\n    return <IconHeader type=\"error\" {...props} />\n}\n\nexport const WarningHeader = props => {\n    return <IconHeader type=\"warning\" {...props} />\n}\n\nexport const InfoHeader = props => {\n    return <IconHeader type=\"info\" {...props} />\n}\n\nexport default IconHeader\n","import React from 'react'\n\nimport {\n    Card,\n    CardMedia,\n    CardContent,\n    CardActions,\n    Typography,\n    CircularProgress,\n    Box,\n} from '@material-ui/core'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport {\n    SuccessHeader,\n    ErrorHeader,\n    InfoHeader,\n    WarningHeader,\n} from './IconHeader'\n\nconst NotificationBlock = ({\n    title,\n    titleExtra,\n    body,\n    bottom,\n    bottomLoading,\n    type,\n    loading,\n}) => {\n    const headerComponent = () => {\n        switch (type) {\n            case 'success':\n                return <SuccessHeader />\n            case 'error':\n                return <ErrorHeader />\n            case 'warning':\n                return <WarningHeader />\n            case 'info':\n                return <InfoHeader />\n            default:\n                return <InfoHeader />\n        }\n    }\n\n    if (loading) {\n        return (\n            <Card>\n                <CardContent>\n                    <Skeleton variant=\"rect\" width=\"100%\" height=\"60px\" />\n                    <Box mt={1} />\n                    <Skeleton variant=\"rect\" width=\"60%\" height=\"30px\" />\n                    <Box mt={1} />\n                    <Skeleton variant=\"rect\" width=\"100%\" height=\"200px\" />\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <Card>\n            <CardMedia component=\"div\" height=\"200\">\n                {headerComponent()}\n            </CardMedia>\n            <CardContent>\n                <Typography variant=\"button\">{title}</Typography>\n                <Typography variant=\"h6\" paragraph>\n                    {titleExtra}\n                </Typography>\n                <Typography variant=\"subtitle1\">{body}</Typography>\n            </CardContent>\n            <CardActions>\n                <Box\n                    p={2}\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    alignItems=\"center\"\n                    justifyContent=\"flex-end\"\n                    flexWrap=\"wrap\"\n                    width=\"100%\"\n                >\n                    {bottomLoading ? <CircularProgress size={24} /> : bottom}\n                </Box>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default NotificationBlock\n","import React from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { Typography, Grid } from '@material-ui/core'\nimport NotificationBlock from 'components/generic/NotificationBlock'\nimport GradientBox from 'components/generic/GradientBox'\nimport Button from 'components/generic/Button'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const appliedAsTeam = useSelector(DashboardSelectors.appliedAsTeam)\n    const hasTeam = useSelector(DashboardSelectors.hasTeam)\n    const isTeamComplete = useSelector(DashboardSelectors.isTeamComplete)\n    const isAcceptancePending = useSelector(\n        DashboardSelectors.isAcceptancePending,\n    )\n\n    if (!registration || !event) return <NotificationBlock loading />\n\n    if (isAcceptancePending) {\n        if (appliedAsTeam) {\n            if (!hasTeam) {\n                return (\n                    <Grid item xs={12} md={6}>\n                        <GradientBox p={3} color=\"theme_white\">\n                            <Typography\n                                key=\"overline\"\n                                variant=\"button\"\n                                color=\"inherit\"\n                            >\n                                Team status\n                            </Typography>\n                            <Typography\n                                key=\"title\"\n                                variant=\"h4\"\n                                color=\"secondary\"\n                                paragraph\n                            >\n                                No team\n                            </Typography>\n                            <Typography key=\"body\" variant=\"body1\" paragraph>\n                                You've chosen to apply as a team but haven't\n                                joined a team yet. You'll need to join a team\n                                before we'll begin processing your application!\n                            </Typography>\n                            <Button\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    dispatch(\n                                        push(`/dashboard/${event.slug}/team`),\n                                    )\n                                }\n                            >\n                                Create or join a team\n                            </Button>\n                        </GradientBox>\n                    </Grid>\n                )\n            } else if (!isTeamComplete) {\n                return (\n                    <Grid item xs={12} md={6}>\n                        <GradientBox p={3} color=\"theme_white\">\n                            <Typography\n                                key=\"overline\"\n                                variant=\"button\"\n                                color=\"inherit\"\n                            >\n                                Team status\n                            </Typography>\n                            <Typography\n                                key=\"title\"\n                                variant=\"h4\"\n                                color=\"secondary\"\n                                paragraph\n                            >\n                                Pending\n                            </Typography>\n                            <Typography key=\"body\" variant=\"body1\" paragraph>\n                                Registering your team prior to event makes it\n                                easier for us to review your application.\n                            </Typography>\n                            <Button\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    dispatch(\n                                        push(`/dashboard/${event.slug}/team`),\n                                    )\n                                }\n                            >\n                                Edit your team\n                            </Button>\n                        </GradientBox>\n                    </Grid>\n                )\n            } else {\n                return (\n                    <Grid item xs={12} md={6}>\n                        <GradientBox p={3} color=\"theme_white\">\n                            <Typography\n                                key=\"overline\"\n                                variant=\"button\"\n                                color=\"inherit\"\n                            >\n                                Team status\n                            </Typography>\n                            <Typography\n                                key=\"title\"\n                                variant=\"h4\"\n                                color=\"primary\"\n                                paragraph\n                            >\n                                Complete\n                            </Typography>\n                            <Typography key=\"body\" variant=\"body1\" paragraph>\n                                You've locked in your team and we can now\n                                process your team members' applications - just\n                                sit back and relax. You'll also be able to edit\n                                your team again closer to the event, if you want\n                                to add or remove members.\n                            </Typography>\n                        </GradientBox>\n                    </Grid>\n                )\n            }\n        }\n    } else {\n        // TODO: Reminder about finalizing team before submission deadline, as it can no longer be edited\n    }\n\n    return null\n}\n","import React, { Suspense } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { CircularProgress, Typography, Grid } from '@material-ui/core'\n\nimport { RegistrationStatuses, EventTypes } from '@hackjunction/shared'\nimport GradientBox from 'components/generic/GradientBox'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst STATUSES = RegistrationStatuses.asObject\nconst VisaInvitationDrawer = React.lazy(() =>\n    import('components/modals/VisaInvitationDrawer'),\n)\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    if (event?.eventType !== EventTypes.physical.id) return null\n\n    const statuses = [STATUSES.accepted.id, STATUSES.confirmed.id]\n\n    if (statuses.indexOf(registration?.status) === -1) {\n        return null\n    }\n\n    return (\n        <Grid item xs={12} md={6}>\n            <GradientBox p={3} color=\"theme_purple\">\n                <Typography key=\"overline\" variant=\"button\" color=\"inherit\">\n                    Visa invitation letter\n                </Typography>\n                <Typography variant=\"h4\" paragraph>\n                    Need a visa?\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    If you need a visa to travel to the event, we've got you\n                    sorted. Click the button below and you'll be able to\n                    download a personalised visa invitation letter, which you\n                    can attach to your visa application. It should make it a bit\n                    easier for your visa application to get accepted.\n                </Typography>\n                <Suspense\n                    fallback={<CircularProgress style={{ color: 'white' }} />}\n                >\n                    <VisaInvitationDrawer />\n                </Suspense>\n            </GradientBox>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Typography, Grid } from '@material-ui/core'\nimport { RegistrationStatuses, EventTypes } from '@hackjunction/shared'\nimport GradientBox from 'components/generic/GradientBox'\nimport Button from 'components/generic/Button'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst STATUSES = RegistrationStatuses.asObject\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    if (event?.eventType !== EventTypes.physical.id) return null\n    if (!registration?.answers?.needsTravelGrant) return null\n\n    // TODO: When status is checkedIn, show the travel grant details submission form here\n\n    if (\n        registration.status === STATUSES.accepted.id ||\n        registration.status === STATUSES.acceptedToHub.id\n    ) {\n        return (\n            <Grid item xs={12} md={6}>\n                <GradientBox p={3} color=\"theme_white\">\n                    <Typography variant=\"button\">Travel grant</Typography>\n                    <Typography variant=\"h4\" paragraph>\n                        Pending\n                    </Typography>\n                    <Typography variant=\"body1\" paragraph>\n                        After you've confirmed your participation, we'll be able\n                        to confirm your travel grant. The earlier you confirm\n                        your participation, the more likely you are to receive a\n                        travel grant!\n                    </Typography>\n                </GradientBox>\n            </Grid>\n        )\n    }\n\n    if (registration.status === STATUSES.confirmed.id) {\n        if (registration.travelGrant === 0) {\n            return (\n                <Grid item xs={12} md={6}>\n                    <GradientBox p={3} color=\"theme_white\">\n                        <Typography variant=\"button\">Travel grant</Typography>\n                        <Typography variant=\"h4\" color=\"secondary\" paragraph>\n                            No grant\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            Unfortunately we weren't able to give you a travel\n                            grant this time. But don't worry - at the event\n                            we'll provide food, snacks, accommodation and much\n                            more, at no cost to you!\n                        </Typography>\n                    </GradientBox>\n                </Grid>\n            )\n        }\n\n        if (!registration.travelGrant) {\n            return (\n                <Grid item xs={12} md={6}>\n                    <GradientBox p={3} color=\"theme_white\">\n                        <Typography variant=\"button\">Travel grant</Typography>\n                        <Typography variant=\"h4\" paragraph>\n                            Pending\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            Thanks for confirming your participation! We'll let\n                            you know about your eligibility for a travel grant\n                            as soon as possible! Please consult the FAQ on our\n                            website for details on the travel grant amounts\n                            available for the country you're travelling from.\n                        </Typography>\n                        {event.challenge_instructions ? (\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => window.open(event.faq, '_blank')}\n                            >\n                                Frequently asked questions\n                            </Button>\n                        ) : null}\n                    </GradientBox>\n                </Grid>\n            )\n        } else {\n            return (\n                <Grid item xs={12} md={6}>\n                    <GradientBox p={3} color=\"theme_white\">\n                        <Typography variant=\"button\">Travel grant</Typography>\n                        <Typography variant=\"h4\" color=\"primary\" paragraph>\n                            {`Up to ${registration.travelGrant}€`}\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            {`Yay! You're eligible for a travel grant of up to ${registration.travelGrant}€. To be eligible for this travel grant, please make sure you keep hold of all receipts related to your travel to the event. You'll be able to submit your travel receipts and other information required for payment here once you have checked in to the event.`}\n                        </Typography>\n                    </GradientBox>\n                </Grid>\n            )\n        }\n    }\n\n    return null\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Grid, Typography, Box } from '@material-ui/core'\nimport moment from 'moment-timezone'\nimport {\n    RegistrationStatuses,\n    ReviewingMethods,\n    EventHelpers,\n} from '@hackjunction/shared'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport Button from 'components/generic/Button'\nimport GradientBox from 'components/generic/GradientBox'\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    if (event?.reviewMethod !== ReviewingMethods.gavelPeerReview.id) return null\n    if (EventHelpers.isEventOver(event, moment, userProfile.location))\n        return null\n    if (registration?.status !== RegistrationStatuses.asObject.checkedIn.id)\n        return null\n\n    return (\n        <Grid item xs={12} lg={6}>\n            <GradientBox p={3} color=\"theme_purple\">\n                <Typography variant=\"button\" gutterBottom>\n                    Reviewing\n                </Typography>\n                <Typography variant=\"h4\" gutterBottom>\n                    How are winners decided?\n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                    {/* The main winner of this event will be decided via\n                    peer-reviewing, which means participants will review each\n                    others' projects for the duration of the reviewing period.\n                    Sounds scary? Don't worry, checking out other people's\n                    projects is a ton of fun, and the reviewing process is\n                    explained in detail on the reviewing page! */}\n                    The main winner of this event for each category will be\n                    decided by the organiser by taking the ratings and the\n                    judges score into account. You can rate the projects you\n                    like in the rating page and clicking on the star.\n                </Typography>\n                {event.tracksEnabled && event.tracks && (\n                    <Typography variant=\"body1\" gutterBottom>\n                        This event is divided into {event.tracks.length}{' '}\n                        different categories - you can think of them as themes,\n                        and each team must choose which category they are\n                        participating on when submitting their project. The main\n                        winner is decided in two phases: First, the winner of\n                        each category will be decided via peer-reviewing. All{' '}\n                        {event.tracks.length} category winners will then advance\n                        to the finals, and get to demo their project on the main\n                        stage in the closing ceremony. The main prize winner\n                        will then be decided with a traditional vote - each\n                        participant can vote for their favorite project out of\n                        the finalists, and the project with the most votes will\n                        be crowned the winner of {event.name}!\n                    </Typography>\n                )}\n                <Box p={1} />\n                {event.challenge_instructions ? (\n                    <Button\n                        color=\"theme_white\"\n                        variant=\"containedGrey\"\n                        onClick={() =>\n                            window.open(event.demoInstructions, '_blank')\n                        }\n                    >\n                        More info about reviewing\n                    </Button>\n                ) : null}\n            </GradientBox>\n        </Grid>\n    )\n}\n","import React, { useEffect } from 'react'\n\nimport { Typography, Grid, Box } from '@material-ui/core'\nimport { push } from 'connected-react-router'\nimport moment from 'moment-timezone'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { EventHelpers } from '@hackjunction/shared'\n\nimport Button from 'components/generic/Button'\nimport GradientBox from 'components/generic/GradientBox'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as UserSelectors from 'redux/user/selectors'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const voteCount = useSelector(DashboardSelectors.annotatorVoteCount)\n\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    let reviewingStartTimeAlias = 'reviewingStartTime'\n    let reviewingEndTimeAlias = 'reviewingEndTime'\n\n    if (userProfile.location) {\n        reviewingStartTimeAlias = concatAndCapitalize(\n            'reviewingStartTime',\n            userProfile.location,\n        )\n        reviewingEndTimeAlias = concatAndCapitalize(\n            'reviewingEndTime',\n            userProfile.location,\n        )\n    }\n\n    useEffect(() => {\n        if (event) {\n            dispatch(DashboardActions.updateAnnotator(event.slug))\n        }\n    }, [event, dispatch])\n\n    if (!EventHelpers.isVotingOpen(event, moment, userProfile.location))\n        return null\n\n    return (\n        <Grid item xs={12}>\n            <GradientBox p={3} color=\"theme_purple\">\n                <Typography variant=\"button\">Reviewing period</Typography>\n                <Typography variant=\"h4\">Reviewing period is open!</Typography>\n                <Typography variant=\"h6\" gutterBottom>\n                    Reviewing ends{' '}\n                    {moment(event[reviewingEndTimeAlias]).fromNow()}\n                </Typography>\n                <Typography variant=\"body1\" gutterBottom>\n                    {voteCount === 0\n                        ? `Head over to the reviewing page to start reviewing other projects!`\n                        : `You've submitted ${voteCount} votes. Head over to the reviewing page to continue reviewing other projects!`}\n                </Typography>\n                <Box mt={2}></Box>\n                {/* <Button\n                    onClick={() =>\n                        dispatch(push(`/dashboard/${event.slug}/reviewing`))\n                    }\n                    color=\"theme_white\"\n                    variant=\"contained\"\n                >\n                    To reviewing\n                </Button> */}\n            </GradientBox>\n        </Grid>\n    )\n}\n","import { PDFDocument, rgb, StandardFonts } from 'pdf-lib'\nimport download from 'downloadjs'\n\n// TODO: This is hardcoded at the moment for Junction2021 certificate. Make this modular for all certificates\n\nconst modifyPdf = async (url, x, y, name, slug, color) => {\n    const existingPdfBytes = await fetch(url).then(res => res.arrayBuffer())\n\n    const pdfDoc = await PDFDocument.load(existingPdfBytes)\n    const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n    const pages = pdfDoc.getPages()\n    const page = pages[0]\n\n    const text = name\n    const textSize = 20\n    //const textHeight = font.heightAtSize(textSize)\n\n    const textWidth = font.widthOfTextAtSize(text, textSize)\n    // align text center\n    page.drawText(text, {\n        x: 100 + 200 - textWidth / 2,\n        y: 475,\n        size: textSize,\n        font: font,\n        align: 'center',\n        color: rgb(0.95, 0.95, 0.95),\n    })\n    // page.drawRectangle({\n    //     x: 100,\n    //     y: 475,\n    //     width: 400,\n    //     height: textHeight,\n\n    //     borderWidth: 1.5,\n    // })\n\n    // firstPage.drawText(name, {\n    //     x: boxX + boxWidth - textWidth,\n    //     y: boxY,\n    //     size: textSize,\n    //     font: helveticaFont,\n\n    //     color: rgb(0.95, 0.95, 0.95),\n    // })\n\n    const pdfBytes = await pdfDoc.save()\n    download(pdfBytes, `${name}-${slug}-certificate`, 'application/pdf')\n}\n\nexport default modifyPdf\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\nimport moment from 'moment-timezone'\nimport { Grid, CircularProgress } from '@material-ui/core'\n\nimport GradientBox from 'components/generic/GradientBox'\nimport { Typography } from '@material-ui/core'\nimport { RegistrationStatuses, EventHelpers } from '@hackjunction/shared'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport Button from 'components/generic/Button'\n//import ParticipationCertificate from 'components/pdfs/ParticipationCertificate'\nimport modifyPdf from 'utils/modifyPdf'\nimport config from 'constants/config'\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const eventLoading = useSelector(DashboardSelectors.eventLoading)\n    const projectLoading = useSelector(DashboardSelectors.projectsLoading)\n    if (!EventHelpers.isEventOver(event, moment, userProfile.location))\n        return null\n    if (registration?.status !== RegistrationStatuses.asObject.checkedIn.id)\n        return null\n    if ('certificate' in event && event.certificate.url !== '') {\n        return (\n            <Grid item xs={12}>\n                <GradientBox p={3} color=\"theme_turquoise\">\n                    <Typography variant=\"h4\" gutterBottom>\n                        Participation certificate\n                    </Typography>\n                    <Typography variant=\"body1\" paragraph>\n                        Thanks for being a part of {event.name}! While waiting\n                        for the next {config.PLATFORM_OWNER_NAME} event to take\n                        part in, go ahead and download your personal certificate\n                        of participation by clicking the button below!\n                    </Typography>\n                    {eventLoading || projectLoading ? (\n                        <CircularProgress size={24} />\n                    ) : (\n                        <Button\n                            onClick={() => {\n                                modifyPdf(\n                                    event.certificate.url,\n                                    event.x,\n                                    event.y,\n                                    `${userProfile.firstName} ${userProfile.lastName}`,\n                                    event.slug,\n                                )\n                            }}\n                            color=\"theme_white\"\n                            variant=\"contained\"\n                        >\n                            Download certificate\n                        </Button>\n                    )}\n                </GradientBox>\n            </Grid>\n        )\n    } else return null\n}\n","import React from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport moment from 'moment-timezone'\nimport { EventHelpers } from '@hackjunction/shared'\nimport { Typography, Grid } from '@material-ui/core'\nimport GradientBox from 'components/generic/GradientBox'\nimport Button from 'components/generic/Button'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport config from 'constants/config'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    if (!EventHelpers.isEventOver(event, moment, userProfile.location))\n        return null\n    return (\n        <Grid item xs={12}>\n            <GradientBox p={3} color=\"theme_purple\">\n                <Typography variant=\"h4\" gutterBottom>\n                    That's a wrap!\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    {event.name} is now over, thanks for taking part! Check out\n                    your project submission and all of the other cool stuff\n                    people made in the project gallery, and stay tuned for the\n                    next {config.PLATFORM_OWNER_NAME} event near you!\n                </Typography>\n                {event.galleryOpen ? (\n                    <Button\n                        onClick={() =>\n                            dispatch(push(`/projects/${event.slug}`))\n                        }\n                        color=\"theme_white\"\n                        variant=\"containedGrey\"\n                    >\n                        Project gallery\n                    </Button>\n                ) : (\n                    <Typography variant=\"body1\" paragraph>\n                        The project gallery is not yet open.\n                    </Typography>\n                )}\n            </GradientBox>\n        </Grid>\n    )\n}\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Box, Grid, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport { popupCenter } from '../../../../../utils/misc'\n\nconst useStyles = makeStyles(theme => ({\n    doneTitle: {\n        color: 'black',\n        textAlign: 'center',\n    },\n    socialIcon: {\n        color: 'black',\n        width: 'auto',\n        margin: '1rem',\n        cursor: 'pointer',\n    },\n}))\n\nconst SocialMediaBlock = () => {\n    const event = useSelector(DashboardSelectors.event)\n    const classes = useStyles()\n    const shareurl = 'http://localhost:3000/events/' + event.slug // TODO: remove hard coded base URL\n    const sharetext = `I just applied to ${event.name}!`\n    return (\n        <Grid item xs={12} lg={12}>\n            <Box mt={5} alignItems=\"center\" alignContent=\"center\">\n                <Typography className={classes.doneTitle} variant=\"h4\">\n                    Share with friends!\n                </Typography>\n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <FontAwesomeIcon\n                            icon={['fab', 'twitter-square']}\n                            onClick={() =>\n                                popupCenter({\n                                    url: `https://twitter.com/intent/tweet?text=${sharetext}&url=${shareurl}`,\n                                    title: 'Twitter',\n                                })\n                            }\n                            className={classes.socialIcon}\n                            size=\"3x\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <FontAwesomeIcon\n                            icon={['fab', 'facebook-square']}\n                            onClick={() =>\n                                popupCenter({\n                                    url: `https://www.facebook.com/sharer/sharer.php?u=${shareurl}&quote=${sharetext}`,\n                                    title: 'Facebook',\n                                })\n                            }\n                            className={classes.socialIcon}\n                            size=\"3x\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <FontAwesomeIcon\n                            icon={['fab', 'linkedin']}\n                            onClick={() =>\n                                popupCenter({\n                                    url: `https://www.linkedin.com/sharing/share-offsite/?url=${shareurl}`,\n                                    title: 'Linkedin',\n                                })\n                            }\n                            className={classes.socialIcon}\n                            size=\"3x\"\n                        />\n                    </Grid>\n                    <Grid item>\n                        <FontAwesomeIcon\n                            icon={['fab', 'vk']}\n                            onClick={() =>\n                                popupCenter({\n                                    url: `https://vkontakte.ru/share.php?url=${shareurl}&`,\n                                    title: 'VKOntakte',\n                                })\n                            }\n                            className={classes.socialIcon}\n                            size=\"3x\"\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n        </Grid>\n    )\n}\nexport default SocialMediaBlock\n","import React, { useState } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport {\n    Grid,\n    Typography,\n    FormControl,\n    Select,\n    MenuItem,\n    InputLabel,\n} from '@material-ui/core'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nimport GradientBox from 'components/generic/GradientBox'\n\nimport { useTranslation } from 'react-i18next'\nimport EventTimeline from 'pages/_events/slug/default/EventTimeline'\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const [region, setRegion] = useState('auto') // Default to auto-detect\n\n    const handleRegionChange = event => {\n        setRegion(event.target.value)\n    }\n\n    if (!event || !event.eventTimeline) {\n        return null // Don't render anything if event or timeline isn't available\n    }\n\n    return (\n        <Grid item xs={4}>\n            <GradientBox color=\"theme_white\" p={3}>\n                <Grid container spacing={2}>\n                    <Grid item xs={8}>\n                        <Typography variant=\"button\" gutterBottom>\n                            Event Timeline\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl variant=\"outlined\" size=\"small\" fullWidth>\n                            <InputLabel id=\"region-select-label\">\n                                Region\n                            </InputLabel>\n                            <Select\n                                labelId=\"region-select-label\"\n                                id=\"region-select\"\n                                value={region}\n                                onChange={handleRegionChange}\n                                label=\"Region\"\n                            >\n                                <MenuItem value=\"auto\">Auto-detect</MenuItem>\n                                <MenuItem value=\"americas\">Americas</MenuItem>\n                                <MenuItem value=\"epac\">\n                                    EPAC (Europe/Africa)\n                                </MenuItem>\n                                <MenuItem value=\"apac\">\n                                    APAC (Asia/Pacific)\n                                </MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                <EventTimeline\n                    event={event}\n                    accentColor={event.theme.accentColor}\n                    textColor={event.theme.sidebarTextColor}\n                    forcedRegion={region !== 'auto' ? region : null}\n                />\n            </GradientBox>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { Box, Grid } from '@material-ui/core'\n\nimport PageHeader from 'components/generic/PageHeader'\nimport { Helmet } from 'react-helmet'\nimport config from 'constants/config'\n\nimport RegistrationStatusBlock from './Blocks/RegistrationStatusBlock'\nimport ProjectBlock from './Blocks/ProjectBlock'\nimport TeamStatusBlock from './Blocks/TeamStatusBlock'\nimport VisaInvitationBlock from './Blocks/VisaInvitationBlock'\nimport TravelGrantStatusBlock from './Blocks/TravelGrantStatusBlock'\nimport GavelReviewingBlock from './Blocks/GavelReviewingBlock'\n//import PartnerReviewingBlock from './Blocks/PartnerReviewingBlock'\nimport ReviewingPeriodBlock from './Blocks/ReviewingPeriodBlock'\nimport CertificateBlock from './Blocks/CertificateBlock'\nimport EventOverBlock from './Blocks/EventOverBlock'\nimport SocialMediaBlock from './Blocks/SocialMediaBlock'\nimport EventTimeline from 'pages/_events/slug/default/EventTimeline'\nimport TimeLineBlock from './Blocks/TimeLineBlock'\n\nexport default () => {\n    return (\n        <Box>\n            <PageHeader heading=\"Dashboard\" />\n            <p>{'Checkout participant guidebook: '}</p>\n            <a href=\"https://harness.atlassian.net/wiki/spaces/ERC/pages/21740781727/Hack+Week+2024\">\n                Click here!\n            </a>\n            <Helmet>\n                <title>Harness Hackweek || Dashboard</title>\n                <meta\n                    name=\"keywords\"\n                    content=\"Hackathon, hackathon platform, Junction, junction dashboard\"\n                />\n                <meta name=\"title\" content=\"Harness Hackweek || Dashboard\" />\n                <meta\n                    property=\"og:title\"\n                    content=\"Harness Hackweek || Dashboard\"\n                />\n\n                <meta\n                    name=\"twitter:title\"\n                    content=\"Harness Hackweek || Dashboard\"\n                />\n                <meta\n                    name=\"description\"\n                    content=\"Log in to check out Europe's leading dashboard!\"\n                />\n                <meta\n                    property=\"og:description\"\n                    content=\"Log in to check out Europe's leading dashboard!\"\n                />\n                <meta\n                    name=\"twitter:description\"\n                    content=\"Log in to check out Europe's leading dashboard!\"\n                />\n\n                <meta name=\"og:type\" content=\"website\" />\n                <meta property=\"og:image\" content={config.SEO_IMAGE_URL} />\n                <meta name=\"twitter:image\" content={config.SEO_IMAGE_URL} />\n                <meta property=\"og:image:width\" content=\"1200\" />\n                <meta property=\"og:image:height\" content=\"630\" />\n                <meta name=\"twitter:card\" content=\"summary_large_image\" />\n                <meta name=\"twitter:site\" content={config.SEO_TWITTER_HANDLE} />\n                <meta\n                    name=\"twitter:creator\"\n                    content={config.SEO_TWITTER_HANDLE}\n                />\n            </Helmet>\n            <Box mt={2} />\n            <Grid container spacing={5}>\n                <TimeLineBlock />\n                <EventOverBlock />\n                <ReviewingPeriodBlock />\n                <RegistrationStatusBlock />\n                <TravelGrantStatusBlock />\n                {/* <VisaInvitationBlock /> */}\n                <CertificateBlock />\n                <ProjectBlock />\n                <TeamStatusBlock />\n                <GavelReviewingBlock />\n                {/* <SocialMediaBlock /> */}\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport { useTranslation } from 'react-i18next'\n\nconst useStyles = makeStyles(theme => ({\n    box: {\n        background: 'white',\n        padding: theme.spacing(3),\n        borderRadius: '12px',\n        boxShadow: '4px 6px 20px #F3F3F3',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n}))\n\nexport default () => {\n    const { t } = useTranslation()\n\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const classes = useStyles()\n    const [code, setCode] = useState('')\n    const [name, setName] = useState('');\n\n    const [loading, setLoading] = useState('')\n    const hasAdvisor = useSelector(AuthSelectors.hasAdvisor)\n    // const userProfile = useSelector(UserSelectors.userProfile)\n    // const hasAdvisor = userProfile && userProfile.role === 'Advisor'\n    // console.log(hasAdvisor)\n\n    const handleCreate = useCallback(() => {\n        setLoading(true)\n        dispatch(DashboardActions.createTeam(event.slug, name))\n            .then(() => {\n                dispatch(SnackbarActions.success('Created new team'))\n            })\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong... please try again.',\n                    ),\n                )\n            })\n    }, [dispatch, event.slug, name])\n\n    // const handleAdd = useCallback(() => {\n    //     setLoading(true)\n    //     dispatch(DashboardActions.createTeam(event.slug))\n    //         .then(() => {\n    //             dispatch(SnackbarActions.success('Created new team'))\n    //         })\n    //         .catch(err => {\n    //             dispatch(\n    //                 SnackbarActions.error(\n    //                     'Something went wrong... please try again.',\n    //                 ),\n    //             )\n    //         })\n    // }, [dispatch, event.slug])\n\n    const handleJoin = useCallback(() => {\n        setLoading(true)\n        setCode('')\n        dispatch(DashboardActions.joinTeam(event.slug, code))\n            .then(() => {\n                dispatch(SnackbarActions.success('Joined team ' + code))\n            })\n            .catch(err => {\n                if (err.response && err.response.status === 404) {\n                    dispatch(\n                        SnackbarActions.error(\n                            'No team found with code ' + code,\n                        ),\n                    )\n                } else if (err.response && err.response.status === 403) {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Unable to join team: ' +\n                                err?.response?.data?.message,\n                        ),\n                    )\n                } else {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... please try again.',\n                        ),\n                    )\n                }\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [code, dispatch, event.slug])\n\n    return (\n        <Box>\n            <Typography variant=\"body1\">{t('Team_none_')}</Typography>\n            <Box mt={2} />\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={6}>\n                    <Box className={classes.box}>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            {t('Team_join_')}\n                        </Typography>\n                        <Typography variant=\"body1\" align=\"center\" gutterBottom>\n                            {t('Team_info_0_')}\n                        </Typography>\n                        <Box\n                            mt={2}\n                            width=\"200px\"\n                            display=\"flex\"\n                            flexDirection=\"column\"\n                            alignItems=\"center\"\n                            justifyContent=\"center\"\n                        >\n                           \n\n                            <TextInput\n                                value={code}\n                                onChange={setCode}\n                                label=\"Your team code here\"\n                            />\n                            <Box p={1} />\n                            <Button\n                                loading={loading}\n                                disabled={code.length === 0}\n                                onClick={handleJoin}\n                                fullWidth\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                            >\n                                {t('Team_join_button_')}\n                            </Button>\n                        </Box>\n                    </Box>\n                </Grid>\n                {hasAdvisor ? (\n                    ''\n                ) : (\n                    <Grid item xs={12} md={6}>\n                        <Box className={classes.box}>\n                            <Typography\n                                variant=\"h6\"\n                                align=\"center\"\n                                gutterBottom\n                            >\n                                {t('Team_create_')}\n                            </Typography>\n                            <Typography\n                                variant=\"body1\"\n                                align=\"center\"\n                                gutterBottom\n                            >\n                                {t('Team_info_1_')}\n                            </Typography>\n                            <Box\n                                mt={2}\n                                width=\"200px\"\n                                // display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                >\n                                <TextInput\n                                    value={name}\n                                    onChange={setName}\n                                    label=\"Team name\"\n                                    />\n                                <Box p={1} />\n                                <Button\n                                    loading={loading}\n                                    onClick={handleCreate}\n                                    fullWidth\n                                    color=\"theme_turquoise\"\n                                    variant=\"contained\"\n                                >\n                                    {t('Team_create_button_')}\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Grid>\n                )}\n            </Grid>\n        </Box>\n    )\n}\n","import React, { useCallback, useState } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Box,\n    Typography,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    IconButton,\n    Avatar,\n    Divider,\n    Tooltip,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n} from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Button from 'components/generic/Button'\nimport StatusBadge from 'components/generic/StatusBadge'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport { useTranslation } from 'react-i18next'\nimport { log } from 'logrocket'\nimport TextInput from 'components/inputs/TextInput'\n\nconst useStyles = makeStyles(theme => ({\n    textHighlight: {\n        color: theme.palette.primary.main,\n    },\n    list: {\n        backgroundColor: theme.palette.theme_white.main,\n    },\n    listItemName: {\n        fontWeight: 'bold',\n    },\n}))\n\nexport default ({ team }) => {\n    const { t } = useTranslation()\n\n    const dispatch = useDispatch()\n    const teamSecond = useSelector(DashboardSelectors.team)\n    console.log('team', team, 'teamSecond', teamSecond)\n    const idTokenData = useSelector(AuthSelectors.idTokenData)\n    const event = useSelector(DashboardSelectors.event)\n    const [editingName, setEditingName] = useState(false)\nconst [teamName, setTeamName] = useState(team.name || '')\n\n    const teams = useSelector(DashboardSelectors.teams)\n    // console.log(team)\n    const classes = useStyles()\n    const [loading, setLoading] = useState(false)\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n    const isTeamOwner = team.owner === idTokenData.sub\n    const allTeamMembers = [team.owner].concat(team.members)\n    \nconst handleUpdateName = useCallback(() => {\n    if (!teamName.trim()) return\n    setLoading(true)\n    dispatch(DashboardActions.updateTeamName(event.slug, team.code, teamName))\n        .then(() => {\n            dispatch(SnackbarActions.success('Team name updated'))\n            setEditingName(false)\n        })\n        .catch((err) => {\n           console.log('Failed to update team name', err)\n            dispatch(SnackbarActions.error('Failed to update team name'))\n        })\n        .finally(() => {\n            setLoading(false)\n        })\n}, [dispatch, event.slug, team.code, teamName])\n\n\n    const handleLeave = useCallback(() => {\n        setLoading(true)\n        dispatch(DashboardActions.leaveTeam(event.slug, team.code))\n            .then(() => {\n                dispatch(SnackbarActions.success('Left team ' + team.code))\n            })\n            .catch(() => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong... please try again.',\n                    ),\n                )\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [event.slug, team.code, dispatch])\n\n    const handleDelete = useCallback(() => {\n        setLoading(true)\n        dispatch(DashboardActions.deleteTeam(event.slug))\n            .then(() => {\n                dispatch(SnackbarActions.success('Deleted team ' + team.code))\n            })\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong... please try again.',\n                    ),\n                )\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [dispatch, event.slug, team.code])\n\n    const handleRemoveMember = useCallback(\n        userId => {\n            setLoading(true)\n            dispatch(\n                DashboardActions.removeMemberFromTeam(\n                    event.slug,\n                    team.code,\n                    userId,\n                ),\n            )\n                .then(() => {\n                    dispatch(SnackbarActions.success('Removed team member'))\n                })\n                .catch(() => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Something went wrong... Please try again.',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, event.slug, team.code],\n    )\n\n    return (\n        <Box>\n\n           {isTeamOwner && (!team.name || editingName) ? (\n  <Box display=\"flex\" alignItems=\"center\" mt={1}>\n    <TextInput\n      value={teamName}\n      onChange={setTeamName}\n      size=\"small\"\n      label=\"Team name\"\n    />\n    <Box ml={1}>\n      <Button\n        loading={loading}\n        size=\"small\"\n        onClick={handleUpdateName}\n        variant=\"contained\"\n        color=\"theme_turquoise\"\n        disabled={!teamName.trim()}\n      >\n        Save\n      </Button>\n    </Box>\n    {team.name && (\n      <Box ml={1}>\n        <Button size=\"small\" onClick={() => setEditingName(false)}>\n          Cancel\n        </Button>\n      </Box>\n    )}\n  </Box>\n) : (\n  <Box display=\"flex\" alignItems=\"center\" mt={1}>\n    <Typography variant=\"h4\">{team.name}</Typography>\n    {isTeamOwner && (\n      <Box ml={1}>\n        <Button size=\"small\" onClick={() => setEditingName(true)}>\n          Edit\n        </Button>\n      </Box>\n    )}\n  </Box>\n)}\n \n            <Box mt={5} />\n            <Typography variant=\"h6\">\n                {t('Team_configure_')}{' '}\n                <span className={classes.textHighlight}>{team.name ? team.name + ' - ' : ''} {team.code}</span>\n            </Typography>\n\n            \n            <Typography variant=\"body1\">Share this code: <span className='font-bold'>{team.code}</span> with people you want to invite, and they'll be able to join your team.</Typography>\n            <Box mt={5} />\n\n            <Typography variant=\"h5\" gutterBottom>\n                {t('Team_your_')}\n            </Typography>\n            <List className={classes.list}>\n                {allTeamMembers.map((userId, index) => {\n                    const { profile, registration } = team.meta[userId]\n                    console.log(team)\n                    return [\n                        index !== 0 ? (\n                            <Divider\n                                variant=\"inset\"\n                                component=\"li\"\n                                key={profile.userId + '_divider'}\n                            />\n                        ) : null,\n                        <ListItem key={profile.userId}>\n                            <ListItemAvatar>\n                                <Avatar\n                                    alt={`${profile.firstName} ${profile.lastName}`}\n                                    src={profile.avatar}\n                                />\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={\n                                    <Typography\n                                        className={classes.listItemName}\n                                        variant=\"subtitle1\"\n                                    >\n                                        {`${profile.firstName} ${\n                                            profile.lastName\n                                        } ${\n                                            team.owner === profile.userId\n                                                ? '(Owner)'\n                                                : ''\n                                        }`}\n                                    </Typography>\n                                }\n                                secondary={\n                                    <Box\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                        alignItems=\"flex-start\"\n                                    >\n                                        <Typography variant=\"body2\">\n                                            {profile.email}\n                                        </Typography>\n                                        <Box mt={0.5} />\n                                        <StatusBadge\n                                            status={registration.status}\n                                            hideSoftStatuses\n                                        />\n                                    </Box>\n                                }\n                            />\n                            {isTeamOwner &&\n                                profile.userId !== idTokenData.sub && (\n                                    <ListItemSecondaryAction>\n                                        <Tooltip title=\"Remove from team\">\n                                            <IconButton\n                                                onClick={() =>\n                                                    handleRemoveMember(\n                                                        profile.userId,\n                                                    )\n                                                }\n                                                edge=\"end\"\n                                                aria-label=\"delete\"\n                                            >\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </ListItemSecondaryAction>\n                                )}\n                        </ListItem>,\n                    ]\n                })}\n            </List>\n            <Box mt={5} />\n            <Typography variant=\"h5\" gutterBottom>\n                {t('Actions_')}\n            </Typography>\n            <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n                {/* TODO: Enable making teams complete \n                \n                {isTeamOwner && (\n                    <Box mr={1} mb={1}>\n                        <Button color=\"theme_turquoise\" variant=\"contained\">\n                            Mark team as complete\n                        </Button>\n                    </Box>\n                )} */}\n                {isTeamOwner ? (\n                    <Box mr={1} mb={1}>\n                        <Button\n                            loading={loading}\n                            onClick={() => setDeleteDialogOpen(true)}\n                            color=\"error\"\n                            variant=\"contained\"\n                        >\n                            {t('Team_delete_')}\n                        </Button>\n                        <Dialog\n                            open={deleteDialogOpen}\n                            onClose={() => setDeleteDialogOpen(false)}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\"\n                        >\n                            <DialogTitle id=\"alert-dialog-title\">\n                                Are you sure?\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">\n                                    You won't be able to recover this team after\n                                    deleting it (but you can always create a new\n                                    one).\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button\n                                    onClick={() => setDeleteDialogOpen(false)}\n                                >\n                                    I've changed my mind\n                                </Button>\n                                <Button\n                                    onClick={handleDelete}\n                                    color=\"error\"\n                                    autoFocus\n                                >\n                                    Yes, delete it\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Box>\n                ) : (\n                    <Box mr={1} mb={1}>\n                        <Button\n                            loading={loading}\n                            onClick={handleLeave}\n                            color=\"error\"\n                            variant=\"contained\"\n                        >\n                            Leave team\n                        </Button>\n                    </Box>\n                )}\n            </Box>\n        </Box>\n    )\n}\n","import React from 'react'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Box } from '@material-ui/core'\nimport * as AuthSelectors from 'redux/auth/selectors'\n\nimport PageHeader from 'components/generic/PageHeader'\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as UserSelectors from 'redux/user/selectors'\nimport TeamsService from 'services/teams'\n\nimport JoinTeam from './JoinTeam'\nimport EditTeam from './EditTeam'\n\nimport { useTranslation } from 'react-i18next'\n\nexport default () => {\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const event = useSelector(DashboardSelectors.event)\n    const hasTeam = useSelector(DashboardSelectors.hasTeam)\n    const team = useSelector(DashboardSelectors.team)\n    const teamLoading = useSelector(DashboardSelectors.teamLoading)\n    const eventLoading = useSelector(DashboardSelectors.eventLoading)\n    const teams = useSelector(DashboardSelectors.teams)\n    console.log(userProfile)\n\n    useEffect(() => {\n        console.log('useEffect')\n        dispatch(DashboardActions.getTeams(event.slug))\n        // console.log(user.sub)\n        // const response = TeamsService.getTeams(user.sub, event.slug)\n        // console.log(response)\n    }, [dispatch, event.slug, team])\n\n    const loading = teamLoading || eventLoading\n\n    const renderAddButton = () => {\n        if (user && userProfile) {\n            // if (userProfile.role === 'Advisor') {\n            if (user.roles.includes('Advisor')) {\n                return (\n                    <div>\n                        {/* <EditTeam /> */}\n                        <JoinTeam />\n                    </div>\n                )\n            } else {\n                console.log('else')\n                if (hasTeam) {\n                    return <EditTeam team={team} />\n                } else {\n                    return <JoinTeam />\n                }\n            }\n        }\n    }\n\n    return (\n        <Box>\n            <PageHeader\n                heading=\"Team\"\n                subheading={\n                    loading\n                        ? ''\n                        : t('Team_configure_', {\n                              event: event.name,\n                          })\n                }\n            />\n            <Box mt={2} />\n            <PageWrapper loading={loading}>{renderAddButton()}</PageWrapper>\n            {userProfile && userProfile.role === 'Advisor' && (\n                <div>\n                    <h1 className=\"text-lg font-bold\">Teams</h1>\n\n                    {teams && teams.length > 0 ? (\n                        teams.map(team => {\n                            console.log(team)\n                            return (\n                                <div className=\"mb-8\">\n                                    <EditTeam team={team} />\n                                </div>\n                            )\n                        })\n                    ) : (\n                        <p>No teams</p>\n                    )}\n                </div>\n            )}\n        </Box>\n    )\n}\n","import React, { useState } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Grid, Box, MobileStepper, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableViews from 'react-swipeable-views'\n\nimport ImageUpload from 'components/inputs/ImageUpload'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        background: 'black',\n        padding: '1px',\n    },\n    block: {\n        background: 'gray',\n        position: 'relative',\n        paddingTop: '50%',\n    },\n}))\n\nexport default ({ value = [], onChange, maxImages = 5 }) => {\n    const event = useSelector(DashboardSelectors.event)\n\n    const classes = useStyles()\n    const uploadUrl = `/api/upload/events/${event.slug}/projects`\n\n    const getValue = index => {\n        if (value.length > index) {\n            return value[index]\n        }\n        return null\n    }\n\n    const handleChange = index => data => {\n        if (!data) {\n            const newValue = value.slice()\n            newValue.splice(index, 1)\n            onChange(newValue)\n        } else {\n            if (value.length > index) {\n                const newValue = value.slice()\n                newValue[index] = data\n                onChange(newValue)\n            } else {\n                const newValue = value.slice()\n                newValue.push(data)\n                onChange(newValue)\n                setActiveStep(newValue.length - 1)\n            }\n        }\n    }\n\n    const [activeStep, setActiveStep] = useState(0)\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1)\n    }\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1)\n    }\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <SwipeableViews\n                    axis={'x'}\n                    index={activeStep}\n                    onChangeIndex={setActiveStep}\n                    enableMouseEvents\n                >\n                    {Array.apply(null, Array(maxImages)).map((val, index) => (\n                        <Box className={classes.block}>\n                            <ImageUpload\n                                value={getValue(index)}\n                                resizeMode=\"cover\"\n                                uploadUrl={uploadUrl}\n                                onChange={handleChange(index)}\n                            />\n                        </Box>\n                    ))}\n                </SwipeableViews>\n            </Grid>\n            <Grid item xs={12}>\n                <MobileStepper\n                    variant=\"dots\"\n                    steps={maxImages}\n                    position=\"static\"\n                    activeStep={activeStep}\n                    className={classes.root}\n                    nextButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleNext}\n                            disabled={activeStep === maxImages - 1}\n                        >\n                            Next\n                        </Button>\n                    }\n                    backButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleBack}\n                            disabled={activeStep === 0}\n                        >\n                            Back\n                        </Button>\n                    }\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Grid, Box, MobileStepper, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableViews from 'react-swipeable-views'\n\nimport ImageUpload from 'components/inputs/DocumentUpload'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        background: 'black',\n        padding: '1px',\n    },\n    block: {\n        background: 'gray',\n        position: 'relative',\n        paddingTop: '50%',\n    },\n}))\n\nexport default ({ value = [], onChange, maxImages = 5 }) => {\n    const event = useSelector(DashboardSelectors.event)\n\n    const classes = useStyles()\n    const uploadUrl = `/api/upload/events/${event.slug}/projects/documents`\n\n    const getValue = index => {\n        if (value.length > index) {\n            return value[index]\n        }\n        return null\n    }\n\n    const handleChange = index => data => {\n        if (!data) {\n            const newValue = value.slice()\n            newValue.splice(index, 1)\n            onChange(newValue)\n        } else {\n            if (value.length > index) {\n                const newValue = value.slice()\n                newValue[index] = data\n                onChange(newValue)\n            } else {\n                const newValue = value.slice()\n                newValue.push(data)\n                onChange(newValue)\n                setActiveStep(newValue.length - 1)\n            }\n        }\n    }\n\n    const [activeStep, setActiveStep] = useState(0)\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1)\n    }\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1)\n    }\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <SwipeableViews\n                    axis={'x'}\n                    index={activeStep}\n                    onChangeIndex={setActiveStep}\n                    enableMouseEvents\n                >\n                    {Array.apply(null, Array(maxImages)).map((val, index) => (\n                        <Box className={classes.block}>\n                            <ImageUpload\n                                value={getValue(index)}\n                                resizeMode=\"cover\"\n                                uploadUrl={uploadUrl}\n                                onChange={handleChange(index)}\n                            />\n                        </Box>\n                    ))}\n                </SwipeableViews>\n            </Grid>\n            <Grid item xs={12}>\n                <MobileStepper\n                    variant=\"dots\"\n                    steps={maxImages}\n                    position=\"static\"\n                    activeStep={activeStep}\n                    className={classes.root}\n                    nextButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleNext}\n                            disabled={activeStep === maxImages - 1}\n                        >\n                            Next\n                        </Button>\n                    }\n                    backButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleBack}\n                            disabled={activeStep === 0}\n                        >\n                            Back\n                        </Button>\n                    }\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { Grid, Box, MobileStepper, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableViews from 'react-swipeable-views'\n\nimport ImageUpload from 'components/inputs/VideoUpload'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        background: 'black',\n        padding: '1px',\n    },\n    block: {\n        background: 'gray',\n        position: 'relative',\n        paddingTop: '50%',\n    },\n}))\n\nexport default ({ value = '', onChange, maxImages = 5 }) => {\n    const event = useSelector(DashboardSelectors.event)\n\n    const classes = useStyles()\n    const uploadUrl = `/api/upload/events/${event.slug}/projects/video`\n\n    const getValue = index => {\n        if (value.length > index) {\n            return value[index]\n        }\n        return null\n    }\n\n    // const handleChange = index => data => {\n    //     if (!data) {\n    //         const newValue = value.slice()\n    //         newValue.splice(index, 1)\n    //         onChange(newValue)\n    //     } else {\n    //         if (value.length > index) {\n    //             const newValue = value.slice()\n    //             newValue[index] = data\n    //             onChange(newValue)\n    //         } else {\n    //             const newValue = value.slice()\n    //             newValue.push(data)\n    //             onChange(newValue)\n    //             setActiveStep(newValue.length - 1)\n    //         }\n    //     }\n    // }\n\n    const [activeStep, setActiveStep] = useState(0)\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1)\n    }\n\n    const handleBack = () => {\n        setActiveStep(prevActiveStep => prevActiveStep - 1)\n    }\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                {/* <SwipeableViews\n                    axis={'x'}\n                    index={activeStep}\n                    onChangeIndex={setActiveStep}\n                    enableMouseEvents\n                >\n                    {Array.apply(null, Array(maxImages)).map((val, index) => ( */}\n                <Box className={classes.block}>\n                    <ImageUpload\n                        value={value}\n                        resizeMode=\"cover\"\n                        uploadUrl={uploadUrl}\n                        onChange={onChange}\n                    />\n                </Box>\n                {/* //     ))} */}\n                {/* // </SwipeableViews> */}\n            </Grid>\n            {/* <Grid item xs={12}>\n                <MobileStepper\n                    variant=\"dots\"\n                    steps={maxImages}\n                    position=\"static\"\n                    activeStep={activeStep}\n                    className={classes.root}\n                    nextButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleNext}\n                            disabled={activeStep === maxImages - 1}\n                        >\n                            Next\n                        </Button>\n                    }\n                    backButton={\n                        <Button\n                            size=\"small\"\n                            onClick={handleBack}\n                            disabled={activeStep === 0}\n                        >\n                            Back\n                        </Button>\n                    }\n                />\n            </Grid> */}\n        </Grid>\n    )\n}\n","import React, { useMemo, useState, useEffect } from 'react'\n\nimport * as yup from 'yup'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Formik, FastField } from 'formik'\nimport { ProjectSchema, EventTypes } from '@hackjunction/shared'\nimport {\n    Grid,\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button as MuiButton,\n} from '@material-ui/core'\nimport GradientBox from 'components/generic/GradientBox'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport FormControl from 'components/inputs/FormControl'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\nimport MarkdownInput from 'components/inputs/MarkdownInput'\nimport BooleanInput from 'components/inputs/BooleanInput'\nimport LocationInput from 'components/inputs/LocationInput'\n\nimport Select from 'components/inputs/Select'\nimport Button from 'components/generic/Button'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport ErrorsBox from 'components/generic/ErrorsBox'\nimport ProjectImages from './ProjectImages'\nimport ProjectStatusInput from 'components/inputs/ProjectStatusInput'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useTranslation } from 'react-i18next'\nimport ProjectDocuments from './ProjectDocuments'\nimport ProjectVideo from './ProjectVideo'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\nimport BottomBar from 'components/inputs/BottomBar'\n\nconst useStyles = makeStyles(theme => ({\n    uppercase: { 'text-transform': 'uppercase' },\n}))\n\nconst isStringURL = str => {\n    try {\n        new URL(str)\n        return true\n    } catch (_) {\n        return false\n    }\n}\n\n// TODO make the form labels and hints customizable\nconst SubmissionForm = props => {\n    const id = props.id\n    const handleProjectSelected = props.handleProjectSelected\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const idTokenData = useSelector(AuthSelectors.idTokenData)\n    const { t } = useTranslation()\n\n    const projects = useSelector(DashboardSelectors.projects)\n    const projectLoading = useSelector(DashboardSelectors.projectsLoading)\n\n    const [project, setProject] = useState(null)\n    const [projectStatus, setProjectStatus] = useState('')\n    const [locationModalOpen, setLocationModalOpen] = useState(false)\n    const [newLocation, setNewLocation] = useState('')\n    const [formikInstance, setFormikInstance] = useState(null)\n\n    useEffect(() => {\n        if (props.location) {\n            // set the new location on formik instance if it exists\n            if (formikInstance) {\n                formikInstance.setFieldValue('locationnew', props.location)\n            }\n        }\n    }, [props.location])\n\n    // Function to handle location change confirmation\n    const handleLocationChangeConfirm = () => {\n        if (formikInstance && newLocation) {\n            formikInstance.setFieldValue('locationnew', newLocation)\n            props.setLocation && props.setLocation(newLocation)\n            setLocationModalOpen(false)\n        }\n    }\n\n    // Function to handle location change cancellation\n    const handleLocationChangeCancel = () => {\n        setLocationModalOpen(false)\n    }\n\n    useEffect(() => {\n        if (projects && projects.length && id) {\n            const foundProject = projects.find(p => p._id === id)\n            setProject(foundProject)\n            setProjectStatus(foundProject.status)\n            console.log(project)\n        } else {\n            setProject(null)\n        }\n    }, [id, project, projects])\n\n    const returnTracknew = () => {\n        if (project) {\n            if (project.tracknew) {\n                return project.tracknew\n            } else {\n                return ''\n            }\n        }\n    }\n\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    const returnLocationnew = () => {\n        if (project) {\n            console.log('from return', project)\n            if (project.locationnew) {\n                return project.locationnew\n            }\n        }\n        // Return user's location from their profile if available\n        if (userProfile && userProfile.location) {\n            return userProfile.location\n        }\n        return ''\n    }\n\n    const initialValues = {\n        sourcePublic: true,\n        hiddenMembers: [],\n        track: 'Company',\n        tracknew: returnTracknew() || '',\n        locationnew: props.location || returnLocationnew() || '',\n        privacy:\n            !projectLoading && project\n                ? !project.hiddenMembers.includes(idTokenData.sub)\n                : true,\n        ...project,\n    }\n\n    // const trackOptions = useMemo(() => {\n    //     if (!event.tracksEnabled || !event.tracks) return null\n    //     return event.tracks.map(track => ({\n    //         label: track.name,\n    //         value: track.slug,\n    //     }))\n    // }, [event])\n    console.log(event.tracks)\n    let trackOptions = []\n    if (event) {\n        if (event.tracks) {\n            trackOptions = event.tracks.map(track => ({\n                label: track.name,\n                value: track.slug,\n            }))\n        }\n    }\n\n    // const trackOptions = [\n    //     {\n    //         label: 'Engineering',\n    //         value: 'Engineering',\n    //     },\n    //     {\n    //         label: 'Customer',\n    //         value: 'Customer',\n    //     },\n    //     {\n    //         label: 'Company',\n    //         value: 'Company',\n    //     },\n    // ]\n\n    const locationOptions = [\n        {\n            label: 'Americas',\n            value: 'Americas',\n        },\n        {\n            label: 'EMEA',\n            value: 'EMEA',\n        },\n        {\n            label: 'APAC',\n            value: 'India',\n        },\n    ]\n\n    const challengeOptions = useMemo(() => {\n        if (!event.challengesEnabled || !event.challenges) return null\n        return event.challenges.map(challenge => ({\n            label: `${challenge.name} (${challenge.partner})`,\n            value: challenge.slug,\n        }))\n    }, [event])\n\n    // const locationEnabled = useMemo(() => {\n    //     return event.eventType === EventTypes.physical.id\n    // }, [event])\n    const locationEnabled = true\n    const renderForm = formikProps => {\n        if (projectLoading) {\n            return <PageWrapper loading />\n        }\n        return (\n            <>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <GradientBox p={3} color=\"theme_white\">\n                            <Typography variant=\"overline\" gutterBottom>\n                                This projects status is:\n                            </Typography>\n                            <Typography\n                                variant=\"h4\"\n                                color={\n                                    projectStatus === 'final'\n                                        ? 'primary'\n                                        : 'error'\n                                }\n                                className={classes.uppercase}\n                                gutterBottom\n                            >\n                                {projectStatus}\n                            </Typography>\n                            <Typography variant=\"body1\">\n                                Remember to update the project status to final\n                                if you want this project to be graded!\n                            </Typography>\n                        </GradientBox>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"locationnew\"\n                            render={({ field, form }) => {\n                                return (\n                                    <FormControl\n                                        label=\"Location\"\n                                        hint=\"Select your location (Required)\"\n                                        touched={true}\n                                        error={form.errors[field.name]}\n                                    >\n                                        <Select\n                                            label=\"Location\"\n                                            options={locationOptions}\n                                            // value={field.value}\n                                            value={props.location}\n                                            onChange={value => {\n                                                // If the location is being changed and not the initial setup\n                                                if (\n                                                    field.value &&\n                                                    field.value !== value\n                                                ) {\n                                                    setNewLocation(value)\n                                                    setLocationModalOpen(true)\n                                                    setFormikInstance(form)\n                                                } else {\n                                                    // If it's the first time setting location or same value\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                    props.setLocation &&\n                                                        props.setLocation(value)\n                                                }\n                                            }}\n                                            onBlur={() =>\n                                                form.setFieldTouched(field.name)\n                                            }\n                                        />\n                                    </FormControl>\n                                )\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"name\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Name\"\n                                    hint=\"A catchy name for your project\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <TextInput\n                                        placeholder=\"Awesome-o 3000\"\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"images\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Images\"\n                                    hint=\"Upload up to 5 images of your project! Uploaded images will be cropped to 16:9 ratio, resize them as close as possible before upload for best results. Maximum size per image: 5MB, allowed formats: .png/.jpg.\"\n                                    touched={true}\n                                    error={form.errors[field.name]}\n                                >\n                                    <ProjectImages\n                                        value={field.value}\n                                        onChange={value => {\n                                            // check if the value is url\n                                            let finalValue = value\n\n                                            // if value is array of urls\n                                            if (Array.isArray(value)) {\n                                                finalValue = value.map(v => {\n                                                    if (isStringURL(v.url)) {\n                                                        const url = new URL(\n                                                            v.url,\n                                                        )\n                                                        return {\n                                                            ...v,\n                                                            url: url.toString(),\n                                                        }\n                                                    }\n                                                    return v\n                                                })\n                                            }\n\n                                            if (value && isStringURL(value)) {\n                                                const url = new URL(value)\n                                                finalValue = url.toString()\n                                            }\n\n                                            form.setFieldValue(\n                                                field.name,\n                                                finalValue,\n                                            )\n                                        }}\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"punchline\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Punchline\"\n                                    hint=\"A short and sweet description of what your project is about. Max 300 characters.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <TextAreaInput\n                                        placeholder=\"What problem does your project solve? How would you describe it in two sentences?\"\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"description\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Description\"\n                                    hint=\"All the juicy details about what you've made. Max 3000 characters.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <MarkdownInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                        placeholder={\n                                            \"Here's a few ideas:\\n\\n\" +\n                                            '- Describe the problem it solves\\n' +\n                                            '- What real-world impact it has\\n' +\n                                            '- What technologies you used to make it\\n' +\n                                            '- Future plans regarding the project\\n\\n' +\n                                            'Go wild!'\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"documents\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Additional documents\"\n                                    hint=\"Attach additional documents if any. Maximum size per document: 10MB, allowed formats: .pdf.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <ProjectDocuments\n                                        value={field.value}\n                                        onChange={value => {\n                                            let finalValue = value\n\n                                            // if value is array of urls\n                                            if (Array.isArray(value)) {\n                                                finalValue = value.map(v => {\n                                                    if (isStringURL(v.url)) {\n                                                        const url = new URL(\n                                                            v.url,\n                                                        )\n                                                        return {\n                                                            ...v,\n                                                            url: url.toString(),\n                                                        }\n                                                    }\n                                                    return v\n                                                })\n                                            }\n\n                                            if (value && isStringURL(value)) {\n                                                const url = new URL(value)\n                                                finalValue = url.toString()\n                                            }\n\n                                            form.setFieldValue(\n                                                field.name,\n                                                finalValue,\n                                            )\n                                        }}\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    {trackOptions && (\n                        <Grid item xs={12}>\n                            <FastField\n                                name=\"tracknew\"\n                                render={({ field, form }) => {\n                                    console.log(field, form)\n                                    return (\n                                        <FormControl\n                                            label=\"Select Category\"\n                                            hint=\"Choose the category you are participating with this project in.\"\n                                            touched={true}\n                                            error={form.errors[field.name]}\n                                        >\n                                            <Select\n                                                label=\"Select Category\"\n                                                options={trackOptions}\n                                                value={field.value}\n                                                onChange={value => {\n                                                    console.log(value)\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                    form.setFieldValue(\n                                                        'track',\n                                                        value,\n                                                    )\n                                                }}\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        </FormControl>\n                                    )\n                                }}\n                            />\n                        </Grid>\n                    )}\n                    {/* {challengeOptions && (\n                        <Grid item xs={12}>\n                            <FastField\n                                name=\"challenges\"\n                                render={({ field, form }) => (\n                                    <FormControl\n                                        label=\"Challenges\"\n                                        hint=\"Which partner challenges do you want to submit your project in? You can choose up to 5. Note: make sure you read the event guidelines about how many challenges you can set here!\"\n                                        touched={\n                                            form.touched[field.name] ||\n                                            formikProps.submitCount > 0\n                                        }\n                                        error={form.errors[field.name]}\n                                    >\n                                        <Select\n                                            label=\"Challenges\"\n                                            options={challengeOptions}\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                            onBlur={() =>\n                                                form.setFieldTouched(field.name)\n                                            }\n                                            isMulti\n                                        />\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                    )} */}\n                    {/* <Grid item xs={12}>\n                        <FastField\n                            name=\"technologies\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Technologies & Tools\"\n                                    hint=\"Add up to 5 technologies or tools you used to build this project\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <Select\n                                        label=\"Technologies & Tools\"\n                                        options=\"technology\"\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                        isMulti\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid> */}\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"video\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Project Video\"\n                                    hint=\"Add a video describing your project. Maximum size for: 100MB, allowed formats: .mp4.\n                                    The max length for the video is 4mins, it will be auto-trimmed if the video is longer than 4min.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <ProjectVideo\n                                        value={field.value}\n                                        onChange={value => {\n                                            // encode url\n                                            let finalValue = value\n\n                                            // if value is array of urls\n                                            if (Array.isArray(value)) {\n                                                finalValue = value.map(v => {\n                                                    if (isStringURL(v.url)) {\n                                                        const url = new URL(\n                                                            v.url,\n                                                        )\n                                                        return {\n                                                            ...v,\n                                                            url: url.toString(),\n                                                        }\n                                                    }\n                                                    return v\n                                                })\n                                            }\n\n                                            if (value && isStringURL(value)) {\n                                                const url = new URL(value)\n                                                finalValue = url.toString()\n                                            }\n\n                                            form.setFieldValue(\n                                                field.name,\n                                                finalValue,\n                                            )\n                                        }}\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"demo\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label={\n                                        event.demoLabel\n                                            ? event.demoLabel\n                                            : 'Demo URL or Coupon Code'\n                                    }\n                                    hint={\n                                        event.demoHint\n                                            ? event.demoHint\n                                            : 'Add the link of the working version of your project. Depending on the event, this could be a link to an API, a link to file or a presentation. Make sure the link is accessible for humans, as well as machines!'\n                                    }\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <TextInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                        placeholder={\n                                            event.demoPlaceholder\n                                                ? event.demoPlaceholder\n                                                : 'https://..'\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"source\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Source code\"\n                                    hint=\"A link to the repository containing your source code\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <TextInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                        placeholder=\"https://...\"\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"sourcePublic\"\n                            render={({ field, form }) => {\n                                //console.log('sourcePublic', field.value)\n                                return (\n                                    <FormControl\n                                        label=\"Source code public?\"\n                                        hint=\"We encourage everyone to show their source code to the public, so others can see how your awesome project was built.\"\n                                        touched={true}\n                                        error={form.errors[field.name]}\n                                    >\n                                        <BooleanInput\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                        />\n                                    </FormControl>\n                                )\n                            }}\n                        />\n                    </Grid>\n                    {/* {locationEnabled && (\n                        <Grid item xs={12}>\n                            <FastField\n                                name=\"locationnew\"\n                                render={({ field, form }) => (\n                                    <FormControl\n                                        label=\"Location\"\n                                        hint=\"Select Your Location\"\n                                        touched={\n                                            form.touched[field.name] ||\n                                            formikProps.submitCount > 0\n                                        }\n                                        error={form.errors[field.name]}\n                                    >\n                                        <Select\n                                            label=\"Location\"\n                                            options={locationOptions}\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                            onBlur={() =>\n                                                form.setFieldTouched(field.name)\n                                            }\n                                        />\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                    )} */}\n                    {/* <Grid item xs={12}>\n                        <Box\n                            style={{\n                                display: 'flex',\n                                alignItems: 'flex-start',\n                                alignContent: 'flex-start',\n                            }}\n                        >\n                            <FastField\n                                name=\"privacy\"\n                                render={({ field, form }) => (\n                                    <FormControl\n                                        label=\"Privacy\"\n                                        hint=\"I want to be credited for the project.\"\n                                        touched={\n                                            form.touched[field.name] ||\n                                            formikProps.submitCount > 0\n                                        }\n                                        error={form.errors[field.name]}\n                                    >\n                                        <BooleanInput\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                        />\n                                    </FormControl>\n                                )}\n                            />\n                        </Box>\n                    </Grid> */}\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"addOn\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Additional Information\"\n                                    hint=\"If you have any other information like link to a confluence page or any other information you want to share, please add it here.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <MarkdownInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                        placeholder={\n                                            'Link to a confluence page\\n' +\n                                            'Any other information you want to share\\n\\n'\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"status\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Final or draft\"\n                                    hint=\"If you're done with your project, you can mark it as final. If you're still working on it, you can mark it as draft. A draft project won't be eligible for scoring.\"\n                                    touched={\n                                        form.touched[field.name] ||\n                                        formikProps.submitCount > 0\n                                    }\n                                    error={form.errors[field.name]}\n                                >\n                                    <ProjectStatusInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n\n                    {Object.keys(formikProps.errors).length > 0 && (\n                        <Grid item xs={12}>\n                            <ErrorsBox errors={formikProps.errors} />\n                        </Grid>\n                    )}\n                    {console.log(formikProps.values.name)}\n                    {!(\n                        Object.keys(formikProps.errors).length > 0 ||\n                        formikProps.isSubmitting ||\n                        formikProps.values.name === undefined ||\n                        props.isSubmissionsUpcoming ||\n                        props.isSubmissionsPast\n                    ) && (\n                        <BottomBar\n                            onSubmit={formikProps.submitForm}\n                            errors={formikProps.errors}\n                            dirty={formikProps.dirty}\n                            loading={formikProps.isSubmitting}\n                        />\n                    )}\n                    <Grid item xs={12}>\n                        <Box margin=\"0 auto\" width=\"100%\" maxWidth=\"300px\">\n                            <Button\n                                onClick={() => {\n                                    formikProps.submitForm()\n                                    handleProjectSelected(undefined)\n                                }}\n                                disabled={\n                                    Object.keys(formikProps.errors).length >\n                                        0 ||\n                                    formikProps.isSubmitting ||\n                                    formikProps.values.name === undefined ||\n                                    props.isSubmissionsUpcoming ||\n                                    props.isSubmissionsPast\n                                }\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                            >\n                                {t('Save_changes_')}\n                            </Button>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </>\n        )\n    }\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            validationSchema={props => {\n                return yup.lazy(values => {\n                    return yup.object().shape(ProjectSchema(event))\n                })\n            }}\n            onSubmit={async (values, actions) => {\n                console.log(values)\n                actions.setSubmitting(true)\n                //console.log('values are!', values)\n                if (!values.privacy) {\n                    if (!values.hiddenMembers.includes(idTokenData.sub)) {\n                        values.hiddenMembers.push(idTokenData.sub)\n                    }\n                } else {\n                    const index = values.hiddenMembers.indexOf(idTokenData.sub)\n                    if (index !== -1) values.hiddenMembers.splice(index, 1)\n                }\n                //console.log('sending', values)\n                let res\n                try {\n                    if (project) {\n                        res = await dispatch(\n                            DashboardActions.editProject(event.slug, values),\n                        )\n                    } else {\n                        res = await dispatch(\n                            DashboardActions.createProject(event.slug, values),\n                        )\n                    }\n                } catch (e) {\n                    console.log('error', e)\n                    dispatch(\n                        SnackbarActions.error(\n                            'Oops, something went wrong. Please try again.',\n                        ),\n                    )\n                    actions.setSubmitting(false)\n                    return\n                }\n                if (res.error) {\n                    const message =\n                        res?.payload?.response?.data?.message ||\n                        'Oops, something went wrong...'\n                    dispatch(\n                        SnackbarActions.error(message, {\n                            autoHideDuration: 3000,\n                        }),\n                    )\n                } else {\n                    dispatch(\n                        SnackbarActions.success(\n                            'Success! Project submission updated',\n                        ),\n                    )\n                }\n                actions.setSubmitting(false)\n            }}\n        >\n            {formikProps => (\n                <>\n                    {renderForm(formikProps)}\n                    <Dialog\n                        open={locationModalOpen}\n                        onClose={handleLocationChangeCancel}\n                        aria-labelledby=\"location-change-dialog-title\"\n                        aria-describedby=\"location-change-dialog-description\"\n                    >\n                        <DialogTitle id=\"location-change-dialog-title\">\n                            Change Location?\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText id=\"location-change-dialog-description\">\n                                Warning: If you change your location, you will\n                                have to attend the judging for that location's\n                                region. Are you sure you want to change your\n                                location?\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <MuiButton\n                                onClick={handleLocationChangeCancel}\n                                style={{ textTransform: 'none' }}\n                            >\n                                Cancel\n                            </MuiButton>\n                            <MuiButton\n                                onClick={handleLocationChangeConfirm}\n                                color=\"primary\"\n                                variant=\"contained\"\n                                style={{ textTransform: 'none' }}\n                            >\n                                Confirm\n                            </MuiButton>\n                        </DialogActions>\n                    </Dialog>\n                </>\n            )}\n        </Formik>\n    )\n}\n\nexport default SubmissionForm\n","import React from 'react'\n\nimport {\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n} from '@material-ui/core'\n\nimport Button from 'components/generic/Button'\nimport { useDispatch } from 'react-redux'\nimport * as DashboardActions from 'redux/dashboard/actions'\n\nconst ProjectScoreModal = ({ open, onClose, score }) => {\n    const dispatch = useDispatch()\n\n    const handleRefresh = () => {\n        dispatch(DashboardActions.updateProjectScores(score.event.slug))\n    }\n    const NoScoreYet = props => {\n        return (\n            <Typography variant=\"h6\" align=\"center\">\n                You do not have a score for this project yet. Hold tight while\n                our robots do the work!\n            </Typography>\n        )\n    }\n    const EvaluatingScore = props => {\n        return (\n            <>\n                <Typography variant=\"h6\" align=\"center\">\n                    Great work so far! Your project is being evaluated right\n                    now.\n                </Typography>\n                <Box p={2} />\n                <Button\n                    onClick={() => handleRefresh()}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                >\n                    Refresh Score\n                </Button>\n            </>\n        )\n    }\n\n    const EvaluationSuccessful = props => {\n        return (\n            <>\n                <Typography variant=\"h6\" gutterBottom align=\"center\">\n                    Awesome, the result for your project is:\n                </Typography>\n                <Typography variant=\"h5\" gutterBottom>\n                    {score.score}/{score.maxScore}\n                </Typography>\n                <Typography variant=\"body1\">{score.message}</Typography>\n            </>\n        )\n    }\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>Project Score</DialogTitle>\n            <DialogContent>\n                <Box\n                    p={5}\n                    display=\"flex\"\n                    height=\"100%\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                >\n                    {!score && <NoScoreYet />}\n                    {score && score.status === 'evaluating' && (\n                        <EvaluatingScore />\n                    )}\n                    {score && score.status === 'evaluated' && (\n                        <EvaluationSuccessful />\n                    )}\n                </Box>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default ProjectScoreModal\n","import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Paper, Typography, Chip, Box, Grid } from '@material-ui/core'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nimport ProjectScoreModal from 'components/modals/ProjectScoreModal'\nimport Button from 'components/generic/Button'\n\nexport default props => {\n    const event = useSelector(DashboardSelectors.event)\n    const projects = useSelector(DashboardSelectors.projects)\n    const projectScores = useSelector(DashboardSelectors.projectScores)\n\n    const projectSelectedCallback = props.projectSelectedCallback\n\n    const [selectedProjectScore, setSelectedProjectStore] = useState(null)\n    const [projectScoreModalOpen, setProjectScoreModalOpen] = useState(false)\n\n    const [challengeAndTrackSlugState, setChallengeAndTrackSlugState] =\n        useState({})\n\n    useEffect(() => {\n        let challengeAndTrackSlugToNameMap = {}\n        if (event && event.challenges) {\n            event.challenges.forEach(challenge => {\n                challengeAndTrackSlugToNameMap[challenge.slug] = challenge.name\n            })\n        }\n        if (event && event.tracks) {\n            event.tracks.forEach(\n                track =>\n                    (challengeAndTrackSlugToNameMap[track.slug] = track.name),\n            )\n        }\n        setChallengeAndTrackSlugState(challengeAndTrackSlugToNameMap)\n    }, [event])\n\n    useEffect(() => {\n        if (projectScoreModalOpen) {\n            setSelectedProjectStore(\n                projectScores.find(s => s._id === selectedProjectScore._id),\n            )\n        }\n    }, [projectScoreModalOpen, projectScores, selectedProjectScore])\n\n    // const showProjectScore = project => {\n    //     const score = projectScores.find(\n    //         score => score.project._id === project._id,\n    //     )\n    //     setSelectedProjectStore(score)\n    //     setProjectScoreModalOpen(true)\n    // }\n\n    // Checks whether there are more unique challenges that the competitor has not submitted\n    // a solution to yet.\n    // const canAddMoreSubmissions = () => {\n    //     if (event && event.challenges && projects) {\n    //         const challengesWithSubmittedProjects = [].concat.apply(\n    //             [],\n    //             projects.map(project => project.challenges),\n    //         )\n    //         return (\n    //             event.challenges.filter(\n    //                 challenge =>\n    //                     challengesWithSubmittedProjects.indexOf(\n    //                         challenge.slug,\n    //                     ) < 0,\n    //             ).length > 0\n    //         )\n    //     }\n    //     return false\n    // }\n    const ProjectCard = props => {\n        const project = props.project\n        return (\n            <Grid item xs={12} md={6}>\n                <Paper elevation={1}>\n                    <Box p={2}>\n                        <Typography variant=\"h4\" gutterBottom>\n                            {project.name}\n                        </Typography>\n\n                        <Box m={1} mb={2}>\n                            {project.track && (\n                                <Chip\n                                    color=\"primary\"\n                                    label={\n                                        challengeAndTrackSlugState[\n                                            project.track\n                                        ]\n                                    }\n                                    style={{ margin: '3px' }}\n                                ></Chip>\n                            )}\n                            {project.challenges &&\n                                project.challenges.map(challenge => (\n                                    <Chip\n                                        label={\n                                            challengeAndTrackSlugState[\n                                                challenge\n                                            ]\n                                        }\n                                        style={{ margin: '3px' }}\n                                        key={challenge}\n                                    />\n                                ))}\n                        </Box>\n                        <Button\n                            variant=\"contained\"\n                            color=\"theme_turquoise\"\n                            onClick={() => projectSelectedCallback(project._id)}\n                            style={{ marginRight: '6px' }}\n                        >\n                            Edit Submission\n                        </Button>\n                        {/*<Button\n                            variant=\"contained\"\n                            color=\"theme_orange\"\n                            onClick={() => showProjectScore(project)}\n                        >\n                            View Score\n                        </Button>*/}\n                    </Box>\n                </Paper>\n            </Grid>\n        )\n    }\n    return (\n        <Grid container spacing={1}>\n            {projects &&\n                projects.map(project => (\n                    <ProjectCard key={project._id} project={project} />\n                ))}\n            {\n                /* TODO revork in settings canAddMoreSubmissions()*/ true && (\n                    <Grid item xs={12} md={6}>\n                        <Paper elevation={3}>\n                            <Box\n                                p={4}\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                flexDirection=\"column\"\n                            >\n                                <Typography\n                                    variant=\"body1\"\n                                    align=\"center\"\n                                    gutterBottom\n                                >\n                                    This event allows multiple submissions! Add\n                                    a new one now!\n                                </Typography>\n                                <Box p={1} />\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() =>\n                                        projectSelectedCallback(null)\n                                    }\n                                >\n                                    Add submission\n                                </Button>\n                            </Box>\n                        </Paper>\n                    </Grid>\n                )\n            }\n\n            <ProjectScoreModal\n                score={selectedProjectScore}\n                open={projectScoreModalOpen}\n                onClose={() => setProjectScoreModalOpen(false)}\n            />\n        </Grid>\n    )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport moment from 'moment-timezone'\nimport { push } from 'connected-react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Typography, Box } from '@material-ui/core'\nimport Countdown from 'react-countdown-now'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport PageHeader from 'components/generic/PageHeader'\nimport GradientBox from 'components/generic/GradientBox'\nimport Button from 'components/generic/Button'\nimport SubmissionForm from './SubmissionForm'\nimport ProjectsList from './ProjectsList'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\nimport {\n    EventHelpers,\n    // RegistrationTravelGrantStatuses as TravelGrantStatuses\n} from '@hackjunction/shared'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const teamLoading = useSelector(DashboardSelectors.teamLoading)\n    const isTeamValid = useSelector(DashboardSelectors.isTeamValid)\n    const hasTeam = useSelector(DashboardSelectors.hasTeam)\n\n    const projects = useSelector(DashboardSelectors.projects)\n\n    const [selectedProjectId, setSelectedProjectId] = useState(undefined)\n    const [showSubmissionForm, setShowSubmissionForm] = useState(false)\n    const [showProjectSelector, setShowProjectSelector] = useState(false)\n\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    const [submissionsStartTimeAlias, setSubmissionsStartTimeAlias] = useState(\n        'submissionsStartTime',\n    )\n    const [submissionsEndTimeAlias, setSubmissionsEndTimeAlias] =\n        useState('submissionsEndTime')\n\n    const [isSubmissionsUpcoming, setIsSubmissionsUpcoming] = useState(false)\n    const [isSubmissionsPast, setIsSubmissionsPast] = useState(false)\n    const [location, setLocation] = useState('')\n    const [isFirstLoad, setIsFirstLoad] = useState(true)\n\n    useEffect(() => {\n        if (location && event) {\n            setSubmissionsStartTimeAlias(\n                concatAndCapitalize('submissionsStartTime', location),\n            )\n            setSubmissionsEndTimeAlias(\n                concatAndCapitalize('submissionsEndTime', location),\n            )\n            setIsSubmissionsUpcoming(\n                EventHelpers.isSubmissionsUpcoming(event, moment, location),\n            )\n            console.log(\n                EventHelpers.isSubmissionsPast(event, moment, location),\n                'location past',\n                location,\n            )\n            setIsSubmissionsPast(\n                EventHelpers.isSubmissionsPast(event, moment, location),\n            )\n        }\n    }, [location, event])\n\n    // Set location from user profile on first load\n    useEffect(() => {\n        if (isFirstLoad && userProfile && userProfile.location && !location) {\n            setLocation(userProfile.location)\n            setIsFirstLoad(false)\n        }\n    }, [userProfile, isFirstLoad, location])\n\n    // if (userProfile && userProfile.location) {\n    //     submissionsStartTimeAlias = concatAndCapitalize(\n    //         'submissionsStartTime',\n    //         userProfile.location,\n    //     )\n    //     submissionsEndTimeAlias = concatAndCapitalize(\n    //         'submissionsEndTime',\n    //         userProfile.location,\n    //     )\n    // }\n\n    useEffect(() => {\n        if (projects && event) {\n            if (event.allowProjectSubmissionsPerChallenge) {\n                setShowProjectSelector(true)\n            } else {\n                setShowSubmissionForm(true)\n                if (projects.length) handleProjectSelected(projects[0]._id)\n            }\n            if (projects.length !== 0) {\n                // Project location takes precedence over user profile location\n                if (projects[0].locationnew) {\n                    setLocation(projects[0].locationnew)\n                }\n            }\n        }\n        // Mark first load as complete once projects are loaded\n        if (projects && isFirstLoad) {\n            setIsFirstLoad(false)\n        }\n    }, [projects, event, isFirstLoad])\n\n    const handleProjectSelected = id => {\n        setSelectedProjectId(id)\n        setShowSubmissionForm(id !== undefined)\n    }\n\n    if (!event || teamLoading) {\n        return <PageWrapper loading />\n    }\n\n    const renderContent = () => {\n        if (!hasTeam) {\n            return (\n                <GradientBox p={3} color=\"theme_orange\">\n                    <Typography variant=\"h4\" gutterBottom>\n                        No team\n                    </Typography>\n                    <Typography variant=\"body1\" gutterBottom>\n                        You need to join or create a team to submit a project!\n                        If you're participating alone, just create a team where\n                        you are the only member and come back here.\n                    </Typography>\n                    <Button\n                        color=\"theme_white\"\n                        variant=\"containedGrey\"\n                        onClick={() =>\n                            dispatch(push(`/dashboard/${event.slug}/team`))\n                        }\n                    >\n                        Create or join a team\n                    </Button>\n                </GradientBox>\n            )\n        }\n\n        // if (!isTeamValid) {\n        //     return (\n        //         <GradientBox p={3} color=\"theme_orange\">\n        //             <Typography variant=\"h4\" gutterBottom>\n        //                 Invalid team\n        //             </Typography>\n        //             <Typography variant=\"body1\" gutterBottom>\n        //                 Looks like not everyone in your team has checked in to\n        //                 the event! Before submitting your project, all of the\n        //                 members in your team must have checked in to the event.\n        //                 If your team still contains members who are not\n        //                 participating at the event, please have the team owner\n        //                 remove them from the team and then come back here.\n        //             </Typography>\n        //             <Button\n        //                 color=\"theme_white\"\n        //                 variant=\"contained\"\n        //                 onClick={() =>\n        //                     dispatch(push(`/dashboard/${event.slug}/team`))\n        //                 }\n        //             >\n        //                 Edit your team\n        //             </Button>\n        //         </GradientBox>\n        //     )\n        // }\n\n        if (isSubmissionsUpcoming) {\n            return (\n                <div>\n                    <GradientBox p={3} color=\"theme_white\">\n                        <Typography variant=\"overline\" gutterBottom>\n                            Submissions not yet open\n                        </Typography>\n                        <Typography variant=\"h4\" color=\"primary\" gutterBottom>\n                            Submissions open{' '}\n                            {moment(event[submissionsStartTimeAlias]).format(\n                                'dddd MMM Do, hhA',\n                            )}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            You can't submit your project yet - hang tight and\n                            come back here once the submission period has\n                            opened!\n                        </Typography>\n                    </GradientBox>\n                    {showSubmissionForm && (\n                        <SubmissionForm\n                            id={selectedProjectId}\n                            handleProjectSelected={handleProjectSelected}\n                            setLocation={setLocation}\n                            location={location}\n                            isSubmissionsUpcoming={isSubmissionsUpcoming}\n                        />\n                    )}\n                </div>\n            )\n        }\n\n        return (\n            <>\n                <GradientBox p={3} color=\"theme_white\">\n                    <Countdown\n                        date={event[submissionsEndTimeAlias]}\n                        renderer={args => {\n                            const { completed } = args\n                            const { days, hours, minutes, seconds } =\n                                args.formatted\n\n                            // Calculate weeks from days\n                            const weeks = Math.floor(parseInt(days) / 7)\n                            const remainingDays = parseInt(days) % 7\n\n                            if (!completed) {\n                                return (\n                                    <>\n                                        <Typography\n                                            variant=\"overline\"\n                                            gutterBottom\n                                        >\n                                            Submissions open\n                                        </Typography>\n                                        <Typography\n                                            variant=\"h4\"\n                                            color=\"secondary\"\n                                            gutterBottom\n                                        >\n                                            Submissions close in{' '}\n                                            {weeks > 0 ? `${weeks}w ` : ''}\n                                            {remainingDays > 0\n                                                ? `${remainingDays}d `\n                                                : ''}\n                                            {hours.padStart(2, '0')}:\n                                            {minutes.padStart(2, '0')}:\n                                            {seconds.padStart(2, '0')}\n                                        </Typography>\n                                        <Typography variant=\"body1\">\n                                            The submission period is open -\n                                            remember to submit your project\n                                            before the deadline! Late\n                                            submissions will not be accepted.\n                                        </Typography>\n                                    </>\n                                )\n                            } else {\n                                return (\n                                    <>\n                                        <Typography\n                                            variant=\"overline\"\n                                            gutterBottom\n                                        >\n                                            Submissions closed\n                                        </Typography>\n                                        <Typography\n                                            variant=\"h4\"\n                                            color=\"error\"\n                                            gutterBottom\n                                        >\n                                            The submission period is over\n                                        </Typography>\n                                        <Typography variant=\"body1\">\n                                            Alright, that's it! The submission\n                                            period is now over and you can no\n                                            longer make edits to your project.\n                                            {/* You can, however, still change some\n                                            important details such as your table\n                                            number to make sure people find your\n                                            project - please make sure that it's\n                                            always correct and up-to-date! */}\n                                        </Typography>\n                                    </>\n                                )\n                            }\n                        }}\n                    />\n                </GradientBox>\n                <Box p={1} />\n\n                {showProjectSelector && (\n                    <>\n                        {selectedProjectId === undefined && (\n                            <ProjectsList\n                                projectSelectedCallback={id =>\n                                    handleProjectSelected(id)\n                                }\n                            />\n                        )}\n                        {selectedProjectId !== undefined && (\n                            <Box my={2}>\n                                <Button\n                                    color=\"theme_orange\"\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        handleProjectSelected(undefined)\n                                    }\n                                >\n                                    Back to Projects\n                                </Button>\n                            </Box>\n                        )}\n                    </>\n                )}\n                <Box p={1} />\n                {showSubmissionForm && (\n                    <SubmissionForm\n                        id={selectedProjectId}\n                        handleProjectSelected={handleProjectSelected}\n                        setLocation={setLocation}\n                        location={location}\n                        isSubmissionsUpcoming={isSubmissionsUpcoming}\n                        isSubmissionsPast={isSubmissionsPast}\n                    />\n                )}\n            </>\n        )\n    }\n\n    return (\n        <Box>\n            <PageHeader\n                heading=\"Project submission\"\n                subheading={`Here's where you submit your project for ${\n                    event.name\n                }. As soon as you have a general idea of what you're building, please make a draft submission here - you'll be able to make edits to it until the final submission deadline on ${moment(\n                    event[submissionsEndTimeAlias],\n                ).format(\n                    'LLLL',\n                )}. All of the members in your team can edit your team's project submission.`}\n            />\n            {renderContent()}\n        </Box>\n    )\n}\n","import React, { useCallback, useState, useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Box, Typography } from '@material-ui/core'\nimport Countdown from 'react-countdown-now'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport PageHeader from 'components/generic/PageHeader'\nimport Markdown from 'components/generic/Markdown'\nimport Button from 'components/generic/Button'\n\n//import instructionsPhysical from './instructions-physical.md'\nimport instructionsOnline from './instructions-online.md'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [instructions, setInstructions] = useState('')\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    let reviewingStartTimeAlias = 'reviewingStartTime'\n    let reviewingEndTimeAlias = 'reviewingEndTime'\n\n    if (userProfile.location) {\n        reviewingStartTimeAlias = concatAndCapitalize(\n            'reviewingStartTime',\n            userProfile.location,\n        )\n        reviewingEndTimeAlias = concatAndCapitalize(\n            'reviewingEndTime',\n            userProfile.location,\n        )\n    }\n\n    useEffect(() => {\n        // const path =\n        //     event.eventType === 'physical'\n        //         ? instructionsPhysical\n        //         : instructionsOnline\n        const path = instructionsOnline\n        fetch(path)\n            .then(response => response.text())\n            .then(text => {\n                setInstructions(text)\n            })\n    }, [event.eventType])\n\n    const handleBegin = useCallback(async () => {\n        setLoading(true)\n        const error = await dispatch(DashboardActions.beginVoting(event.slug))\n        if (error) {\n            dispatch(SnackbarActions.error('Oops, something went wrong...'))\n        }\n        setLoading(false)\n    }, [dispatch, event.slug])\n\n    return (\n        <Box>\n            <PageHeader heading=\"Reviewing\" />\n            <Markdown source={instructions} />\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                <Countdown\n                    daysInHours\n                    date={event[reviewingStartTimeAlias]}\n                    renderer={({ formatted, completed }) => {\n                        if (completed) {\n                            return (\n                                <Countdown\n                                    daysInHours\n                                    date={event[reviewingEndTimeAlias]}\n                                    renderer={({ formatted, completed }) => {\n                                        if (!completed) {\n                                            return (\n                                                <>\n                                                    <Typography\n                                                        variant=\"subtitle1\"\n                                                        style={{\n                                                            fontWeight: 'bold',\n                                                        }}\n                                                        gutterBottom\n                                                    >\n                                                        The reviewing period is\n                                                        open! Time left:{' '}\n                                                        {formatted.hours}:\n                                                        {formatted.minutes}:\n                                                        {formatted.seconds}\n                                                    </Typography>\n                                                    <Button\n                                                        onClick={handleBegin}\n                                                        color=\"theme_turquoise\"\n                                                        variant=\"contained\"\n                                                        loading={loading}\n                                                    >\n                                                        Start reviewing\n                                                    </Button>\n                                                </>\n                                            )\n                                        } else {\n                                            return (\n                                                <Typography\n                                                    variant=\"subtitle1\"\n                                                    style={{\n                                                        fontWeight: 'bold',\n                                                    }}\n                                                    gutterBottom\n                                                >\n                                                    The reviewing period is\n                                                    over! Thanks for\n                                                    participating!\n                                                </Typography>\n                                            )\n                                        }\n                                    }}\n                                />\n                            )\n                        } else {\n                            return (\n                                <>\n                                    <Typography\n                                        variant=\"subtitle1\"\n                                        style={{ fontWeight: 'bold' }}\n                                    >\n                                        The reviewing period begins in{' '}\n                                        {formatted.hours}:{formatted.minutes}:\n                                        {formatted.seconds}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"body1\"\n                                        paragraph\n                                        gutterBottom\n                                    >\n                                        Come back here then!\n                                    </Typography>\n                                </>\n                            )\n                        }\n                    }}\n                />\n            </Box>\n        </Box>\n    )\n}\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    Grid,\n    Typography,\n    CircularProgress,\n    Box,\n    Dialog,\n} from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport ProjectsGridItem from 'components/projects/ProjectsGridItem'\nimport Button from 'components/generic/Button'\nimport Markdown from 'components/generic/Markdown'\nimport ProjectDetail from 'components/projects/ProjectDetail'\n\nimport GavelService from 'services/reviewing/gavel'\n\nexport default ({ projectId }) => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [project, setProject] = useState()\n    const [selected, setSelected] = useState()\n    const { t } = useTranslation()\n\n    const fetchProject = useCallback(async () => {\n        setLoading(true)\n        try {\n            const data = await GavelService.getProjectDetails(\n                idToken,\n                projectId,\n            )\n            setProject(data)\n        } catch (err) {\n            dispatch(\n                SnackbarActions.error(\n                    'Oops, something went wrong... Please reload the page',\n                ),\n            )\n            setError(true)\n        }\n        setLoading(false)\n    }, [idToken, projectId, dispatch])\n\n    const handleDone = useCallback(() => {\n        setLoading(true)\n        try {\n            dispatch(DashboardActions.setFirstProjectSeen(event.slug))\n        } catch (err) {\n            dispatch(\n                SnackbarActions.error(\n                    'Oops, something went wrong... Please reload the page',\n                ),\n            )\n        }\n    }, [dispatch, event.slug])\n\n    useEffect(() => {\n        fetchProject()\n    }, [fetchProject])\n\n    const renderCard = () => {\n        if (loading) {\n            return (\n                <Box\n                    p={3}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <CircularProgress />\n                </Box>\n            )\n        }\n\n        if (error || !project) {\n            return (\n                <Box p={3} display=\"flex\" flexDirection=\"column\" alignItems>\n                    <Typography variant=\"subtitle1\" textAlign=\"center\">\n                        Oops, something went wrong... Please refresh the page to\n                        try again\n                    </Typography>\n                </Box>\n            )\n        }\n\n        return (\n            <Grid container spacing={3} direction=\"column\" alignItems=\"center\">\n                <ProjectsGridItem\n                    project={project.project}\n                    event={event}\n                    showTableLocation={true}\n                    onClickMore={() => setSelected(project.project)}\n                />\n                <Grid item xs={12}>\n                    <Button\n                        onClick={handleDone}\n                        color=\"theme_turquoise\"\n                        variant=\"contained\"\n                    >\n                        Done\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                    <Typography align=\"center\" variant=\"h4\" gutterBottom>\n                        {t('Gavel_first_project_title_')}\n                    </Typography>\n                    <Markdown\n                        source={\n                            event.eventType === 'physical'\n                                ? t('Gavel_first_project_physical_')\n                                : t('Gavel_first_project_online_')\n                        }\n                    />\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                {renderCard()}\n            </Grid>\n            <Dialog\n                transitionDuration={0}\n                fullScreen\n                open={Boolean(selected)}\n                onClose={() => setSelected()}\n            >\n                <ProjectDetail\n                    project={selected}\n                    event={event}\n                    onBack={() => setSelected()}\n                    showTableLocation={false}\n                />\n            </Dialog>\n        </Grid>\n    )\n}\n","import React from 'react'\nimport moment from 'moment-timezone'\nimport Countdown from 'react-countdown-now'\nimport { Typography } from '@material-ui/core'\n\nexport default ({ annotator, children }) => {\n    return (\n        <Countdown\n            date={moment(annotator.updatedAt).add(45, 'seconds').toDate()}\n            renderer={({ completed, minutes, seconds }) => {\n                if (!completed) {\n                    return (\n                        <Typography variant=\"subtitle1\" align=\"center\">\n                            You can submit a vote in {seconds} seconds.\n                        </Typography>\n                    )\n                } else {\n                    return children\n                }\n            }}\n        />\n    )\n}\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    Grid,\n    Typography,\n    CircularProgress,\n    Box,\n    Dialog,\n} from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport ProjectsGridItem from 'components/projects/ProjectsGridItem'\nimport Button from 'components/generic/Button'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Markdown from 'components/generic/Markdown'\nimport ProjectDetail from 'components/projects/ProjectDetail'\nimport VoteTimer from './VoteTimer'\n\nimport GavelService from 'services/reviewing/gavel'\n\nexport default ({ annotator, prevId, nextId, isFirstChoice }) => {\n    const dispatch = useDispatch()\n    const event = useSelector(DashboardSelectors.event)\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [projects, setProjects] = useState()\n    const [confirmOpen, setConfirmOpen] = useState(false)\n    const [selected, setSelected] = useState(false)\n    const { t } = useTranslation()\n\n    const fetchProjects = useCallback(async () => {\n        setLoading(true)\n        try {\n            const [prev, next] = await Promise.all([\n                GavelService.getProjectDetails(idToken, prevId),\n                GavelService.getProjectDetails(idToken, nextId),\n            ])\n            setProjects({ prev, next })\n        } catch (err) {\n            dispatch(\n                SnackbarActions.error(\n                    'Oops, something went wrong... Please reload the page',\n                ),\n            )\n\n            setError(true)\n        }\n        setLoading(false)\n    }, [idToken, prevId, nextId, dispatch])\n\n    useEffect(() => {\n        fetchProjects()\n    }, [fetchProjects])\n\n    const handlePrevVote = useCallback(() => {\n        setLoading(true)\n        try {\n            dispatch(DashboardActions.submitVote(event.slug, prevId))\n        } catch (err) {\n            dispatch('Something went wrong... Please try again')\n        }\n    }, [dispatch, event.slug, prevId])\n\n    const handleNextVote = useCallback(() => {\n        setLoading(true)\n        try {\n            dispatch(DashboardActions.submitVote(event.slug, nextId))\n        } catch (err) {\n            dispatch('Something went wrong... Please try again')\n        }\n    }, [dispatch, event.slug, nextId])\n\n    const handleSkip = useCallback(() => {\n        setLoading(true)\n        try {\n            dispatch(DashboardActions.skipProject(event.slug))\n        } catch (err) {\n            dispatch('Something went wrong... Please try again')\n        }\n    }, [dispatch, event.slug])\n\n    const renderTop = () => {\n        if (isFirstChoice) {\n            return (\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                    <Typography align=\"center\" variant=\"h4\" gutterBottom>\n                        {t('Gavel_vote_')}\n                    </Typography>\n                    <Markdown\n                        source={\n                            event.eventType === 'physical'\n                                ? t('Gavel_compare_projects_physical_')\n                                : t('Gavel_compare_projects_online_')\n                        }\n                    />\n                </Box>\n            )\n        } else {\n            return (\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                    <Typography align=\"center\" variant=\"h4\" gutterBottom>\n                        {t('Gavel_next_')}\n                    </Typography>\n                    <Typography\n                        align=\"center\"\n                        variant=\"body1\"\n                        style={{ fontWeight: 'bold' }}\n                        gutterBottom\n                    >\n                        {t('Gavel_vote_count_')}{' '}\n                        {annotator.ignore.length - annotator.skipped.length - 1}\n                    </Typography>\n                    <Markdown\n                        source={\n                            event.eventType === 'physical'\n                                ? t('Gavel_compare_projects_physical2_')\n                                : t('Gavel_compare_projects_online2_')\n                        }\n                    />\n                </Box>\n            )\n        }\n    }\n\n    const renderCard = () => {\n        if (loading) {\n            return (\n                <Box\n                    p={3}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <CircularProgress />\n                </Box>\n            )\n        }\n\n        if (error || !projects) {\n            return (\n                <Box p={3} display=\"flex\" flexDirection=\"column\" alignItems>\n                    <Typography variant=\"subtitle1\" textAlign=\"center\">\n                        Oops, something went wrong... Please refresh the page to\n                        try again\n                    </Typography>\n                </Box>\n            )\n        }\n\n        return (\n            <Grid container spacing={3} direction=\"row\" justify=\"center\">\n                <ProjectsGridItem\n                    project={projects.prev.project}\n                    event={event}\n                    showTableLocation={true}\n                    label=\"Previous\"\n                    labelBackground=\"theme_turquoise\"\n                    onClickMore={() => setSelected(projects.prev.project)}\n                />\n                <ProjectsGridItem\n                    project={projects.next.project}\n                    event={event}\n                    showTableLocation={true}\n                    label=\"Current\"\n                    labelBackground=\"theme_success\"\n                    onClickMore={() => setSelected(projects.next.project)}\n                />\n                <Grid item xs={12} md={8}>\n                    <VoteTimer annotator={annotator}>\n                        <Grid container spacing={3} direction=\"row\">\n                            <Grid item xs={6}>\n                                <Button\n                                    onClick={handlePrevVote}\n                                    color=\"theme_turquoise\"\n                                    variant=\"contained\"\n                                    fullWidth\n                                >\n                                    {t('Previous_')}\n                                </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button\n                                    onClick={handleNextVote}\n                                    color=\"theme_success\"\n                                    variant=\"contained\"\n                                    fullWidth\n                                >\n                                    {t('Current_')}\n                                </Button>\n                            </Grid>\n                            {/* commented out for Junction 2021\n                            {event.eventType === 'physical' && (\n                                <Grid item xs={12}>\n                                    <Box\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                        textAlign=\"center\"\n                                    >\n                                        <Button\n                                            onClick={() => setConfirmOpen(true)}\n                                            color=\"theme_lightgray\"\n                                            variant=\"outlined\"\n                                        >\n                                            I can't find{' '}\n                                            {projects.next.project.name}\n                                        </Button>\n                                    </Box>\n                                </Grid>\n                            )} */}\n                        </Grid>\n                    </VoteTimer>\n                </Grid>\n                <ConfirmDialog\n                    open={confirmOpen}\n                    onClose={() => setConfirmOpen(false)}\n                    onCancel={() => {}}\n                    onOk={handleSkip}\n                    title=\"Are you sure?\"\n                    message=\"Have you looked around carefully for the project? Try to check nearby tables if you can find the team there. If you really can't find them, you can skip the project.\"\n                    cancelText=\"Cancel\"\n                    okText=\"OK\"\n                />\n                <Dialog\n                    transitionDuration={0}\n                    fullScreen\n                    open={Boolean(selected)}\n                    onClose={() => setSelected()}\n                >\n                    <ProjectDetail\n                        project={selected}\n                        event={event}\n                        onBack={() => setSelected()}\n                        showTableLocation={false}\n                    />\n                </Dialog>\n            </Grid>\n        )\n    }\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                {renderTop()}\n            </Grid>\n            <Grid item xs={12}>\n                {renderCard()}\n            </Grid>\n            <Grid item xs={12}></Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    icon: {\n        color: theme.palette.primary.main,\n        fontSize: '80px',\n    },\n}))\n\nexport default () => {\n    const classes = useStyles()\n    return (\n        <Grid container spacing={3} direction=\"row\" justify=\"center\">\n            <Grid item xs={12} md={8}>\n                <Box\n                    p={3}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <Box\n                        width=\"100%\"\n                        maxWidth=\"400px\"\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                    >\n                        <CheckCircleOutlineIcon className={classes.icon} />\n                        <Typography variant=\"h4\" color=\"primary\" gutterBottom>\n                            That's it!\n                        </Typography>\n                        <Typography\n                            width=\"200px\"\n                            align=\"center\"\n                            variant=\"subtitle1\"\n                        >\n                            Wow, looks like you've reviewed all of the projects\n                            assigned to you! You're done here for now. Thanks a\n                            lot for being an active reviewer!\n                        </Typography>\n                    </Box>\n                </Box>\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied'\nimport { Grid, Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    icon: {\n        color: theme.palette.secondary.main,\n        fontSize: '80px',\n    },\n}))\n\nexport default () => {\n    const classes = useStyles()\n    return (\n        <Grid container spacing={3} direction=\"row\" justify=\"center\">\n            <Grid item xs={12} md={8}>\n                <Box\n                    p={3}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                >\n                    <Box\n                        width=\"100%\"\n                        maxWidth=\"400px\"\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                    >\n                        <SentimentVeryDissatisfiedIcon\n                            className={classes.icon}\n                        />\n                        <Typography variant=\"h4\" color=\"secondary\" gutterBottom>\n                            Disabled\n                        </Typography>\n                        <Typography\n                            width=\"200px\"\n                            align=\"center\"\n                            variant=\"subtitle1\"\n                        >\n                            Looks like our system has put your voting on hold\n                            for a bit - maybe you were submitting too many\n                            votes? If you think this has happened in error,\n                            please contact the nearest event organiser.\n                        </Typography>\n                    </Box>\n                </Box>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Typography } from '@material-ui/core'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport GradientBox from 'components/generic/GradientBox'\n\nimport Instructions from './Instructions'\nimport FirstProject from './FirstProject'\nimport CompareProjects from './CompareProjects'\nimport Complete from './Complete'\nimport Disabled from './Disabled'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const team = useSelector(DashboardSelectors.team)\n    const event = useSelector(DashboardSelectors.event)\n    const annotator = useSelector(DashboardSelectors.annotator)\n    const annotatorError = useSelector(DashboardSelectors.annotatorError)\n    const annotatorLoading = useSelector(DashboardSelectors.annotatorLoading)\n\n    useEffect(() => {\n        dispatch(DashboardActions.updateAnnotator(event.slug))\n    }, [event.slug, dispatch])\n\n    const renderContent = () => {\n        if (!team) {\n            return (\n                <GradientBox p={3} color=\"theme_orange\">\n                    <Typography variant=\"button\">Team status</Typography>\n                    <Typography variant=\"h4\">Not in a team</Typography>\n                    <Typography variant=\"body1\">\n                        You need to be in a team to participate in reviewing\n                    </Typography>\n                </GradientBox>\n            )\n        }\n\n        if (!annotator) {\n            return <Instructions />\n        }\n\n        if (!annotator.active) {\n            return <Disabled />\n        }\n\n        if (!annotator.prev && annotator.next) {\n            return <FirstProject projectId={annotator.next} />\n        }\n\n        if (annotator.prev && annotator.next) {\n            return (\n                <CompareProjects\n                    annotator={annotator}\n                    prevId={annotator.prev}\n                    nextId={annotator.next}\n                    isFirstChoice={annotator.ignore.length === 1}\n                />\n            )\n        }\n\n        return <Complete />\n    }\n\n    return (\n        <PageWrapper loading={annotatorLoading} error={annotatorError}>\n            {renderContent()}\n        </PageWrapper>\n    )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { Dialog, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport PageHeader from 'components/generic/PageHeader'\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport LoadingSpinner from 'components/loadingCircle'\nimport ProjectDetail from 'components/projects/ProjectDetail'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport ProjectsService from 'services/projects'\nimport Scoring from './Scoring'\nimport RenderContent from 'components/renderRatingContent'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n    const team = useSelector(DashboardSelectors.team)\n    const event = useSelector(DashboardSelectors.event)\n    const annotator = useSelector(DashboardSelectors.annotator)\n    const annotatorError = useSelector(DashboardSelectors.annotatorError)\n    const annotatorLoading = useSelector(DashboardSelectors.annotatorLoading)\n    const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const [selected, setSelected] = useState(false)\n    const [scores, setScores] = useState([])\n\n    const handleScoring = (projectId, score, feedback) => {\n        console.log(score)\n        dispatch(DashboardActions.giveScore(projectId, score, event.slug))\n        dispatch(DashboardActions.giveFeedback(projectId, feedback, event.slug))\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        // const noOfScores =\n        //     projectsByRating[projectId].usersThatScored.length + 1\n        // setScores(\n        //     scores.map(item => {\n        //         if (Object.keys(item)[0] === projectId) {\n        //             return {\n        //                 [projectId]:\n        //                     (score +\n        //                         projectsByRating.score * (noOfScores - 1)) /\n        //                     noOfScores,\n        //             }\n        //         }\n        //         return item\n        //     }),\n        // )\n    }\n\n    let staredProjects = []\n\n    useEffect(() => {\n        if (projectsByRating && user) {\n            projectsByRating.map(project => {\n                // @ts-ignore\n                if (user.sub) {\n                    // @ts-ignore\n                    if (project.usersThatRated.includes(user.sub)) {\n                        staredProjects.push(project)\n                    }\n                }\n            })\n        }\n        // if (projectsByRating) {\n        //     if (projectsByRating.length > 0) {\n        //         setScores(\n        //             projectsByRating.map(project => {\n        //                 return {\n        //                     [project._id]: project.score,\n        //                 }\n        //             }),\n        //         )\n        //     }\n        // }\n    }, [projectsByRating, staredProjects, user])\n\n    console.log('project rating', projectsByRating, user)\n\n    useEffect(() => {\n        console.log('from here', event.slug)\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        dispatch(DashboardActions.updateAnnotator(event.slug))\n    }, [event.slug, dispatch])\n\n    return (\n        <PageWrapper loading={annotatorLoading} error={annotatorError}>\n            <PageHeader heading=\"Rating\" />\n            <RenderContent\n                ranked={false}\n                event={event}\n                projectsByRating={projectsByRating}\n                scores={scores}\n                setSelected={setSelected}\n                user={user}\n            />\n            <Dialog\n                transitionDuration={0}\n                fullScreen\n                open={Boolean(selected)}\n                onClose={() => setSelected(false)}\n            >\n                <ProjectDetail\n                    showFullTeam={true}\n                    project={selected}\n                    event={event}\n                    onBack={() => setSelected(false)}\n                    showTableLocation={false}\n                    handleScoring={handleScoring}\n                    scores={scores}\n                />\n            </Dialog>\n        </PageWrapper>\n    )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\n\nimport { Box, Dialog, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport LoadingSpinner from 'components/loadingCircle'\nimport ProjectDetail from 'components/projects/ProjectDetail'\nimport WinnerDisplay from 'components/winnerDisplay'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n\n    // const team = useSelector(DashboardSelectors.team)\n    const event = useSelector(DashboardSelectors.event)\n    const rankedProjects = useSelector(OrganiserSelectors.rankedProjects) || []\n    console.log(user, event, rankedProjects, 'from finalist/index.js')\n    // const rankedProjects = []\n    // const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const projectsByRating = []\n    const [selected, setSelected] = useState(false)\n    const [scores, setScores] = useState([])\n\n    const handleScoring = (projectId, score, feedback) => {\n        dispatch(DashboardActions.giveScore(projectId, score, event.slug))\n        dispatch(DashboardActions.giveFeedback(projectId, feedback, event.slug))\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n    }\n\n    useEffect(() => {\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        dispatch(OrganiserActions.getRankedProjects(event.slug))\n        dispatch(DashboardActions.updateAnnotator(event.slug))\n    }, [event.slug, dispatch])\n\n    const audienceChoiceProjects = useMemo(() => {\n        if (\n            !Array.isArray(projectsByRating) ||\n            !Array.isArray(rankedProjects)\n        ) {\n            return { winners: [], runnersUp: [] }\n        }\n\n        const sorted = [...projectsByRating].sort(\n            (a, b) => (b.rating || 0) - (a.rating || 0),\n        )\n\n        const rankedIds = new Set(rankedProjects.map(p => p._id))\n        const unranked = sorted.filter(p => !rankedIds.has(p._id))\n\n        const winners = []\n        const runnersUp = []\n\n        if (unranked.length === 0) return { winners, runnersUp }\n\n        const topRating = unranked[0].rating || 0\n        for (const p of unranked) {\n            if ((p.rating || 0) === topRating) {\n                winners.push(p)\n            } else {\n                break\n            }\n        }\n\n        const secondRating = unranked[winners.length]?.rating\n        if (secondRating !== undefined) {\n            for (let i = winners.length; i < unranked.length; i++) {\n                if ((unranked[i].rating || 0) === secondRating) {\n                    runnersUp.push(unranked[i])\n                } else {\n                    break\n                }\n            }\n        }\n\n        return { winners, runnersUp }\n    }, [projectsByRating, rankedProjects])\n\n    const handleProjectSelection = project => {\n        setSelected(project)\n    }\n\n    if (!rankedProjects || !projectsByRating || !event || !event.tracks) {\n        return <LoadingSpinner />\n    }\n\n    // Helper: rank projects by score (same as in winner.js)\n    const rankProjectsByScore = projects => {\n        if (!projects || projects.length === 0) {\n            return { winners: [], runnerUps: [] }\n        }\n\n        // Sort projects by globalScore (rounded) and then by regionalScore as a tie-breaker\n        const sortedProjects = [...projects].sort((a, b) => {\n            const scoreA = Math.round((a.globalScore || 0) * 100)\n            const scoreB = Math.round((b.globalScore || 0) * 100)\n\n            if (scoreB !== scoreA) {\n                return scoreB - scoreA\n            }\n\n            // Tie-breaker using regional score\n            const regionalScoreA = a.regionalScore || 0\n            const regionalScoreB = b.regionalScore || 0\n            return regionalScoreB - regionalScoreA\n        })\n\n        const winners = []\n        const runnerUps = []\n\n        if (sortedProjects.length === 0) {\n            return { winners, runnerUps }\n        }\n\n        // Find winners: all projects with the same score as the top project\n        const highestScore = Math.round(\n            (sortedProjects[0].globalScore || 0) * 100,\n        )\n        let lastWinnerIndex = -1\n\n        for (let i = 0; i < sortedProjects.length; i++) {\n            if (\n                Math.round((sortedProjects[i].globalScore || 0) * 100) ===\n                highestScore\n            ) {\n                winners.push(sortedProjects[i])\n                lastWinnerIndex = i\n            } else {\n                break\n            }\n        }\n\n        // Find runner-ups from the remaining projects\n        const remainingProjects = sortedProjects.slice(lastWinnerIndex + 1)\n        if (remainingProjects.length > 0) {\n            const runnerUpScore = Math.round(\n                (remainingProjects[0].globalScore || 0) * 100,\n            )\n            for (const project of remainingProjects) {\n                if (\n                    Math.round((project.globalScore || 0) * 100) ===\n                    runnerUpScore\n                ) {\n                    runnerUps.push(project)\n                } else {\n                    break\n                }\n            }\n        }\n\n        return { winners, runnerUps }\n    }\n\n    // Group rankedProjects by track\n    const byTrack = useMemo(() => {\n        if (!rankedProjects) return {}\n        return rankedProjects.reduce((res, project) => {\n            if (project.track) {\n                if (res.hasOwnProperty(project.track)) {\n                    res[project.track].push(project)\n                } else {\n                    res[project.track] = [project]\n                }\n            }\n            return res\n        }, {})\n    }, [rankedProjects])\n\n    return (\n        <PageWrapper header={null} footer={null}>\n            <PageHeader heading=\"🏆 Winners\" subheading=\"\" />\n\n            {/* 🥇 Organiser Winners by Track */}\n            {event.tracks.map(track => {\n                const items = byTrack[track.slug]\n                if (!items) return null\n\n                const { winners, runnerUps } = rankProjectsByScore(items)\n\n                return (\n                    <div key={track.slug}>\n                        <Box\n                            textAlign=\"center\"\n                            paddingTop=\"20px\"\n                            paddingBottom=\"20px\"\n                        >\n                            <Typography variant=\"h5\" className=\"font-bold\">\n                                {track.name}\n                            </Typography>\n                        </Box>\n\n                        {/* Display Winners */}\n                        {winners.length > 0 && (\n                            <>\n                                <Box textAlign=\"center\" paddingBottom=\"10px\">\n                                    <Typography variant=\"h6\">\n                                        🥇 Winner{winners.length > 1 ? 's' : ''}\n                                    </Typography>\n                                </Box>\n                                <WinnerDisplay\n                                    ranked={true}\n                                    event={event}\n                                    projectsByRating={winners}\n                                    scores={scores}\n                                    setSelected={handleProjectSelection}\n                                    user={user}\n                                    type=\"winner\"\n                                />\n                            </>\n                        )}\n\n                        {/* Display Runner-ups */}\n                        {runnerUps.length > 0 && (\n                            <>\n                                <Box\n                                    textAlign=\"center\"\n                                    paddingTop=\"20px\"\n                                    paddingBottom=\"10px\"\n                                >\n                                    <Typography variant=\"h6\">\n                                        🥈 Runner-up\n                                        {runnerUps.length > 1 ? 's' : ''}\n                                    </Typography>\n                                </Box>\n                                <WinnerDisplay\n                                    ranked={true}\n                                    event={event}\n                                    projectsByRating={runnerUps}\n                                    scores={scores}\n                                    setSelected={handleProjectSelection}\n                                    user={user}\n                                    type=\"runner-up\"\n                                />\n                            </>\n                        )}\n                    </div>\n                )\n            })}\n\n            {/* 🎤 Audience Choice Section */}\n            {(audienceChoiceProjects.winners.length > 0 ||\n                audienceChoiceProjects.runnersUp.length > 0) && (\n                <Box paddingTop=\"40px\">\n                    <Box textAlign=\"center\">\n                        <Typography variant=\"h5\">🎤 Audience Choice</Typography>\n                    </Box>\n\n                    {audienceChoiceProjects.winners.length > 0 && (\n                        <>\n                            <Box\n                                textAlign=\"center\"\n                                paddingTop=\"20px\"\n                                paddingBottom=\"10px\"\n                            >\n                                <Typography variant=\"h6\">\n                                    🥇 Winner\n                                    {audienceChoiceProjects.winners.length > 1\n                                        ? 's'\n                                        : ''}\n                                </Typography>\n                            </Box>\n                            <WinnerDisplay\n                                ranked={true}\n                                event={event}\n                                projectsByRating={\n                                    audienceChoiceProjects.winners\n                                }\n                                scores={scores}\n                                setSelected={handleProjectSelection}\n                                user={user}\n                                type=\"audience-winner\"\n                            />\n                        </>\n                    )}\n\n                    {audienceChoiceProjects.runnersUp.length > 0 && (\n                        <>\n                            <Box\n                                textAlign=\"center\"\n                                paddingTop=\"20px\"\n                                paddingBottom=\"10px\"\n                            >\n                                <Typography variant=\"h6\">\n                                    🥈 Runner-up\n                                    {audienceChoiceProjects.runnersUp.length > 1\n                                        ? 's'\n                                        : ''}\n                                </Typography>\n                            </Box>\n                            <WinnerDisplay\n                                ranked={true}\n                                event={event}\n                                projectsByRating={\n                                    audienceChoiceProjects.runnersUp\n                                }\n                                scores={scores}\n                                setSelected={handleProjectSelection}\n                                user={user}\n                                type=\"audience-runner-up\"\n                            />\n                        </>\n                    )}\n                </Box>\n            )}\n\n            <Dialog\n                transitionDuration={0}\n                fullScreen\n                open={Boolean(selected)}\n                onClose={() => setSelected(false)}\n            >\n                <ProjectDetail\n                    showFullTeam={true}\n                    project={selected}\n                    event={event}\n                    onBack={() => setSelected(false)}\n                    showTableLocation={false}\n                    fetchProject={() => {}}\n                    scores={scores}\n                />\n            </Dialog>\n        </PageWrapper>\n    )\n}\n","import React, { useMemo } from 'react'\nimport { Formik, FastField, Field } from 'formik'\nimport { Grid, Typography, Box } from '@material-ui/core'\nimport * as yup from 'yup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormControl from 'components/inputs/FormControl'\nimport TextInput from 'components/inputs/TextInput'\nimport Select from 'components/inputs/Select'\nimport Button from 'components/generic/Button'\nimport DateInput from 'components/inputs/DateInput'\nimport BooleanInput from 'components/inputs/BooleanInput'\nimport PdfUpload from 'components/inputs/PdfUpload'\nimport StreetAddressForm from 'components/inputs/StreetAddressForm'\nimport ErrorsBox from 'components/generic/ErrorsBox'\n\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { TravelGrantDetailsValidationSchema as schema } from '@hackjunction/shared'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const registration = useSelector(DashboardSelectors.registration)\n    const event = useSelector(DashboardSelectors.event)\n\n    const initialValues = useMemo(() => {\n        if (registration.travelGrantDetails) {\n            return registration.travelGrantDetails\n        } else {\n            return {\n                legalName: {\n                    firstName: userProfile.firstName,\n                    middleName: '',\n                    lastName: userProfile.lastName,\n                },\n                email: userProfile.email,\n                dateOfBirth: userProfile.dateOfBirth,\n                address: {},\n                hasSSN: false,\n                SSN: '',\n                hasIBAN: true,\n                IBAN: {},\n                receiptsPdf: {},\n                receiptsSum: 0,\n            }\n        }\n    }, [registration, userProfile])\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize={true}\n            onSubmit={async (values, actions) => {\n                actions.setSubmitting(true)\n                const error = await dispatch(\n                    DashboardActions.updateRegistrationGrantDetails(\n                        event.slug,\n                        values,\n                    ),\n                )\n                if (error) {\n                    dispatch(\n                        SnackbarActions.error('Oops, something went wrong...'),\n                    )\n                } else {\n                    dispatch(SnackbarActions.success('Success!'))\n                }\n                actions.setSubmitting(false)\n            }}\n            validationSchema={props => {\n                return yup.lazy(values => {\n                    return yup.object().shape(schema)\n                })\n            }}\n        >\n            {formikProps => (\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"legalName\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Legal name\"\n                                    hint=\"Enter your full legal name, including any middle names\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <Grid container spacing={1}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextInput\n                                                label=\"First name(s)\"\n                                                value={field.value.firstName}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        {\n                                                            ...field.value,\n                                                            firstName: value,\n                                                        },\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextInput\n                                                label=\"Middle name(s)\"\n                                                value={field.value.middleName}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        {\n                                                            ...field.value,\n                                                            middleName: value,\n                                                        },\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <TextInput\n                                                label=\"Last name\"\n                                                value={field.value.lastName}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        {\n                                                            ...field.value,\n                                                            lastName: value,\n                                                        },\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"email\"\n                            render={({ field, form }) => {\n                                return (\n                                    <FormControl\n                                        label=\"Email address\"\n                                        hint=\"For communication related to receiving your travel grant payment\"\n                                        error={form.errors[field.name]}\n                                        touched={form.touched[field.name]}\n                                    >\n                                        <TextInput\n                                            label=\"Email address\"\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                            onBlur={() =>\n                                                form.setFieldTouched(field.name)\n                                            }\n                                        />\n                                    </FormControl>\n                                )\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"gender\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Gender\"\n                                    hint=\"Please select your legal gender, either male or female. This information is required by tax authorities.\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <Select\n                                        label=\"Gender\"\n                                        options={[\n                                            {\n                                                label: 'Male',\n                                                value: 'Male',\n                                            },\n                                            {\n                                                label: 'Female',\n                                                value: 'Female',\n                                            },\n                                        ]}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"dateOfBirth\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Date of birth\"\n                                    hint=\"Enter your birthdate\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <DateInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"hasSSN\"\n                            render={({ field, form }) => (\n                                <FormControl label=\"Do you have a Finnish social security number?\">\n                                    <BooleanInput\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            name=\"SSN\"\n                            render={({ field, form }) => {\n                                if (form.values.hasSSN) {\n                                    return (\n                                        <FormControl\n                                            label=\"Social security number (Hetu)\"\n                                            hint=\"Fill in your social security number - this makes receiving your travel grant payments easier.\"\n                                            error={form.errors[field.name]}\n                                            touched={form.touched[field.name]}\n                                        >\n                                            <TextInput\n                                                label=\"Social security number\"\n                                                placeholder=\"000000-000X\"\n                                                value={field.value}\n                                                onChange={value =>\n                                                    form.setFieldValue(\n                                                        field.name,\n                                                        value,\n                                                    )\n                                                }\n                                                onBlur={() =>\n                                                    form.setFieldTouched(\n                                                        field.name,\n                                                    )\n                                                }\n                                            />\n                                        </FormControl>\n                                    )\n                                }\n                                return null\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            name=\"address\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Home address\"\n                                    hint=\"Enter your home address in your current country of residence\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <StreetAddressForm\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"hasIBAN\"\n                            render={({ field, form }) => {\n                                return (\n                                    <FormControl\n                                        label=\"Do you have an IBAN bank account?\"\n                                        hint=\"...or a possibility to get one\"\n                                    >\n                                        <BooleanInput\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                        />\n                                    </FormControl>\n                                )\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Field\n                            name=\"IBAN\"\n                            render={({ field, form }) => {\n                                if (!form.values.hasIBAN) {\n                                    return (\n                                        <Typography variant=\"subtitle1\">\n                                            If you don't have an IBAN account,\n                                            you will later need to fill in your\n                                            bank details in a separate service.\n                                        </Typography>\n                                    )\n                                }\n                                return (\n                                    <FormControl\n                                        label=\"IBAN account details\"\n                                        hint=\"Fill in your IBAN account details\"\n                                        error={form.errors[field.name]}\n                                        touched={form.touched[field.name]}\n                                    >\n                                        <Grid container spacing={1}>\n                                            <Grid item xs={12}>\n                                                <TextInput\n                                                    label=\"Account number\"\n                                                    value={\n                                                        field.value\n                                                            .accountNumber\n                                                    }\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            {\n                                                                ...field.value,\n                                                                accountNumber:\n                                                                    value,\n                                                            },\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <TextInput\n                                                    label=\"SWIFT/BIC\"\n                                                    value={field.value.swift}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            {\n                                                                ...field.value,\n                                                                swift: value,\n                                                            },\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <TextInput\n                                                    label=\"Bank name\"\n                                                    value={field.value.bankName}\n                                                    onChange={value =>\n                                                        form.setFieldValue(\n                                                            field.name,\n                                                            {\n                                                                ...field.value,\n                                                                bankName: value,\n                                                            },\n                                                        )\n                                                    }\n                                                    onBlur={() =>\n                                                        form.setFieldTouched(\n                                                            field.name,\n                                                        )\n                                                    }\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </FormControl>\n                                )\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"receiptsPdf\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Travel receipts\"\n                                    hint=\"Upload a .pdf file containing your travel receipts. If you have multiple travel receipts you wish to upload, first combine them into a single .pdf file and then upload the receipts here. Maximum file size: 10mb\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <PdfUpload\n                                        uploadUrl={`/api/upload/${event.slug}/travel-grant-receipts`}\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FastField\n                            name=\"receiptsSum\"\n                            render={({ field, form }) => (\n                                <FormControl\n                                    label=\"Sum of receipts\"\n                                    hint=\"Enter the total sum of your receipts, in Euros\"\n                                    error={form.errors[field.name]}\n                                    touched={form.touched[field.name]}\n                                >\n                                    <TextInput\n                                        label=\"€\"\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        onBlur={() =>\n                                            form.setFieldTouched(field.name)\n                                        }\n                                    />\n                                </FormControl>\n                            )}\n                        />\n                    </Grid>\n                    {Object.keys(formikProps.errors).length > 0 ? (\n                        <Grid item xs={12}>\n                            <ErrorsBox errors={formikProps.errors} />\n                        </Grid>\n                    ) : (\n                        <Grid item xs={12}>\n                            <Box\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                                alignItems=\"center\"\n                            >\n                                <Box width=\"100%\" maxWidth=\"300px\">\n                                    <Button\n                                        loading={formikProps.isSubmitting}\n                                        fullWidth\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={formikProps.submitForm}\n                                    >\n                                        Submit\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    )}\n                </Grid>\n            )}\n        </Formik>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Typography, Box } from '@material-ui/core'\nimport moment from 'moment-timezone'\n\nimport PageHeader from 'components/generic/PageHeader'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\n\nimport TravelGrantForm from './TravelGrantForm'\nimport GradientBox from 'components/generic/GradientBox'\n\nimport {\n    RegistrationTravelGrantStatuses as Statuses,\n    EventHelpers,\n} from '@hackjunction/shared'\nimport { concatAndCapitalize } from '@hackjunction/shared/helpers/utils'\n\nexport default () => {\n    const event = useSelector(DashboardSelectors.event)\n    const registration = useSelector(DashboardSelectors.registration)\n    const isDeadlinePast = EventHelpers.isGrantDeadlinePast(\n        event,\n        moment,\n        userProfile.location,\n    )\n    const userProfile = useSelector(UserSelectors.userProfile)\n\n    let registrationStartTimeAlias = 'registrationStartTime'\n    let registrationEndTimeAlias = 'registrationEndTime'\n    let startTimeAlias = 'startTime'\n    let endTimeAlias = 'endTime'\n\n    if (userProfile.location) {\n        registrationEndTimeAlias = concatAndCapitalize(\n            registrationEndTimeAlias,\n            userProfile.location,\n        )\n        registrationStartTimeAlias = concatAndCapitalize(\n            registrationStartTimeAlias,\n            userProfile.location,\n        )\n        startTimeAlias = concatAndCapitalize(\n            startTimeAlias,\n            userProfile.location,\n        )\n        endTimeAlias = concatAndCapitalize(endTimeAlias, userProfile.location)\n    }\n\n    const renderStatusBlock = () => {\n        switch (registration.travelGrantStatus) {\n            case Statuses.asObject.not_submitted.id:\n                if (isDeadlinePast) {\n                    return (\n                        <GradientBox p={2} color=\"theme_white\">\n                            <Typography variant=\"button\" gutterBottom>\n                                Your status\n                            </Typography>\n                            <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                                Not submitted\n                            </Typography>\n                            <Typography variant=\"body1\" paragraph>\n                                The deadline for submitting this form has\n                                passed. As you haven't submitted any of your\n                                travel details, we will not be able to move\n                                forward with paying your travel grant and it has\n                                been cancelled.\n                            </Typography>\n                        </GradientBox>\n                    )\n                }\n                return (\n                    <GradientBox p={2} color=\"theme_white\">\n                        <Typography variant=\"button\" gutterBottom>\n                            Your status\n                        </Typography>\n                        <Typography variant=\"h6\" color=\"secondary\" gutterBottom>\n                            Not submitted\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            To complete your travel grant application process\n                            and receive your travel grant of up to{' '}\n                            {registration.travelGrant}€, please submit the below\n                            form with your travel and payment details. After you\n                            submit the form, we will manually review your\n                            details and can move forward with paying your travel\n                            grant.\n                        </Typography>\n                        <Typography\n                            variant=\"body1\"\n                            style={{ fontWeight: 'bold' }}\n                        >\n                            This form will close{' '}\n                            {moment(event[endTimeAlias])\n                                .add(7, 'days')\n                                .format('LLL')}\n                            . Should you miss this deadline, we will be unable\n                            to pay you your travel grant.\n                        </Typography>\n                    </GradientBox>\n                )\n            case Statuses.asObject.pending.id:\n                return (\n                    <GradientBox color=\"theme_white\" p={2}>\n                        <Typography variant=\"button\" gutterBottom>\n                            Your status\n                        </Typography>\n                        <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                            Submitted, pending review\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            Great, thanks for submitting your details! We will\n                            now process your details and determine the final sum\n                            of your travel grant. You'll be able to see the\n                            up-to-date status of your travel grant on this page.\n                            In case there is something wrong or missing in your\n                            details, we will notify you via email and you'll be\n                            able to make corrections on this page.\n                        </Typography>\n                    </GradientBox>\n                )\n            case Statuses.asObject.rejected.id:\n                return (\n                    <GradientBox color=\"theme_white\" p={2}>\n                        <Typography variant=\"button\" gutterBottom>\n                            Your status\n                        </Typography>\n                        <Typography variant=\"h6\" color=\"secondary\" gutterBottom>\n                            Rejected, clarification needed\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            Oops, looks like there was something wrong with the\n                            travel details you submitted. Not to worry, see the\n                            comment below and make the appropriate changes to\n                            your details and we'll be able to confirm your\n                            travel grant amount! Please check the following:\n                        </Typography>\n                        <Typography\n                            variant=\"body1\"\n                            color=\"error\"\n                            style={{ fontWeight: 'bold' }}\n                        >\n                            {registration.travelGrantComment}\n                        </Typography>\n                    </GradientBox>\n                )\n            case Statuses.asObject.accepted.id:\n                return (\n                    <GradientBox color=\"theme_white\" p={2}>\n                        <Typography variant=\"button\" gutterBottom>\n                            Your status\n                        </Typography>\n                        <Typography variant=\"h6\" color=\"primary\" gutterBottom>\n                            Accepted, to be paid:{' '}\n                            {registration.travelGrantAmount}€\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            Awesome, your travel grant application has been\n                            accepted! You'll receive a payment of{' '}\n                            {registration.travelGrantAmount}€ when we start\n                            issuing the payments in the near future. This amount\n                            is the total sum of your eligible travel costs\n                            according to the receipts you provided, up to the\n                            amount of your travel grant allowance. Don't\n                            hesitate to reach out to us at website@harness.io if\n                            you have any questions!\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                            In case we still need to clarify some of your\n                            details (e.g. your submitted legal name differs from\n                            the name on your account, or your country is not in\n                            the list of countries supported by Transferwise),\n                            we'll react out to you personally via email before\n                            initiating the payments.\n                        </Typography>\n                    </GradientBox>\n                )\n            default:\n                return null\n        }\n    }\n\n    const renderForm = () => {\n        switch (registration.travelGrantStatus) {\n            case Statuses.asObject.not_submitted.id:\n                if (isDeadlinePast) return null\n                return (\n                    <>\n                        <Box mt={3} />\n                        <TravelGrantForm />\n                    </>\n                )\n            case Statuses.asObject.rejected.id:\n                return (\n                    <>\n                        <Box mt={3} />\n                        <TravelGrantForm />\n                    </>\n                )\n            default:\n                return null\n        }\n    }\n\n    return (\n        <>\n            <PageHeader\n                heading=\"Travel grant\"\n                subheading=\"Complete your travel grant application process\"\n            />\n            {renderStatusBlock()}\n            {renderForm()}\n        </>\n    )\n}\n","import React from 'react'\n\nimport QRCode from 'qrcode.react'\nimport { useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box, Typography } from '@material-ui/core'\n\nimport PageHeader from 'components/generic/PageHeader'\n\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    qrCodeWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        [theme.breakpoints.up('lg')]: {\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n        },\n    },\n    textWrapper: {\n        marginTop: theme.spacing(2),\n        textAlign: 'center',\n        [theme.breakpoints.up('lg')]: {\n            textAlign: 'left',\n            marginLeft: theme.spacing(2),\n            marginTop: 0,\n        },\n    },\n}))\n\nexport default () => {\n    const classes = useStyles()\n    const userProfile = useSelector(UserSelectors.userProfile)\n    const event = useSelector(DashboardSelectors.event)\n\n    return (\n        <Box>\n            <PageHeader\n                heading=\"Your event ID\"\n                subheading={`Show this QR code at the entrance to gain access to ${event.name}`}\n            />\n            <Box mt={2} />\n            <Box className={classes.qrCodeWrapper}>\n                <QRCode value={userProfile.userId} size={300} />\n                <Box className={classes.textWrapper}>\n                    <Typography variant=\"h6\">\n                        {userProfile.firstName} {userProfile.lastName}\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        {userProfile.email}\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                        {userProfile.userId}\n                    </Typography>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n","import React, { useState, useCallback, useMemo, useEffect } from 'react'\nimport moment from 'moment'\nimport { push } from 'connected-react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\n\nimport { Box } from '@material-ui/core'\nimport Rating from '@material-ui/lab/Rating'\nimport StatusBadge from 'components/generic/StatusBadge'\nimport Tag from 'components/generic/Tag'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport EditRegistrationModal from 'components/modals/EditRegistrationModal'\nimport BulkEditRegistrationModal from 'components/modals/BulkEditRegistrationModal'\nimport BulkEmailModal from 'components/modals/BulkEmailModal'\n\nimport { Table, Filters, Sorters } from 'components/generic/_Table'\n// import { CSVLink } from 'react-csv'\n// import { dietaryRestrictions } from '@hackjunction/shared/constants/misc'\n\nexport default ({\n    emptyRenderer,\n    loading,\n    attendees = [],\n    footer = null,\n    title = 'Participants',\n    minimal = false,\n}) => {\n    //    console.log('attendees', attendees)\n\n    const filteredAttendees = useMemo(() => {\n        return attendees.filter(attendee => {\n            if (!attendee) return false\n            if (!attendee.answers) return false\n            return attendee.answers.email\n        })\n    }, [attendees])\n\n    const dispatch = useDispatch()\n    const location = useLocation()\n    const searchParams = new URLSearchParams(location.search)\n    const organiserProfilesMap = useSelector(OrganiserSelectors.organisersMap)\n    const event = useSelector(OrganiserSelectors.event)\n\n    const query = new URLSearchParams(location.search)\n    const hasModal = query.has('modal')\n    const activeModal = query.get('modal')\n    const [selected, setSelected] = useState([])\n    const [data, setData] = useState([])\n\n    const openSingleEdit = useCallback(\n        row => {\n            const search = `?${new URLSearchParams({\n                modal: 'edit',\n                id: row.original.user,\n            }).toString()}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n\n    const openBulkEmail = useCallback(\n        selectedRows => {\n            setSelected(selectedRows)\n            const search = `?${new URLSearchParams({\n                modal: 'bulkEmail',\n            })}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n\n    const openBulkEdit = useCallback(\n        selectedRows => {\n            setSelected(selectedRows)\n            const search = `?${new URLSearchParams({\n                modal: 'bulkEdit',\n            })}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n    const columns = useMemo(() => {\n        return [\n            {\n                Header: '#',\n                accessor: (row, index) => {\n                    return index + 1\n                },\n                ...Sorters.Numeric,\n                id: 'index',\n            },\n            {\n                Header: 'First name',\n                accessor: 'answers.firstName',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Last name',\n                accessor: 'answers.lastName',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Email',\n                accessor: 'answers.email',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Expertise',\n                accessor: 'answers.expertise',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Status',\n                accessor: 'status',\n                ...Filters.MultipleSelect,\n                ...Sorters.Alphabetic,\n                Cell: ({ cell: { value } }) => <StatusBadge status={value} />,\n            },\n            {\n                Header: 'Rating',\n                accessor: 'rating',\n                ...Filters.MultipleSelect,\n                ...Sorters.Numeric,\n                Cell: ({ cell: { value } }) =>\n                    value ? (\n                        <Rating size=\"small\" value={value} readOnly />\n                    ) : (\n                        'Not rated'\n                    ),\n            },\n            {\n                Header: 'Tags',\n                accessor: 'tags',\n                ...Sorters.ArrayLength,\n                Cell: ({ cell: { value } }) => {\n                    console.log('tags', value)\n                    if (!value) {\n                        // console.log('no tags', value)\n                        return 'No tags'\n                    } else {\n                        return (\n                            <>\n                                {/* <Tag color=\"#ca8a04\" label=\"Advisor\" /> */}\n                                {value.map((tag, index) => {\n                                    return (\n                                        <Box key={index} ml=\"3px\" mt=\"3px\">\n                                            <Tag color=\"green\" label={tag} />\n                                        </Box>\n                                    )\n                                })}\n                            </>\n                        )\n                    }\n                },\n            },\n            {\n                Header: 'Created at',\n                accessor: 'createdAt',\n                ...Sorters.DateTime,\n                Cell: ({ cell: { value } }) =>\n                    moment(value).format('MMM Do YYYY HH:mm:ss'),\n            },\n            // {\n            //     Header: 'Assigned to',\n            //     accessor: 'assignedTo',\n            //     ...Sorters.Alphabetic,\n            //     Cell: ({ cell: { value } }) => {\n            //         let text\n            //         if (!value) {\n            //             text = 'No one'\n            //         } else if (organiserProfilesMap.hasOwnProperty(value)) {\n            //             const user = organiserProfilesMap[value]\n            //             text = `${user.firstName} ${user.lastName}`\n            //         } else {\n            //             text = '???'\n            //         }\n            //         return text\n            //     },\n            // },\n        ]\n    }, [organiserProfilesMap])\n\n    // const data = useMemo(async () => {\n    //     await Promise.all(\n    //         selected.map(async (s, index) => {\n    //             // console.log('s', s)\n    //             const output = await flattenObject(s.original, index)\n    //             return output\n    //         }),\n    //     )\n    // }, [selected])\n\n    // console.log(data)\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const data = await Promise.all(\n                selected.map(async (s, index) => {\n                    // console.log('s', s)\n                    const output = await flattenObject(s.original, index)\n                    return output\n                }),\n            )\n            setData(data)\n            console.log('data from use effect', data)\n        }\n        if (selected.length > 0) {\n            fetchData()\n        }\n    }, [selected])\n\n    // TODO move somewhere else\n    function flattenObject(ob, index) {\n        const answers = ob.answers\n        let customAnswers = ob.customAnswers\n        // if (\n        //     selected &&\n        //     selected.length > 0 &&\n        //     selected[index] &&\n        //     selected[index].original &&\n        //     selected[index].original.answers\n        // ) {\n        //     customAnswers = await selected[index].original.answers.CustomAnswers\n        // }\n        var toReturn = {\n            '#': index + 1,\n            'First name': answers.firstName,\n            'Last name': answers.lastName,\n            Email: answers.email,\n            Status: ob.status,\n            expertise: answers.expertise.join(', '),\n            skills: answers.skills.join(', '),\n            'Industries of Interest': answers.industriesOfInterest.join(', '),\n\n            Tags: ob.tags?.join(', '),\n            // object to array to object\n            ...customAnswers,\n            'Dietary Restrictions': answers.dietaryRestrictions?.join(', '),\n            'Spoken Languages': answers.spokenLanguages?.join(', '),\n            'Themes of Interest': answers.themesOfInterest.join(', '),\n\n            'Created at': moment(ob.createdAt).format('MMM Do YYYY HH:mm:ss'),\n        }\n\n        return toReturn\n    }\n\n    const exportregistrations = selectedRows => {\n        // console.log('selected', selectedRows)\n        setSelected(selectedRows)\n    }\n\n    const resetSearch = useCallback(() => {\n        dispatch(push({ search: '' }))\n    }, [dispatch])\n\n    useEffect(() => {\n        //Verify the query parameters\n        switch (activeModal) {\n            case 'bulkEmail':\n            case 'bulkEdit':\n                if (selected.length === 0) {\n                    resetSearch()\n                }\n                break\n            case 'edit':\n                if (!query.has('id')) {\n                    resetSearch()\n                }\n                break\n            default:\n                break\n        }\n    }, [activeModal, resetSearch, hasModal, query, selected.length])\n\n    // console.log(columns)\n    return (\n        <>\n            <EditRegistrationModal\n                registrationId={\n                    activeModal === 'edit' ? searchParams.get('id') : undefined\n                }\n                onClose={resetSearch}\n            />\n            <BulkEditRegistrationModal\n                visible={activeModal === 'bulkEdit'}\n                onClose={resetSearch}\n                userIds={selected.map(s => s.original.user)}\n            />\n            <BulkEmailModal\n                visible={activeModal === 'bulkEmail'}\n                onClose={resetSearch}\n                userIds={selected.map(s => s.original.user)}\n            />\n            <Table\n                data={filteredAttendees}\n                columns={columns}\n                // onRowClick={openSingleEdit}\n                // bulkActions={[\n\n                // ]}\n            />\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { FilterHelpers } from '@hackjunction/shared'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\n\nimport Divider from 'components/generic/Divider'\nimport AttendeeTable from 'components/tables/AttendeeTableUserSide'\nimport FilterGroupMenu from 'components/filters/FilterGroupMenu'\nimport { Table } from 'antd'\n\nexport default () => {\n    const registrations = useSelector(DashboardSelectors.registrations)\n    const registrationsLoading = useSelector(\n        DashboardSelectors.registrationsLoading,\n    )\n\n    const [filters, setFilters] = useState([])\n    const filtered = FilterHelpers.applyFilters(registrations, filters)\n    // console.log('registrations', filtered)\n    useEffect(() => {\n        async function appendCustomAnswers() {\n            for (let i = 0; i < filtered.length; i++) {\n                const customAnswers = await filtered[i].answers.CustomAnswers\n                // console.log('customAnswers', customAnswers)\n                filtered[i].customAnswers = {\n                    // ...filtered[i].answers,\n                    ...customAnswers.reduce((acc, cur) => {\n                        acc[cur.key] = cur.value\n                        return acc\n                    }, {}),\n                }\n            }\n        }\n        appendCustomAnswers()\n    }, [filtered])\n\n    return (\n        <>\n            <FilterGroupMenu onChange={setFilters} />\n            <Divider size={1} />\n            <AttendeeTable\n                attendees={filtered}\n                loading={registrationsLoading}\n            />\n        </>\n    )\n}\n","import React, { useMemo, useState, useCallback } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { sumBy } from 'lodash-es'\nimport { Typography, Grid, Box, Slider, Paper } from '@material-ui/core'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n// import * as DashboardSelectors from 'redux/organiser/selectors'\nimport Select from 'components/inputs/SelectOld'\nimport BulkEditRegistrationModal from 'components/modals/BulkEditRegistrationModal'\nimport BulkEmailModal from 'components/modals/BulkEmailModal'\n\nimport { Table, Sorters } from 'components/generic/_Table'\nimport AttendeeTable from '../AttendeeTableUserSide'\nimport { CSVLink } from 'react-csv'\n\nexport default ({ loading, teams = [], simplifiedView = false }) => {\n    const registrationsMap = useSelector(OrganiserSelectors.registrationsMap)\n    console.log('registrationsMap', registrationsMap)\n    const [reviewStatus, setReviewStatus] = useState('any')\n    const [completedStatus, setCompletedStatus] = useState('any')\n    const [ratingRange, setRatingRange] = useState([0, 5])\n    const [bulkEdit, setBulkEdit] = useState(false)\n    const [bulkEmail, setBulkEmail] = useState(false)\n    const [selected, setSelected] = useState([])\n    // TODO add expansion\n    // const [expandedRows, setExpandedRows] = useState({ 1: true })\n\n    const handleRatingRangeChange = useCallback((e, value) => {\n        setRatingRange(value)\n    }, [])\n    const teamsPopulated = useMemo(() => {\n        return teams.map(team => {\n            console.log(team)\n            const membersMapped = team.members\n                .map(member => {\n                    return registrationsMap[member]\n                })\n                .filter(member => typeof member !== 'undefined')\n            const ownerMapped = registrationsMap[team.owner] || {}\n            const allMembers = membersMapped.concat(ownerMapped)\n            const reviewedCount = allMembers.filter(\n                member => member && member.rating,\n            ).length\n            const memberCount = allMembers.length\n            return {\n                ...team,\n                owner: ownerMapped,\n                members: allMembers,\n                avgRating: (\n                    sumBy(allMembers, m => m.rating || 0) / allMembers.length\n                ).toFixed(2),\n                reviewedPercent: Math.floor(\n                    (reviewedCount * 100) / memberCount,\n                ),\n            }\n        })\n    }, [teams, registrationsMap])\n\n    // console.log(teamsPopulated)\n    const teamsFiltered = teamsPopulated.filter(team => {\n        if (completedStatus === 'completed' && !team.complete) {\n            return false\n        }\n        if (completedStatus === 'not-completed' && team.complete) {\n            return false\n        }\n        if (reviewStatus === 'fully-reviewed' && team.reviewedPercent !== 100) {\n            return false\n        }\n\n        if (reviewStatus === 'not-reviewed' && team.reviewedPercent === 100) {\n            return false\n        }\n\n        if (ratingRange[0] > team.avgRating) {\n            return false\n        }\n\n        if (ratingRange[1] < team.avgRating) {\n            return false\n        }\n        return true\n    })\n\n    const filteredMemberIds = useMemo(() => {\n        return teamsFiltered.reduce((res, team) => {\n            return res.concat(team.members.map(reg => reg.user))\n        }, [])\n    }, [teamsFiltered])\n\n    const columns = useMemo(() => {\n        return [\n            {\n                Header: '#',\n                accessor: (row, index) => {\n                    return index + 1\n                },\n                id: 'index',\n                sortType: Sorters.Numeric,\n            },\n            {\n                Header: \"Team Name\",\n                accessor: 'name',\n                id: 'name',\n                ...Sorters.Alphabetic,\n\n            },\n            {\n                Header: 'Owner',\n                accessor: row => {\n                    const { owner } = row\n                    if (!owner || !owner.answers) return '???'\n                    return `${owner.answers.firstName} ${owner.answers.lastName}`\n                },\n                id: 'owner',\n                ...Sorters.Alphabetic,\n            },\n            // {\n            //     Header: 'Code',\n            //     accessor: 'code',\n            //     ...Sorters.Alphabetic,\n            // },\n            {\n                Header: 'Members',\n                accessor: row => row.members.length,\n                id: 'members',\n                ...Sorters.Numeric,\n            },\n            {\n                Header: 'Avg. Rating',\n                accessor: 'avgRating',\n                ...Sorters.Numeric,\n            },\n            {\n                Header: '% Reviewed',\n                accessor: 'reviewedPercent',\n                ...Sorters.Numeric,\n                Cell: ({ cell: { value } }) => {\n                    return (\n                        <Typography\n                            variant=\"button\"\n                            color={value === 100 ? 'primary' : 'secondary'}\n                        >\n                            {value}%\n                        </Typography>\n                    )\n                },\n            },\n        ]\n    }, [])\n\n    const exportTeams = selectedRows => {\n        console.log('selected', selectedRows)\n        setSelected(selectedRows)\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <BulkEditRegistrationModal\n                visible={bulkEdit}\n                onClose={setBulkEdit}\n                registrationIds={filteredMemberIds}\n            />\n            <BulkEmailModal\n                visible={bulkEmail}\n                onClose={setBulkEmail}\n                registrationIds={filteredMemberIds}\n            />\n            {!simplifiedView && (\n                <>\n                    <Grid item xs={12} md={6}>\n                        <Paper p={2}>\n                            <Box p={2}>\n                                <Select\n                                    value={completedStatus}\n                                    onChange={setCompletedStatus}\n                                    label=\"Completed status\"\n                                    options={[\n                                        {\n                                            value: 'any',\n                                            label: 'Any',\n                                        },\n                                        {\n                                            value: 'completed',\n                                            label: 'Completed',\n                                        },\n                                        {\n                                            value: 'not-completed',\n                                            label: 'Not completed',\n                                        },\n                                    ]}\n                                />\n                            </Box>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Paper>\n                            <Box p={2}>\n                                <Select\n                                    value={reviewStatus}\n                                    onChange={setReviewStatus}\n                                    label=\"Review status\"\n                                    options={[\n                                        {\n                                            value: 'any',\n                                            label: 'Any',\n                                        },\n                                        {\n                                            value: 'fully-reviewed',\n                                            label: 'Fully reviewed',\n                                        },\n                                        {\n                                            value: 'not-reviewed',\n                                            label: 'Not fully reviewed',\n                                        },\n                                    ]}\n                                />\n                            </Box>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper>\n                            <Box\n                                padding={2}\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                            >\n                                <Typography\n                                    variant=\"subtitle1\"\n                                    paragraph\n                                    align=\"center\"\n                                >\n                                    Rating between\n                                </Typography>\n                                <Box paddingLeft={2} paddingRight={2}>\n                                    <Slider\n                                        defaultValue={ratingRange}\n                                        onChangeCommitted={\n                                            handleRatingRangeChange\n                                        }\n                                        valueLabelDisplay=\"on\"\n                                        aria-labelledby=\"range-slider\"\n                                        min={0}\n                                        max={5}\n                                        step={0.1}\n                                    />\n                                </Box>\n                            </Box>\n                        </Paper>\n                    </Grid>\n                </>\n            )}\n\n            <Grid item xs={12}>\n                <Table\n                    data={teamsFiltered}\n                    columns={columns}\n                    renderExpanded={row => (\n                        <AttendeeTable attendees={row.original.members} />\n                    )}\n                    bulkActions={[\n                        {\n                            key: 'export-teams',\n                            label: (\n                                <CSVLink\n                                    style={{\n                                        textDecoration: 'none',\n                                        color: 'inherit',\n                                    }}\n                                    data={selected.map((selection, index) => {\n                                        const s = selection.original\n                                        if (!s) return {}\n                                        if (!s.owner || !s.owner.answers)\n                                            return {}\n                                        return {\n                                            '#': index + 1,\n                                            // code: s.code,\n                                            owner: `${s.owner.answers.firstName} ${s.owner.answers.lastName}`,\n                                            'No of members': s.members\n                                                ? s.members.length\n                                                : 0,\n                                            members: s.members\n                                                ? s.members.map(member => {\n                                                      return member.answers\n                                                          ? `${member.answers.firstName} ${member.answers.lastName}(${member.answers.email})`\n                                                          : ''\n                                                  })\n                                                : [],\n                                            'Avg. Rating': s.avgRating,\n                                            '% Reviewed': s.reviewedPercent,\n                                        }\n                                        // return flattenObject(s.original, index)\n                                    })}\n                                    filename=\"teams.csv\"\n                                >\n                                    Export Teams\n                                </CSVLink>\n                            ),\n                            action: exportTeams,\n                        },\n                    ]}\n                />\n                {/* <MaterialTable\n                    title=\"Teams\"\n                    showCount\n                    isLoading={loading}\n                    data={teamsFiltered}\n                    onSearchChange={handleSearchChange}\n                    actions={[\n                        {\n                            icon: forwardRef((props, ref) => (\n                                <EmailIcon {...props} ref={ref} />\n                            )),\n                            tooltip: 'Email all',\n                            isFreeAction: true,\n                            onClick: () => setBulkEmail(true),\n                            hidden: searchActive,\n                        },\n                        {\n                            icon: forwardRef((props, ref) => (\n                                <EditIcon {...props} ref={ref} />\n                            )),\n                            tooltip: 'Edit all',\n                            isFreeAction: true,\n                            onClick: () => setBulkEdit(true),\n                            hidden: searchActive,\n                        },\n                    ]}\n                    localization={{\n                        toolbar: {\n                            searchPlaceholder: 'Search by code / owner',\n                        },\n                    }}\n                    options={{\n                        debounceInterval: 500,\n                        pageSizeOptions: [5, 25, 50],\n                    }}\n                    detailPanel={rowData => {\n                        return (\n                            <Box\n                                className={classes.detailPanel}\n                                overlow=\"auto\"\n                                width=\"100%\"\n                                p={2}\n                            >\n                                <AttendeeTable\n                                    title=\"Members\"\n                                    minimal={true}\n                                    attendees={rowData.members}\n                                />\n                            </Box>\n                        )\n                    }}\n                /> */}\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\n\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport TeamsTable from 'components/tables/TeamsTableUserSide'\n\nexport default () => {\n    const teams = useSelector(OrganiserSelectors.teams)\n    const registrationsLoading = useSelector(\n        DashboardSelectors.registrationsLoading,\n    )\n    const teamsLoading = useSelector(OrganiserSelectors.teamsLoading)\n    console.log('teams', teams)\n    return (\n        <PageWrapper>\n            {teams && (\n                <TeamsTable\n                    loading={registrationsLoading || teamsLoading}\n                    teams={teams}\n                />\n            )}\n        </PageWrapper>\n    )\n}\n","import React from 'react'\n\nimport { useRouteMatch, useLocation } from 'react-router'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport DefaultTab from './default'\nimport TeamsTab from './teams'\n\nexport default () => {\n    const match = useRouteMatch()\n    const location = useLocation()\n    return (\n        <PageWrapper>\n            <PageHeader\n                heading=\"Participants\"\n                subheading=\"Search participants\"\n            />\n            <MaterialTabsLayout\n                transparent\n                baseRoute={match.url}\n                location={location}\n                tabs={[\n                    {\n                        label: 'Participants',\n                        path: '',\n                        key: 'participants',\n                        component: DefaultTab,\n                    },\n                    {\n                        path: '/teams',\n                        key: 'teams',\n                        label: 'Teams',\n                        component: TeamsTab,\n                    },\n                    // {\n                    //     path: '/assigned',\n                    //     key: 'assigned',\n                    //     label: 'Assigned to you',\n                    //     component: AssignedTab,\n                    // },\n                    // {\n                    //     path: '/travel',\n                    //     key: 'travel',\n                    //     label: 'Travel',\n                    //     component: TravelTab,\n                    // },\n                    // {\n                    //     path: '/admin',\n                    //     key: 'admin',\n                    //     label: 'Admin & Tools',\n                    //     component: AdminTab,\n                    // },\n                ]}\n            />\n        </PageWrapper>\n    )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { useRouteMatch, useLocation } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GroupIcon from '@material-ui/icons/Group'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport FingerprintIcon from '@material-ui/icons/Fingerprint'\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff'\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined'\nimport StarRateIcon from '@material-ui/icons/StarRate'\nimport HowToVoteIcon from '@material-ui/icons/HowToVote'\nimport SidebarLayout from 'components/layouts/SidebarLayout'\nimport Image from 'components/generic/Image'\nimport BasicNavBar from 'components/navbars/BasicNavBar'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport DefaultPage from './default'\nimport TeamPage from './team'\nimport ProjectPage from './project'\nimport ReviewingPage from './reviewing'\nimport RatingPage from './rating'\nimport FinalistPage from './finalist'\nimport TravelGrantPage from './travel-grant'\nimport EventIDPage from './event-id'\nimport ParticipantPage from './participants'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Button } from '@material-ui/core'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport { push } from 'connected-react-router'\n\nconst useStyles = makeStyles(theme => ({\n    sidebarTop: {\n        padding: theme.spacing(3),\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    sidebarLogo: {\n        width: '100%',\n        objectFit: 'contain',\n    },\n}))\n\nexport default () => {\n    const { t } = useTranslation()\n\n    const classes = useStyles()\n    const match = useRouteMatch()\n    const location = useLocation()\n    const dispatch = useDispatch()\n\n    const event = useSelector(DashboardSelectors.event)\n    const eventLoading = useSelector(DashboardSelectors.eventLoading)\n    const registrationLoading = useSelector(\n        DashboardSelectors.registrationLoading,\n    )\n    const hasAdvisor = useSelector(AuthSelectors.hasAdvisor)\n    // const userProfile = useSelector(UserSelectors.userProfile)\n    // const hasAdvisor = userProfile && userProfile.role === 'Advisor'\n    const user = useSelector(AuthSelectors.idTokenData)\n    const team = useSelector(DashboardSelectors.team)\n    const lockedPages = useSelector(DashboardSelectors.lockedPages)\n    const shownPages = useSelector(DashboardSelectors.shownPages)\n    const { slug } = match.params\n    const [hidden, setHidden] = useState(false)\n    // console.log(userProfile)\n    /** Update when slug changes */\n    useEffect(() => {\n        dispatch(DashboardActions.updateEvent(slug))\n        dispatch(DashboardActions.updateRegistration(slug))\n        dispatch(DashboardActions.updateTeam(slug))\n        //TODO dont use OrganiserSelectors here\n        dispatch(OrganiserActions.updateProjects(slug))\n        dispatch(OrganiserActions.updateGavelProjects(slug))\n        dispatch(OrganiserActions.updateRankings(slug))\n        dispatch(OrganiserActions.generateResults(slug)) // TODO do we need to get results always?\n        dispatch(DashboardActions.updateRegistrationsForEvent(slug))\n        dispatch(OrganiserActions.updateRegistrationsForEvent(slug))\n        dispatch(OrganiserActions.updateTeamsForEvent(slug))\n        dispatch(DashboardActions.updateTeamsForEvent(slug))\n        dispatch(OrganiserActions.getRankedProjects(slug))\n    }, [slug, dispatch])\n\n    /** Update project when team changes */\n    useEffect(() => {\n        dispatch(DashboardActions.updateProjects(slug))\n        dispatch(DashboardActions.updateProjectScores(slug))\n        console.log(team)\n        if (hasAdvisor) {\n            setHidden(true)\n        } else {\n            setHidden(false)\n        }\n    }, [slug, team, dispatch])\n\n    const onBack = useCallback(() => {\n        dispatch(push('/account'))\n    }, [dispatch])\n\n    // throw new Error('This is an error')\n\n    return (\n        <PageWrapper\n            loading={eventLoading || registrationLoading}\n            wrapContent={false}\n        >\n            <Box style={{ zIndex: '2000', position: 'fixed' }}>\n                <Button style={{ color: 'white' }} onClick={onBack}>\n                    <ArrowBackIosIcon\n                        style={{ fontSize: '14px', color: 'white' }}\n                    />\n                    Back\n                </Button>\n            </Box>\n            {console.log(hidden)}\n            <SidebarLayout\n                baseRoute={match.url}\n                location={location}\n                sidebarTopContent={\n                    <div className={classes.sidebarTop}>\n                        <Image\n                            className={classes.sidebarLogo}\n                            publicId={\n                                event && event.logo ? event.logo.publicId : ''\n                            }\n                            transformation={{\n                                width: 200,\n                            }}\n                        />\n                    </div>\n                }\n                topContent={<BasicNavBar />}\n                routes={[\n                    {\n                        key: 'dashboard',\n                        path: '',\n                        exact: true,\n                        icon: <DashboardIcon />,\n                        label: t('Dashboard_'),\n                        component: DefaultPage,\n                    },\n                    {\n                        key: 'participants',\n                        path: '/participants',\n                        exact: false,\n                        icon: <GroupIcon />,\n                        label: 'Participants',\n                        // locked: lockedPages.team,\n                        // lockedDescription: 'Can not access participants yet.',\n                        component: ParticipantPage,\n                    },\n\n                    // {\n                    //     key: 'finals',\n                    //     path: '/finalist-voting',\n                    //     exact: true,\n                    //     hidden: !shownPages.finalistVoting,\n                    //     locked: lockedPages.finalistVoting,\n                    //     lockedDescription:\n                    //         'Finalist voting closed until peer review is done',\n                    //     icon: <HowToVoteIcon />,\n                    //     label: 'Finalist voting',\n                    //     component: FinalistVotingPage,\n                    // },\n                    {\n                        key: 'finalist',\n                        path: '/winners',\n                        exact: true,\n                        hidden: false,\n                        locked: lockedPages.winner,\n                        lockedDescription: 'Finalist closed',\n                        icon: <HowToVoteIcon />,\n                        label: 'Winners',\n                        component: FinalistPage,\n                    },\n                    {\n                        key: 'team',\n                        path: '/team',\n                        exact: true,\n                        icon: <GroupIcon />,\n                        label: t('Team_'),\n                        locked: lockedPages.team,\n                        lockedDescription: 'Team editing not open',\n                        component: TeamPage,\n                    },\n                    {\n                        key: 'project',\n                        path: '/project',\n                        exact: true,\n                        hidden: hidden,\n                        locked: lockedPages.submissions,\n                        lockedDescription: 'Submissions not open',\n                        // hidden: !shownPages.submissions,\n                        icon: <AssignmentOutlinedIcon />,\n                        label: t('Project_submissions_'),\n                        component: ProjectPage,\n                    },\n                    {\n                        key: 'reviewing',\n                        path: '/reviewing',\n                        exact: true,\n                        hidden: !shownPages.reviewing,\n                        locked: lockedPages.reviewing,\n                        lockedDescription: 'Reviewing closed',\n                        icon: <StarRateIcon />,\n                        label: t('Reviewing_'),\n                        component: ReviewingPage,\n                    },\n                    {\n                        key: 'rating',\n                        path: '/rating',\n                        exact: true,\n                        hidden: false,\n                        locked: lockedPages.winner,\n                        lockedDescription: 'Rating closed',\n                        icon: <StarRateIcon />,\n                        label: t('Rating_'),\n                        component: RatingPage,\n                    },\n\n                    {\n                        key: 'eventid',\n                        path: '/event-id',\n                        exact: true,\n                        hidden: !shownPages.eventID,\n                        icon: <FingerprintIcon />,\n                        label: 'Event ID',\n                        component: EventIDPage,\n                    },\n                    {\n                        key: 'travelgrant',\n                        path: '/travel-grant',\n                        exact: true,\n                        icon: <FlightTakeoffIcon />,\n                        hidden: !shownPages.travelGrant,\n                        label: 'Travel grant',\n                        component: TravelGrantPage,\n                    },\n                    // {\n                    //     key: 'hackerpack',\n                    //     path: '/hackerpack',\n                    //     exact: true,\n                    //     icon: <AmpStoriesIcon />,\n                    //     hidden: !shownPages.hackerPack,\n                    //     label: t('Hackerpack_'),\n                    //     component: HackerpackPage,\n                    // },\n                    // {\n                    //     key: 'challenges',\n                    //     path: '/challenges',\n                    //     exact: true,\n                    //     icon: <FormatListBulletedIcon />,\n                    //     label: 'Challenges',\n                    //     component: ChallengesIndex,\n                    // },\n                ]}\n            />\n        </PageWrapper>\n    )\n}\n","import React from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport SlugPage from './slug'\n\nexport default () => {\n    const match = useRouteMatch()\n    return (\n        <Switch>\n            <Route\n                exact={false}\n                path={`${match.path}/:slug`}\n                component={SlugPage}\n            />\n\n            {/* For all other routes, redirect outta here */}\n            <Redirect to=\"/\" />\n        </Switch>\n    )\n}\n"],"sourceRoot":""}