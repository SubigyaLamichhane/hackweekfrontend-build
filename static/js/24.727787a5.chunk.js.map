{"version":3,"sources":["hooks/formHooks.js","components/layouts/MaterialTabsLayout/index.js","components/generic/ConfirmDialog/index.js","components/generic/Empty/index.js","components/inputs/SelectOld/index.js","components/generic/_Table/PageSizeSelect.js","components/generic/_Table/PageSelect.js","components/generic/_Table/Pagination.js","components/generic/_Table/ActionBar.js","components/generic/_Table/filterFunctions.js","components/generic/_Table/Table.js","components/generic/_Table/sortFunctions.js","components/generic/_Table/filters/SingleSelectFilter.js","components/generic/_Table/filterTypes.js","components/generic/_Table/filters/MultipleSelectFilter.js","components/generic/_Table/index.js","components/generic/_Table/filters/ContainsSearch.js","components/generic/StatusBadge/index.js","components/inputs/EventTagsSelect/index.js","components/generic/UserListItem/index.js","components/inputs/RegistrationStatusSelect/index.js","components/modals/BulkEmailModal/index.js","components/generic/UserListItem/OrganiserListItem.js","components/modals/BulkEditRegistrationModal/index.js","components/generic/Modal/index.js","components/modals/OrganiserSelectModal/index.js","components/renderRatingContent.js","components/layouts/SidebarLayout/index.js","components/navbars/BasicNavBar/index.js","components/inputs/PdfUpload/index.js","components/inputs/StreetAddressForm/index.js","components/filters/FilterValueInput.js","components/filters/FilterForm.js","components/filters/FilterListItem.js","components/filters/FilterList.js","components/filters/FilterSaveForm.js","components/filters/FilterGroupMenu.js","components/modals/EditRegistrationModal/EditRegistrationActions.js","components/generic/Tag/Variants.js","components/generic/DescriptionItem/index.js","components/modals/EditRegistrationModal/EditRegistrationContent.js","components/modals/EditRegistrationModal/index.js","pages/_organise/default/NewEventForm.js","pages/_organise/default/EventsList.js","pages/_organise/default/index.js","pages/_organise/slug/finalist/index.js","pages/_organise/slug/rating/Scoring.js","pages/_organise/slug/rating/index.js","../../shared/schemas/validation/eventSchema.js","graphql/queries/organization.js","components/inputs/Color/index.js","pages/_organise/slug/edit/default/const.js","pages/_organise/slug/edit/default/index.js","pages/_organise/slug/edit/configuration/TravelGrantConfig.js","pages/_organise/slug/edit/configuration/TracksForm.js","pages/_organise/slug/edit/configuration/index.js","components/inputs/TimeInput/index.js","components/inputs/DateTimeInput/index.js","pages/_organise/slug/edit/schedule/america.js","pages/_organise/slug/edit/schedule/emca.js","pages/_organise/slug/edit/schedule/asia.js","pages/_organise/slug/edit/questions/CustomSectionList/AddSectionModal.js","pages/_organise/slug/edit/questions/CustomSectionList/AddQuestionModal.js","pages/_organise/slug/edit/questions/CustomSectionList/CustomSectionListItem.js","pages/_organise/slug/edit/questions/CustomSectionList/index.js","pages/_organise/slug/edit/questions/QuestionSelect/index.js","pages/_organise/slug/edit/questions/index.js","pages/_organise/slug/edit/submission/index.js","pages/_organise/slug/edit/timeline/TimelineForm.js","pages/_organise/slug/edit/timeline/index.js","pages/_organise/slug/edit/other/EventTagsForm.js","pages/_organise/slug/edit/other/WebhooksForm.js","pages/_organise/slug/edit/other/MetaTagsForm.js","pages/_organise/slug/edit/other/CertificateForm.js","pages/_organise/slug/edit/other/index.js","graphql/mutations/eventOps.js","pages/_organise/slug/edit/index.js","pages/_organise/slug/manage/AddOrganiserDrawer.js","pages/_organise/slug/manage/index.js","services/slack.js","components/modals/MessageAllInSlackModal/index.js","components/tables/AttendeeTable/index.js","pages/_organise/slug/participants/default/index.js","components/tables/TeamsTable/index.js","pages/_organise/slug/participants/teams/index.js","components/generic/Statistic/index.js","pages/_organise/slug/participants/admin/index.js","pages/_organise/slug/participants/index.js","components/modals/EditProjectModal/index.js","components/tables/TableWithFilter/TableWithFilter.js","components/tables/ProjectsTable/index.js","pages/_organise/slug/projects/default/index.js","pages/_organise/slug/projects/by-track/index.js","services/winnerVote.js","pages/_organise/slug/projects/index.js","pages/_organise/slug/results/default/index.js","components/generic/DragDropList/index.js","pages/_organise/slug/results/tracks/index.js","pages/_organise/slug/results/challenges/ChallengeResults.js","pages/_organise/slug/results/globalScores/index.js","pages/_organise/slug/results/regionalScores/index.js","pages/_organise/slug/results/index.js","pages/_organise/slug/index.js","pages/_organise/index.js"],"names":["useFormField","initialValue","validate","initialError","onChangeEvent","value","setValue","useState","error","setError","onChange","useCallback","e","target","newError","reset","undefined","handleValidate","err","dirty","useStyles","makeStyles","theme","root","transparent","flexGrow","width","backgroundColor","palette","background","paper","wrapper","textAlign","alignItems","tabs","location","baseRoute","dispatch","useDispatch","classes","pushRoute","path","push","activeIndex","useMemo","relativePath","pathname","replace","findIndex","item","useEffect","safeIndex","useTheme","isMobile","useMediaQuery","breakpoints","down","React","createElement","className","Tabs","orientation","handleChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","aria-label","map","tab","index","Tab","Object","assign","key","label","id","a11yProps","Box","mt","p","Switch","component","Route","exact","Redirect","to","ConfirmDialog","open","onClose","onCancel","onOk","title","message","cancelText","okText","handleCancel","handleOk","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","Empty","isEmpty","emptyText","button","hideIfNotEmpty","renderButton","text","pt","pb","pl","pr","display","flexDirection","justifyContent","InfoTwoToneIcon","Typography","chips","flexWrap","chip","margin","_Select","memo","disabled","helperText","multiple","onBlur","options","placeholder","type","preventDefault","items","Array","isArray","length","SelectOptions","COUNTRIES","COUNTRY_CODES","NATIONALITIES","DIETARY_RESTRICTIONS","NUM_HACKATHONS","GENDERS","EXPERTISE","INDUSTRIES","LANGUAGES","ROLES","SKILLS","THEMES","STATUSES","DAYS","MONTHS","YEARS","valueOrDefault","selectProps","onOpen","renderValue","Chip","TextField","fullWidth","select","SelectProps","MenuItem","ListItemText","primary","secondary","helper","gotoPage","pageSize","setPageSize","_setPageSize","size","ButtonGroup","bind","pageIndex","pageCount","canPreviousPage","previousPage","canNextPage","nextPage","IconButton","NavigateBeforeIcon","NavigateNextIcon","up","Pagination","props","PageSizeSelect","PageSelect","selectionActions","height","main","overflow","boxSizing","selectionTitle","fontWeight","ActionBar","selected","actions","enableExport","flatHeaders","selectionActive","_actions","base","concat","CSVLink","style","textDecoration","data","values","filename","headers","header","Header","filter","action","motion","div","variants","visible","hidden","animate","Fragment","mr","rows","filterValue","row","indexOf","_row$values$id","overflowX","position","table","tableRow","onRowClick","renderExpanded","baseStyles","clickableStyles","cursor","transition","tableHead","darken","tableHeadRow","tableHeadCell","fontSize","lineHeight","whiteSpace","tableHeadCellActive","tableHeadSortIcon","tableCell","tableFooter","expandedRow","_Table","columns","bulkActions","enablePagination","enableSelection","defaultColumn","Filters","Disabled","Sorters","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","pageOptions","selectedFlatRows","state","useTable","filterTypes","FilterFunctions","defaultCanFilter","initialState","useFilters","useSortBy","useExpanded","usePagination","useRowSelect","hooks","getToggleAllRowsSelectedProps","Checkbox","Cell","stopPropagation","getToggleRowSelectedProps","handleRowClick","toggleRowExpanded","isExpanded","pagination","columnCount","result","Table","TableHead","headerGroup","TableRow","getHeaderGroupProps","column","TableCell","getHeaderProps","getSortByToggleProps","TableSortLabel","active","canSort","isSorted","direction","isSortedDesc","icon","IconComponent","ExpandMoreIcon","hideSortIcon","render","TableBody","i","_row$getRowProps","getRowProps","cells","cell","getCellProps","colSpan","defaultProps","getValues","rowA","rowB","defaultValue","_rowA$values$key","_rowA$values","_rowB$values$key","_rowB$values","SingleSelectFilter","Filter","Component","preFilteredRows","setFilter","grouped","groupBy","keys","native","option","padding","spacing","optionSelected","theme_lightgray","SingleSelect","MultipleSelect","selectedValues","ContainsSearch","canFilter","Numeric","sortType","a","b","disableSortBy","Alphabetic","memoize","localeCompare","DateTime","Date","ArrayLength","Default","lighten","borderColor","borderWidth","typography","overline","StatusBadge","status","hideSoftStatuses","params","RegistrationStatuses","asObject","softAccepted","softRejected","pending","EventTagsSelect","tags","Select","isMulti","tag","UserListItem","user","selectable","onSelect","userName","firstName","lastName","userEmail","email","ListItem","ListItemAvatar","Avatar","alt","src","avatar","RegistrationStatusSelect","allowRestricted","asArray","userIds","idToken","useSelector","AuthSelectors","UserSelectors","OrganiserSelectors","loading","setLoading","confirmModalOpen","setConfirmModalOpen","headerImage","t","useTranslation","subject","subtitle","body","messageId","ctaText","ctaLink","fields","header_image","cta_text","cta_link","errors","field","forEach","SnackbarActions","handleTestEmail","EmailService","sendPreviewEmail","slug","then","catch","finally","handleConfirm","sendBulkEmail","autoHideDuration","fullScreen","PageWrapper","wrapContent","Container","center","amount","PageHeader","heading","subheading","paragraph","Grid","container","xs","TextInput","rawOnChange","TextAreaInput","textarea","userId","organisersMap","organiserModal","setOrganiserModal","confirmDialog","setConfirmDialog","rating","assignedTo","expandedIds","setExpandedIds","panel","toggleExpanded","handleClose","getEdits","edits","handleSubmit","OrganiserActions","ExpansionPanel","expanded","ExpansionPanelSummary","flex","ExpansionPanelDetails","Rating","num","OrganiserSelectModal","onClear","mb","OrganiserListItem","join","zIndex","wrapperPadded","content","maxWidth","contentMed","contentMax","borderRadius","inner","GenericModal","isOpen","children","footer","HyperModal","requestClose","contentClassName","clsx","wrapperClassName","organisers","setSelected","handleClear","Modal","List","organiser","RenderContent","projectsByRating","scores","ranked","project","images","url","name","punchline","description","technologies","tech","Scoring","LoadingSpinner","drawer","top","left","flexShrink","drawerToggle","drawerToggleDesktop","desktopOpen","marginLeft","drawerPaper","listItem","listItemSelected","listItemTextPrimary","listItemTextSecondary","listItemIcon","pageWrapper","pageWrapperInner","topContent","sidebarTopContent","routes","_routes","route","setMobileOpen","mobileOpen","setDesktopOpen","handleDrawerToggle","handleDrawerToggleDesktop","drawerContent","locked","ListItemIcon","LockIcon","lockedDescription","Hidden","mdUp","implementation","MenuIcon","smDown","KeyboardBackspaceIcon","Drawer","anchor","ModalProps","keepMounted","drawerDesktop","wrapperClass","marginRight","textTransform","alignSelf","BasicNavBar","paddingLeft","UserMenu","uploader","uploaderInner","uploadText","uploadUrl","resizeMode","beforeUpload","file","isPDF","isLt10M","handleRemove","info","response","_info$file$response$m","_info$file","_info$file$response","href","ml","Tooltip","ClearIcon","Upload","Dragger","listType","showUploadList","Authorization","CircularProgress","StreetAddressInput","showVenueName","country","addressLine","addressLine2","city","postalCode","venueName","fieldName","fieldValue","MULTI_TYPES","FilterTypes","ONE_OF","NOT_ONE_OF","CONTAINS_ONE_OF","NOT_CONTAINS_ONE_OF","FilterValueInput","filterType","valueType","inputParams","LESS_THAN","NOT_LESS_THAN","MORE_THAN","NOT_MORE_THAN","CONTAINS","NOT_CONTAINS","EQUALS","NOT_EQUALS","FilterValues","STRING","formatValue","formatOnChange","split","BOOLEAN","DATE","GENDER","NATIONALITY","COUNTRY","LANGUAGE","TAG","STATUS","NUMBER","IS_EMPTY","NOT_EMPTY","BOOLEAN_FALSE","BOOLEAN_TRUE","headingItem","onSubmit","setExpanded","setFilterType","setFilterValue","filterParams","JSON","parse","submitValue","filterOptions","RegistrationFields","filters","stringify","filterTypeOptions","filterTypesForType","expandIcon","aria-controls","ExpansionPanelActions","inline","FilterListItem","onRemove","getType","ListItemSecondaryAction","edge","DeleteIcon","badge","right","list","FilterList","activeItemKey","hasFilters","newFilters","idx","Badge","anchorOrigin","vertical","horizontal","badgeContent","showZero","Divider","activeItem","reservedLabels","onSave","onDelete","isEdit","isDefault","isAdd","handleEdit","handleCreate","handleDelete","onSelectedChange","showEdit","filterGroups","anchorEl","setAnchorEl","setFilters","handleFilterAdd","sortBy","Paper","aria-haspopup","currentTarget","Menu","Boolean","handleMenuItemClick","FilterForm","FilterSaveForm","registration","organiserModalOpen","setOrganiserModalOpen","travelGrant","formFields","formValues","formDirty","v","Yes","withStyles","No","NotAvailable","DescriptionItem","renderBoolean","bool","renderObjectFields","obj","labelMap","valueMap","primaryTypographyProps","secondaryTypographyProps","renderContent","role","Roles","getLabelForExperienceLevel","years","Skills","getLabelForSkillLevel","level","university","degree","graduationYear","applyAsTeam","applyAlone","moment","format","Misc","numHackathonOptions","getLabelForValue","rel","consent","relocation","relocationOptions","recruitmentStatuses","countryCode","number","answers","getCategory","sorted","getCategoryOrderByLabel","console","log","customAnswers","CustomAnswers","element","section","categoryNames","fieldToLabelMap","customField","find","registrationQuestions","f","customQuestions","questions","question","registrationId","onEdited","teamsMap","setRegistration","RegistrationsService","getFullRegistration","participantName","participantSubheading","_registration$answers","_team$code","team","countryOfResidence","code","async","MiscUtils","sleep","EditRegistrationContent","EditRegistrationActions","setName","hasError","checkName","EventsService","createEvent","gutterBottom","sm","statusText","transform","green","opacity","yellow","orange","events","searchTerm","setSearchTerm","searchResults","setSearchResults","results","toLowerCase","justify","SearchIcon","md","lg","_id","published","approved","EventCard","buttons","useMyEvents","GlobalNavBar","Footer","NewEventForm","EventsList","DashboardSelectors","rankedProjects","setScores","callUnrankedProjects","unrankedProjects","isWinner","found","rankedProject","staredProjects","sub","usersThatRated","includes","DashboardActions","transitionDuration","ProjectDetail","showFullTeam","onBack","showTableLocation","handleScoring","projectId","score","feedback","cloudinaryImage","yup","shape","required","publicId","default","nullable","address","matches","min","max","track","winner","challenge","partner","insights","resources","prizes","criteria","companyInfo","logo","travelGrantConfig","registrationQuestionSettings","of","registrationQuestion","hint","fieldType","fieldRequired","settings","registrationSection","conditional","registrationConfig","optionalFields","requiredFields","eventTimeline","startTime","eventTheme","headerBackgroundColor","headerTextColor","bodyBackgroundColor","detailsBackgroundColor","detailsTextColor","sidebarBackgroundColor","sidebarTextColor","accentColor","linkColor","coverImage","eventType","timezone","registrationStartTime","registrationEndTime","reviewingStartTime","reviewingEndTime","emcaTimezone","emcaRegistrationStartTime","emcaRegistrationEndTime","emcaReviewingStartTime","emcaReviewingEndTime","asiaTimezone","asiaRegistrationStartTime","asiaRegistrationEndTime","asiaReviewingStartTime","asiaReviewingEndTime","finalsActive","eventLocation","notRequired","tracksEnabled","tracks","challengesEnabled","challenges","reviewMethod","overallReviewMethod","galleryOpen","owner","organizations","demoLabel","demoHint","eventPrivacy","eventTerms","demoPlaceholder","metaDescription","finalists","frontPagePriority","integer","gql","GET_ORGANIZATIONS","previewCircle","border","previewText","picker","boxShadow","pageCover","bottom","ColorSelect","setIsOpen","togglePicker","CompactPicker","onChangeComplete","hex","defaultEventStyles","themeFields","useAllOrganizations","useQuery","FastField","form","FormControl","touched","ImageUpload","setFieldValue","setFieldTouched","MarkdownInput","themeField","enabled","budget","currency","BooleanInput","Number","inputValue","setInputValue","slugValue","setSlugValue","editIndex","setEditIndex","editValue","setEditValue","handleNameChange","getSlug","handleAdd","handleEditStart","handleEditCancel","handleEditSave","isValid","renderListItem","divider","CloseIcon","SaveIcon","EditIcon","HighlightOffIcon","_form$values$eventLoc","EventTypes","Field","StreetAddressForm","TravelGrantConfig","TracksForm","ReviewingMethods","OverallReviewingMethods","HOURS","apply","toString","MINUTES","DEFAULT_VALUE","hours","minutes","TimeInput","handleHoursChange","handleMinutesChange","DateTimeInput","momentValue","tz","startOf","handleDateChange","date","clone","dateAsMoment","year","month","handleTimeChange","hour","minute","DateInput","timezones","setTimezones","america","emca","asia","onVisibleChange","onEditDone","onEditCancel","editing","reservedNames","setData","isConditional","setIsConditional","test","FormControlLabel","control","checked","window","alert","initialData","sectionName","renderPlaceholderInput","renderFieldTypeOptions","trim","marginBottom","descriptionWrapper","marginTop","onEdit","onMoveDown","onMoveUp","isFirst","isLast","modalOpen","setModalOpen","setEditing","q","newQuestions","handleQuestionUp","newItems","slice","handleQuestionDown","handleQuestionRemove","splice","Markdown","source","details","AddQuestionModal","sections","sectionNames","s","questionNames","getFields","updatedSection","updatedIndex","handleMoveUp","handleMoveDown","handleEditDone","AddSectionModal","CustomSectionListItem","fieldsMapped","alwaysEnabled","category","alwaysRequired","fieldsByCategory","categories","getCategoriesArray","sectionLabel","isOptional","isRequired","VisibilityOffIcon","VisibilityIcon","FormGroup","getChipProps","clickable","_field$value","_field$value2","QuestionSelect","CustomSectionList","titleValue","setTitleValue","startTimeValue","setStartTimeValue","setHours","setTimezone","activeRegion","setActiveRegion","regionValues","americas","region","epac","apac","newItem","itemToRemove","globalIndex","_","itemToEdit","isSame","handleRegionChange","SelectInput","sort","TimelineForm","COLORS","ColorPreview","errorMessage","resetForm","passing","Tag","CertificateForm","EventTagsForm","Fragments","UPDATE_EVENT","saveChanges","saveResult","useMutation","errorPolicy","onError","graphQLErrors","errorMessages","persist","onCompleted","match","useRouteMatch","useLocation","Formik","initialValues","updateEvent","enableReinitialize","changed","forOwn","cleanedInput","slug_history","rankedWinners","createdAt","updatedAt","__v","allowProjectSubmissionsPerChallenge","allowVoteOnOwnProject","slackChannel","variables","input","setSubmitting","validationSchema","yupSchema","formikProps","MaterialTabsLayout","DefaultTab","ConfigurationTab","AmericaScheduleTab","EmcaScheduleTab","AsiaScheduleTab","TimelineTab","QuestionsTab","SubmissionFormTab","OtherTab","BottomBar","onAdded","setResults","searchValue","setSearchValue","handleSearch","UserProfilesService","queryUsers","users","toLocaleString","AddIcon","eventLoading","organiserProfiles","drawerOpen","setDrawerOpen","handleOrganiserRemoved","handleOrganiserAdded","profile","AddOrganiserDrawer","SlackService","config","sendPreviewMessage","_axios","post","sendBulkMessage","recipients","uniqueId","sendContactMessage","emptyRenderer","attendees","minimal","filteredAttendees","attendee","searchParams","URLSearchParams","search","organiserProfilesMap","query","hasModal","has","activeModal","get","openSingleEdit","modal","original","openBulkEmail","selectedRows","openSlackMessage","openBulkEdit","resetSearch","accessor","readOnly","EditRegistrationModal","BulkEditRegistrationModal","BulkEmailModal","MessageAllInSlackModal","ob","toReturn","answer","custom","teamText","Status","Team","expertise","Tags","advisor","Location","hasOwnProperty","flattenObject","registrations","registrationsLoading","filtered","FilterHelpers","applyFilters","getPublicUserProfiles","reduce","acc","cur","appendCustomAnswers","FilterGroupMenu","AttendeeTable","teams","simplifiedView","registrationsMap","reviewStatus","setReviewStatus","completedStatus","setCompletedStatus","ratingRange","setRatingRange","bulkEdit","setBulkEdit","bulkEmail","setBulkEmail","handleRatingRangeChange","teamsFiltered","membersMapped","members","member","ownerMapped","allMembers","reviewedCount","memberCount","avgRating","sumBy","m","toFixed","reviewedPercent","Math","floor","complete","filteredMemberIds","res","reg","registrationIds","align","paddingRight","Slider","onChangeCommitted","valueLabelDisplay","step","selection","teamsLoading","TeamsTable","suffix","Statistic","actionText","actionLoading","setActionLoading","handleAction","Card","CardContent","groupedByStatus","getCount","statuses","total","rated","confirmed","confirmedToHub","accepted","acceptedToHub","cancelled","rejected","checkedIn","noShow","handleBulkAccept","bulkAcceptRegistrationsForEvent","handleBulkReject","bulkRejectRegistrationsForEvent","TeamsTab","AdminTab","handleResetScores","editModalOpen","handleMakeWinner","finalistChecked","setFinalistChecked","projectScores","setProjectScores","maxScore","ProjectScoresService","getScoreByEventSlugAndProjectId","tracknew","demo","EventHelpers","isEventOver","globalScore","sorter","extra","TableWithFilter","handleOnShow","handleOnResetScore","handleOnMakeWinner","searchText","setSearchText","searchedColumn","setSearchedColumn","searchInput","useRef","reRender","setReRender","selectedKeys","confirm","dataIndex","modifiedColumns","filterDropdown","setSelectedKeys","clearFilters","close","onKeyDown","Input","ref","onPressEnter","Space","AntButton","SearchOutlined","closeDropdown","filterIcon","onFilter","record","onFilterDropdownOpenChange","setTimeout","_searchInput$current","current","Highlighter","highlightStyle","searchWords","autoEscape","textToHighlight","defaultPageSize","dataSource","onRow","rowIndex","ProjectsTable","projects","baseURL","confirmWinnerOpen","setConfirmWinnerOpen","confirmResetOpen","setConfirmResetOpen","confirmResetWinnersOpen","setConfirmResetWinnersOpen","selectedProject","setSelectedProject","selectedId","setSelectedId","setEditModalOpen","toggle","setToggle","isSubmitting","setIsSubmitting","finalFilter","parseFloat","teamCode","locationnew","NumericSearch","EditProjectModal","Name","Punchline","Category","documents","achievements","makeWinner","newData","resetScores","resetWinners","reload","getProjectsForTrack","getProjectsForTrackAndLocation","trackSlug","locationSlug","locations","WinnerVoteService","submitVote","getVote","getResults","projectsLoading","TracksTab","paperButton","getItemStyle","isDragging","draggableStyle","userSelect","getListStyle","isDraggingOver","paddingBottom","DragDropList","topTitle","bottomTitle","renderTopItem","renderBottomItem","_value$top","_value$bottom","handleDragEnd","destination","droppableId","reorder","startIndex","endIndex","from","removed","move","droppableSource","droppableDestination","sourceClone","destClone","DragDropContext","onDragEnd","Droppable","provided","snapshot","innerRef","subheader","ListSubheader","Draggable","draggableId","draggableProps","dragHandleProps","getAvatarStyle","allProjects","allProjectsMap","isInitialRender","setIsInitialRender","setCategories","selectedCategory","setSelectedCategory","setRanked","uniqueCategories","Set","dragDropState","setDragDropState","newTopState","newBottomState","rankedIds","currentTopIds","newTopIdsFromState","currentBottomIds","newBottomIdsFromState","topChanged","bottomChanged","renderUnrankedItem","elevation","newState","otherCategoriesTop","otherCategoriesBottom","renderRankedItem","rankedListIds","rankedList","categoryProjects","some","globalScores","ScoresTab","RegionalScoresTab","_event$logo","_event$logo2","ArrowBackIosIcon","SidebarLayout","Image","transformation","Alert","severity","TuneIcon","EditPage","PeopleIcon","ParticipantsPage","HowToVoteIcon","FinalistPage","StarRateIcon","RatingPage","CodeIcon","ProjectsPage","AssessmentIcon","ResultsPage","SettingsIcon","ManagePage","DefaultPage","SlugPage"],"mappings":"sIAAA,6CAEO,MAAMA,EAAeA,CACxBC,EACAC,EAAWA,KAAM,MACjBC,EAAe,KACfC,GAAgB,KAEhB,MAAOC,EAAOC,GAAYC,mBAASN,IAC5BO,EAAOC,GAAYF,mBAASJ,GAE7BO,EAAWC,sBACbC,IACI,MAAMP,EAAQD,EAAgBQ,EAAEC,OAAOR,MAAQO,EAE/C,GADAN,EAASD,GACLG,EAAO,CACP,MAAMM,EAAWZ,EAASG,GAGtBI,EADAK,GAGS,QAIrB,CAACN,EAAON,EAAUE,IAGhBW,EAAQJ,sBAAY,KACtBL,EAASL,GACTQ,OAASO,IACV,CAACf,IAEEgB,EAAiBN,sBAAY,KAC/B,MAAMO,EAAMhB,EAASG,GACrB,OAAIa,GACAT,EAASS,GACFA,QAEPT,KAGL,CAACJ,EAAOH,IAEX,MAAO,CACHG,QACAC,WACAI,WACAK,QACAP,QACAC,WACAP,SAAUe,EACVE,MAAOd,IAAUJ,K,kCCpDzB,kHAuCA,MAAMmB,EAAYC,YAAWC,IAAK,CAC9BC,KAAMA,EAAGC,kBAAa,CAClBC,SAAU,EACVC,MAAO,OACPC,gBAAiBH,EACX,cACAF,EAAMM,QAAQC,WAAWC,QAEnCC,QAAS,CACLC,UAAW,OACXC,WAAY,iBAIL,MAAGC,OAAMC,WAAUC,YAAWZ,eAAc,MACvD,MAAMa,EAAWC,cACXC,EAAUnB,EAAU,CAAEI,gBAEtBgB,EAAY7B,sBACd8B,IACIJ,EAASK,YAAK,GAAGN,IAAYK,OAEjC,CAACL,EAAWC,IAOVM,EAAcC,kBAAQ,KACxB,MAAMC,EAAeV,EAASW,SAASC,QAAQX,EAAW,IAE1D,OADYY,YAAUd,EAAMe,GAAQA,EAAKR,OAASI,IAEnD,CAACT,EAAWD,EAASW,SAAUZ,IAElCgB,oBAAU,MACe,IAAjBP,GACAH,EAAUN,EAAK,GAAGO,OAEvB,CAACP,EAAMS,EAAaH,IAEvB,MAAMW,GAA6B,IAAjBR,EAAqBA,EAAc,EAC/CrB,EAAQ8B,cACRC,EAAWC,YAAchC,EAAMiC,YAAYC,KAAK,OAEtD,OACIC,IAAAC,cAAA,OAAKC,UAAWpB,EAAQhB,MACpBkC,IAAAC,cAACE,IAAI,CACDC,YAAaR,EAAW,WAAa,aACrChD,MAAO8C,EACPzC,SAzBSoD,CAACC,EAAOC,KACzBxB,EAAUN,EAAK8B,GAAUvB,OAyBjBwB,eAAe,UACfC,UAAU,UACVC,QAAQ,aACRC,cAAc,OACdC,aAAW,wBAEVnC,EAAKoC,IAAI,CAACC,EAAKC,IACZf,IAAAC,cAACe,IAAGC,OAAAC,OAAA,CACAC,IAAKL,EAAIM,MACTA,MAAON,EAAIM,OAnEnC,SAAmBL,GACf,MAAO,CACHM,GAAI,uBAAuBN,EAC3B,gBAAiB,4BAA4BA,GAiEzBO,CAAUP,GAAM,CACpBjC,QAASc,EAAW,CAAEtB,QAASQ,EAAQR,SAAY,QAI/D0B,IAAAC,cAACsB,IAAG,CAACC,GAAI,EAAGC,EAAG,GACXzB,IAAAC,cAACyB,IAAM,KACFjD,EAAKoC,IAAI,EAAGM,MAAKnC,OAAM2C,aAAaZ,IAE7Bf,IAAAC,cAAC2B,IAAK,CACFT,IAAKA,EACLU,OAAO,EACP7C,KAAM,GAAGL,IAAYK,IACrB2C,UAAWA,KAIvB3B,IAAAC,cAAC6B,IAAQ,CAACC,GAAIpD,S,kCCrHlC,+EAqDeqD,IA1COA,EAClBC,OACAC,UAAUA,SACVC,WAAWA,SACXC,OAAOA,SACPC,QACAC,UACAC,aAAa,SACbC,SAAS,SAET,MAAMC,EAAevF,sBAAY,KAC7BgF,IACAC,KACD,CAACD,EAASC,IAEPO,EAAWxF,sBAAY,KACzBgF,IACAE,KACD,CAACF,EAASE,IAEb,OACIpC,IAAAC,cAAC0C,IAAM,CACHV,KAAMA,EACNW,kBAAgB,qBAChBC,mBAAiB,4BAEjB7C,IAAAC,cAAC6C,IAAW,CAACzB,GAAG,sBAAsBgB,GACtCrC,IAAAC,cAAC8C,IAAa,KACV/C,IAAAC,cAAC+C,IAAiB,CAAC3B,GAAG,4BACjBiB,IAGTtC,IAAAC,cAACgD,IAAa,KACVjD,IAAAC,cAACiD,IAAM,CAACC,QAASV,GAAeF,GAChCvC,IAAAC,cAACiD,IAAM,CAACC,QAAST,EAAUU,MAAM,UAAU1C,QAAQ,aAC9C8B,O,kCC9CrB,wEAMA,MAAM7E,EAAYC,YAAWC,IAAK,CAC9BC,KAAM,CACFI,gBAAiB,cA8DVmF,IA1DDA,EACVC,UACAC,YAAY,UACZC,SACAC,kBAAiB,MAEjB,MAAM3E,EAAUnB,IAEV+F,EAAeA,IACZF,EAEDxD,IAAAC,cAACiD,IAAM,CACHxC,QAAQ,YACR0C,MAAM,UACND,QAASK,EAAOL,SAEfK,EAAOG,MAPI,KAYxB,OAAKL,GAAYG,EAiBbzD,IAAAC,cAACsB,IAAG,CACAqC,GAAI,GACJC,GAAI,GACJC,GAAI,EACJC,GAAI,EACJC,QAAQ,OACRC,cAAc,SACdzF,WAAW,SACX0F,eAAe,SACfhE,UAAWpB,EAAQhB,MAEnBkC,IAAAC,cAACkE,IAAe,MAChBnE,IAAAC,cAACsB,IAAG,CAACC,GAAI,GACLxB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAAS6C,IAEhCC,GAAUxD,IAAAC,cAACsB,IAAG,CAACC,GAAI,GAAIkC,MA9BxB1D,IAAAC,cAACsB,IAAG,CACAwC,GAAI,EACJF,GAAI,EACJD,GAAI,EACJE,GAAI,EACJE,QAAQ,OACRC,cAAc,MACdC,eAAe,YAEdR,O,kCC5CjB,wEAMA,MAAM/F,EAAYC,YAAWC,IAAK,CAC9BwG,MAAO,CACHL,QAAS,OACTM,SAAU,QAEdC,KAAM,CACFC,OAAQ,MAIVC,EAAUzE,IAAM0E,KAClB,EACIC,WACA5H,QACA6H,aACAxD,QACAyD,YAAW,EACXC,SAASA,SACT7H,WAAWA,SACX8H,UACAC,cACAC,OACArI,YAEA,MAAMkC,EAAUnB,IACV0C,EAAenD,sBACjBC,IACIA,EAAE+H,iBACFjI,EAASE,EAAEC,OAAOR,QAEtB,CAACK,IAGCkI,EAAQhG,kBAAQ,KAClB,GAAIiG,MAAMC,QAAQN,IAAYA,EAAQO,OAAS,EAC3C,OAAOP,EAEX,OAAQE,GACJ,IAAK,UACD,OAAOM,gBAAcC,UACzB,IAAK,cACD,OAAOD,gBAAcE,cACzB,IAAK,cACD,OAAOF,gBAAcG,cACzB,IAAK,sBACD,OAAOH,gBAAcI,qBACzB,IAAK,iBACD,OAAOJ,gBAAcK,eACzB,IAAK,SACD,OAAOL,gBAAcM,QACzB,IAAK,YACD,OAAON,gBAAcO,UACzB,IAAK,WACD,OAAOP,gBAAcQ,WACzB,IAAK,WACD,OAAOR,gBAAcS,UACzB,IAAK,OACD,OAAOT,gBAAcU,MACzB,IAAK,QACD,OAAOV,gBAAcW,OACzB,IAAK,QACD,OAAOX,gBAAcY,OACzB,IAAK,SACD,OAAOZ,gBAAca,SACzB,IAAK,MACD,OAAOb,gBAAcc,KACzB,IAAK,QACD,OAAOd,gBAAce,OACzB,IAAK,OACD,OAAOf,gBAAcgB,MACzB,QACI,MAAO,KAEhB,CAACtB,EAAMF,IAEJyB,EAAiB5J,IAAUiI,EAAW,GAAK,IAE3C4B,EAAc,CAChB5B,WACA6B,OAAQvJ,GAAKA,EAAE+H,kBAkBnB,OAhBIL,IACA4B,EAAYE,YAAc,CAAC/J,EAAQ,KAE3BoD,IAAAC,cAAA,OAAKC,UAAWpB,EAAQuF,OACnBzH,EAAMiE,IAAIrB,GACPQ,IAAAC,cAAC2G,IAAI,CACDzF,IAAK3B,EACL4B,MAAO5B,EACPU,UAAWpB,EAAQyF,UASvCvE,IAAAC,cAAC4G,IAAS,CACNlC,SAAUA,EACV5H,MAAOA,EACP+J,WAAS,EACTlC,WAAY7H,GAAS6H,EACrBxD,MAAOA,EACP0D,OAAQA,EACR7H,SAAUoD,EACV2E,YAAaA,EACb+B,QAAM,EACNC,YAAaP,EACb7J,MAAO4J,GAENrB,EAAMtE,IAAIrB,GACPQ,IAAAC,cAACgH,IAAQ,CAAC9F,IAAK3B,EAAK5C,MAAQ4C,EAAK4B,MAAOxE,MAAO4C,EAAK5C,OAChDoD,IAAAC,cAACiH,IAAY,CACTC,QAAS3H,EAAK4B,MACdgG,UAAW5H,EAAK6H,cAS7B5C,O,4TC9HA,IAAG6C,WAAUC,WAAUC,kBAClC,MAQMC,EAAevK,sBACjBwK,IACIF,EAAYE,GACZJ,EAAS,IAEb,CAACE,EAAaF,IAGlB,OACItH,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAAC0H,IAAW,CAACD,KAAK,QAAQ9G,aAAW,+BAlBhC,CACT,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,GAAI,IACL,CAAC,IAAK,KACN,CAAC,MAAO,MAcMC,IAAI,EAAEO,EAAOxE,KACfoD,IAAAC,cAACiD,IAAM,CACHC,QAASsE,EAAaG,KAAK,KAAMhL,GACjCwG,MAAOmE,IAAa3K,EAAQ,eAAYW,EACxC4D,IAAKvE,GAEJwE,O,gDCxBV,IACXyG,YACAC,YACAC,kBACAC,eACAC,cACAC,WACAX,cAGIvH,IAAAC,cAACsB,IAAG,CAACyC,QAAQ,OAAOC,cAAc,MAAMzF,WAAW,UAC/CwB,IAAAC,cAACkI,IAAU,CAACxD,UAAWoD,EAAiB5E,QAAS6E,GAC7ChI,IAAAC,cAACmI,IAAkB,OAEvBpI,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aAAY,QACtBmH,EAAY,EAAE,OAAKC,IAGjC9H,IAAAC,cAACkI,IAAU,CAACxD,UAAWsD,EAAa9E,QAAS+E,GACzClI,IAAAC,cAACoI,IAAgB,QClBjC,MAAM1K,EAAYC,YAAWC,IAAK,CAC9BS,QAAS,CACL0F,QAAS,OACTC,cAAe,SACfzF,WAAY,SACZ,CAACX,EAAMiC,YAAYwI,GAAG,OAAQ,CAC1BrE,cAAe,MACfC,eAAgB,gBAChBI,SAAU,YAuCPiE,MAlCIC,IACf,MAAM1J,EAAUnB,KACV,gBACFoK,EAAe,YACfE,EAAW,UACXH,EAAS,SACTR,EAAQ,SACRY,EAAQ,aACRF,EAAY,YACZR,EAAW,SACXD,EAAQ,UACRM,GACAW,EAEJ,OACIxI,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQR,SACpB0B,IAAAC,cAACwI,EAAc,CACXnB,SAAUA,EACVC,SAAUA,EACVC,YAAaA,IAEjBxH,IAAAC,cAACyI,EAAU,CACPnB,SAAUA,EACVM,UAAWA,EACXC,UAAWA,EACXC,gBAAiBA,EACjBC,aAAcA,EACdC,YAAaA,EACbC,SAAUA,M,mBC1C1B,MAAMvK,EAAYC,YAAWC,IAAK,CAC9B8K,iBAAkB,CACdC,OAAQ,EACRxK,WAAYP,EAAMM,QAAQgJ,QAAQ0B,KAClCC,SAAU,SACVC,UAAW,cAEfC,eAAgB,CACZ5F,MAAO,QACP6F,WAAY,WAuFLC,MAnFGA,EAAGC,WAAUC,UAAU,GAAIC,eAAcC,kBACvD,MAAMxK,EAAUnB,IACV4L,EAAkBJ,EAAS7D,OAAS,EAEpCkE,EAAWrK,kBAAQ,KACrB,IAAIsK,EAAO,IAAIL,GA4Bf,OA3BIC,IACAI,EAAOA,EAAKC,OAAO,CACfvI,IAAK,SACLC,MACIpB,IAAAC,cAAC0J,UAAO,CACJC,MAAO,CAAEC,eAAgB,OAAQzG,MAAO,WACxC0G,KAAMX,EAAStI,IAAIrB,GAAQA,EAAKuK,QAChCC,SAAS,aACTC,QAASX,EACJzI,IAAIqJ,GAC4B,kBAAlBA,EAAOC,QACP,CACH/I,MAAO8I,EAAOC,OACdhJ,IAAK+I,EAAO7I,KAMvB+I,OAAO5K,GAAQA,IACvB,mBAIL6K,OAAQA,UAGTZ,GACR,CAACL,EAASC,EAAcC,EAAaH,IAExC,OACInJ,IAAAC,cAACqK,IAAOC,IAAG,CACPrK,UAAWpB,EAAQ6J,iBACnB6B,SAAU,CACNC,QAAS,CACL7B,OAAQ,QAEZ8B,OAAQ,CACJ9B,OAAQ,IAGhB+B,QAASpB,EAAkB,UAAY,UAEvCvJ,IAAAC,cAACsB,IAAG,CACAE,EAAG,EACHmC,GAAI,EACJI,QAAQ,OACRC,cAAc,MACdzF,WAAW,SACX8F,SAAS,QAETtE,IAAAC,cAACsB,IAAG,CAACtD,MAAM,OAAOuD,GAAI,GAClBxB,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,YACRR,UAAWpB,EAAQkK,gBAElBG,EAAS7D,OAAO,cAGzBtF,IAAAC,cAAAD,IAAA4K,SAAA,KACKpB,EAAS3I,IAAIwJ,GACVrK,IAAAC,cAACsB,IAAG,CAACJ,IAAKkJ,EAAOlJ,IAAK0J,GAAI,EAAGrJ,GAAI,GAC7BxB,IAAAC,cAACiD,IAAM,CACHC,QAASkH,EAAOA,OAAOzC,KAAK,KAAMuB,GAClCzB,KAAK,QACLhH,QAAQ,YAEP2J,EAAOjJ,aC3FzB,OACX,gBAA6B,CAAC0J,EAAMzJ,EAAI0J,IAC/BA,EACED,EAAKV,OAAOY,GAAOA,EAAIjB,OAAO1I,KAAQ0J,GADpBD,EAG7B,kBAA+B,CAACA,EAAMzJ,EAAI0J,IACjC3F,MAAMC,QAAQ0F,IAAuC,IAAvBA,EAAYzF,OACxCwF,EAAKV,OAAOY,IAAgD,IAAzCD,EAAYE,QAAQD,EAAIjB,OAAO1I,KADWyJ,EAGxE,kBAA+B,CAACA,EAAMzJ,EAAI0J,IAC/BD,EAAKV,OAAOY,IAAG,IAAAE,EAAA,OAA8C,KAA5B,QAAdA,EAAAF,EAAIjB,OAAO1I,UAAG,IAAA6J,OAAA,EAAdA,EAAgBD,QAAQF,MAEtD,eAA4B,CAACD,EAAMzJ,EAAI0J,IAC5BD,EAAKV,OAAOY,GAAOA,EAAIjB,OAAO1I,KAAQ0J,ICgBrD,MAAMpN,EAAYC,YAAWC,IAAK,CAC9BS,QAAS,CACLL,MAAO,OACPkN,UAAW,SACXC,SAAU,YAEdC,MAAO,CACHjN,WAAYP,EAAMM,QAAQC,WAAWC,OAEzCiN,SAAUA,EAAGC,aAAYC,qBACrB,MAAMC,EAAa,GACbC,EAAkB,CACpBC,OAAQ,UACR,UAAW,CACPvN,WAAY,mBACZwN,WAAY,kBAGpB,MAC0B,oBAAfL,GACmB,oBAAnBC,EAEA,IACAC,KACAC,GAGAD,GAGfI,UAAW,CACPzN,WAAY0N,YAAOjO,EAAMM,QAAQgJ,QAAQ0B,KAAM,KAEnDkD,aAAc,GACdC,cAAe,CACX5I,MAAO,mBACP6F,WAAY,OACZgD,SAAU,OACVC,WAAY,OACZC,WAAY,SACZP,WAAY,mBAEhBQ,oBAAqB,CACjBhJ,MAAO,oBAEXiJ,kBAAmB,CACfjJ,MAAO,oBAEXkJ,UAAW,GACXC,YAAa,GACbC,YAAa,CACTpO,WAAY,uBAIdqO,EAASA,EACXC,UACA5C,OACAyB,aACAoB,cACAC,mBACAC,kBACAxD,eACAmC,qBAEA,MAAM1M,EAAUnB,EAAU,CAAE4N,eACtBuB,EAAgB9M,IAAMb,QACxB,SAEO4N,EAAQC,YACRC,EAAQD,WAEf,KAEE,cACFE,EAAa,kBACbC,EAAiB,aACjBC,EAAY,KACZC,EAAI,WACJC,EAAU,gBACVvF,EAAe,YACfE,EAAW,YACXsF,EAAW,UACXzF,EAAS,SACTR,EAAQ,SACRY,EAAQ,aACRF,EAAY,YACZR,EAAW,iBACXgG,EAAgB,YAChBlE,EACAmE,OAAO,SAAElG,EAAQ,UAAEM,IACnB6F,mBACA,CACIhB,UACA5C,OACA6D,YAAaC,EACbd,gBACAe,kBAAkB,EAClBC,aAAc,CACVjG,UAAW,EACXN,SAAUqF,EAAmB,GAAK,MAG1CmB,aACAC,YACAC,cACAC,gBACAC,eACAC,IACQvB,GACAuB,EAAM1B,QAAQzN,KAAKyN,GAAW,CAE1B,CACIrL,GAAI,YAGJ8I,OAAQA,EAAGkE,mCACPrO,IAAAC,cAAA,WACID,IAAAC,cAACqO,IAAQrN,OAAAC,OAAA,CACLkC,MAAM,WACFiL,OAMhBE,KAAMA,EAAGvD,SACLhL,IAAAC,cAAA,OAAKkD,QAAShG,GAAKA,EAAEqR,mBACjBxO,IAAAC,cAACqO,IAAQrN,OAAAC,OAAA,CACLkC,MAAM,WACF4H,EAAIyD,mCAKrB/B,MAMbgC,EAAiBxR,sBACnB8N,IACkC,oBAAnBQ,GACPR,EAAI2D,mBAAmB3D,EAAI4D,YAGL,oBAAfrD,GACPA,EAAWP,IAGnB,CAACO,EAAYC,IAGXqD,EAAajC,GAAoB9C,EAAKxE,OAAS,IACjDtF,IAAAC,cAACsI,EAAU,CACPR,gBAAiBA,EACjBE,YAAaA,EACbH,UAAWA,EACXR,SAAUA,EACVY,SAAUA,EACVF,aAAcA,EACdR,YAAaA,EACb+F,YAAaA,EACbhG,SAAUA,EACVM,UAAWA,EACX1C,MAAO2E,EAAKxE,SAIdhC,GAAWwG,GAAwB,IAAhBA,EAAKxE,OAExBwJ,EAAc3P,kBAAQ,KACxB,IAAI4P,EAASrC,EAAQpH,OAKrB,OAJIuH,IACAkC,GAAU,GAGPA,GACR,CAACrC,EAAQpH,OAAQuH,IAEpB,OAAIvJ,EACOtD,IAAAC,cAACoD,IAAK,CAACC,SAAO,IAGjBtD,IAAAC,cAAAD,IAAA4K,SAAA,KACKiE,EACAhC,GACG7M,IAAAC,cAACiJ,EAAS,CACNC,SAAUqE,EACVpE,QAASuD,EACTtD,aAAcA,EACdC,YAAaA,IAGrBtJ,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQR,SACpB0B,IAAAC,cAAC+O,IAAK/N,OAAAC,OAAA,GAAKgM,IAAe,CAAEhN,UAAWpB,EAAQuM,QAC3CrL,IAAAC,cAACgP,IAAS,CAAC/O,UAAWpB,EAAQ+M,WACzBuB,EAAavM,IAAIqO,GACdlP,IAAAC,cAACkP,IAAQlO,OAAAC,OAAA,GACDgO,EAAYE,sBAAqB,CACrClP,UAAWpB,EAAQiN,eAElBmD,EAAYjF,QAAQpJ,IAAIwO,GACrBrP,IAAAC,cAACqP,IACOD,EAAOE,eACPF,EAAOG,wBAGXxP,IAAAC,cAACwP,IAAc,CACXC,OACIL,EAAOM,SACPN,EAAOO,SAEXC,UACIR,EAAOS,aACD,OACA,MAEVhR,QAAS,CACLhB,KAAMgB,EAAQkN,cACd0D,OAAQ5Q,EAAQsN,oBAChB2D,KAAMjR,EAAQuN,mBAElB2D,cAAeC,IACfC,cAAY,GAEZlQ,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,YACf2O,EAAOc,OAAO,iBAQ3CnQ,IAAAC,cAACmQ,IAAcjD,IACVE,EAAKxM,IAAI,CAACmK,EAAKqF,KAAO,IAADC,EAElB,OADAhD,EAAWtC,GACJ,CACHhL,IAAAC,cAACkP,IAAQlO,OAAAC,OAAA,GACD8J,EAAIuF,cAAa,CACrBrQ,UAAWpB,EAAQwM,SACnBnI,QAASuL,EAAe9G,KAAK,KAAMoD,KAElCA,EAAIwF,MAAM3P,IAAI4P,GAEPzQ,IAAAC,cAACqP,IAASrO,OAAAC,OAAA,GACFuP,EAAKC,eAAc,CACvBvN,QAAShG,IAGD,cADAsT,EAAKpB,OAAOhO,IAGZlE,EAAEqR,qBAITiC,EAAKN,OAAO,WAK7BnF,EAAI4D,YACA5O,IAAAC,cAACkP,IAAQ,CACLjP,UAAWpB,EAAQ0N,YACnBrL,KACqB,QAAjBmP,EAAAtF,EAAIuF,qBAAa,IAAAD,OAAA,EAAjBA,EAAmBnP,KACnB,aAGJnB,IAAAC,cAACqP,IAAS,CAACqB,QAAS7B,GACftD,EAAeR,WAS/C6D,IAMjBpC,EAAOmE,aAAe,CAClB9G,KAAM,GACN4C,QAAS,GACTnB,WAAYA,OACZoB,YAAa,GACbtD,cAAc,EACduD,kBAAkB,EAClBC,iBAAiB,GAGNJ,Q,SCtUf,MAAMoE,EAAYA,CAACC,EAAMC,EAAM5P,EAAK6P,KAAkB,IAADC,EAAAC,EAAAC,EAAAC,EACjD,MAAO,CACgB,QADhBH,EACC,OAAJH,QAAI,IAAJA,GAAY,QAARI,EAAJJ,EAAM/G,cAAM,IAAAmH,OAAR,EAAJA,EAAe/P,UAAI,IAAA8P,IAAID,EACJ,QADgBG,EAC/B,OAAJJ,QAAI,IAAJA,GAAY,QAARK,EAAJL,EAAMhH,cAAM,IAAAqH,OAAR,EAAJA,EAAejQ,UAAI,IAAAgQ,IAAIH,I,uBC6ChBK,MALY,CACvBC,OAxCcC,EAAGlC,aACjB,MAAM,YAAEtE,EAAW,gBAAEyG,EAAe,UAAEC,EAAS,GAAEpQ,GAAOgO,EAClDhP,EAAenD,sBACjBC,IACIsU,EAAUtU,EAAEC,OAAOR,QAEvB,CAAC6U,IAGC1M,EAAU5F,kBAAQ,KACpB,MAAMuS,EAAUC,YAAQH,EAAiBxG,GAAOA,EAAIjB,OAAO1I,IAC3D,OAAOJ,OAAO2Q,KAAKF,GAAS7Q,IAAIjE,IAAK,CACjCA,QACAwE,MAAO,GAAGxE,MAAU8U,EAAQ9U,GAAO0I,cAExC,CAACkM,EAAiBnQ,IAErB,OACIrB,IAAAC,cAAC4G,IAAS,CACN+C,MAAO,CAAE3L,MAAO,QAChB8I,QAAM,EACNnC,WAAY,aACZhI,MAAOmO,EACP9N,SAAUoD,EACVmE,OAAO,QACPwC,YAAa,CACT6K,QAAQ,GAEZnR,QAAQ,UAEPqE,EAAQlE,IAAI,EAAGjE,QAAOwE,WACnBpB,IAAAC,cAAA,UAAQkB,IAAKvE,EAAOA,MAAOA,GACtBwE,MASjBgJ,OC5CyB,iBCI7B,MAAMzM,EAAYC,YAAWC,IAAK,CAC9BiU,OAAQ,CACJC,QAASlU,EAAMmU,QAAQ,IAE3BC,eAAgB,CACZF,QAASlU,EAAMmU,QAAQ,GACvB5T,WAAYP,EAAMM,QAAQ+T,gBAAgBrJ,SCPlD,MAAMkE,EAAU,CACZoF,aAAcd,EACde,eDyDyB,CACzBd,OAjDcC,EAAGlC,aACjB,MAAMvQ,EAAUnB,KACV,YAAEoN,EAAW,gBAAEyG,EAAe,UAAEC,EAAS,GAAEpQ,GAAOgO,EAClDgD,EAAiBtH,GAAe,GAChC1K,EAAenD,sBACjBC,IACIsU,EAAUtU,EAAEC,OAAOR,QAEvB,CAAC6U,IAGC1M,EAAU5F,kBAAQ,KACpB,MAAMuS,EAAUC,YAAQH,EAAiBxG,GAAOA,EAAIjB,OAAO1I,IAC3D,OAAOJ,OAAO2Q,KAAKF,GAAS7Q,IAAIjE,IAAK,CACjCA,QACAwE,MAAO,GAAGxE,MAAU8U,EAAQ9U,GAAO0I,cAExC,CAACkM,EAAiBnQ,IAErB,OACIrB,IAAAC,cAAC4G,IAAS,CACN+C,MAAO,CAAE3L,MAAO,QAChB8I,QAAM,EACNnC,WAAY,qBACZhI,MAAOyV,EACPpV,SAAUoD,EACV2G,YAAa,CACTnC,UAAU,GAEdnE,QAAQ,UAEPqE,EAAQlE,IAAI,EAAGjE,QAAOwE,WACnBpB,IAAAC,cAAA,UACIC,WACuC,IAAnCmS,EAAepH,QAAQrO,GACjBkC,EAAQmT,eACRnT,EAAQgT,OAElB3Q,IAAKvE,EACLA,MAAOA,GAENwE,MASjBgJ,OD/D2B,mBEK3BkI,eCiByB,CACzBhB,OAtBcC,EAAGlC,aACjB,MAAM,YAAEtE,EAAW,UAAE0G,GAAcpC,EAC7BhP,EAAenD,sBACjBC,IACIsU,EAAUtU,EAAEC,OAAOR,QAEvB,CAAC6U,IAGL,OACIzR,IAAAC,cAAC4G,IAAS,CACN+C,MAAO,CAAE3L,MAAO,QAChB2G,WAAY,iBACZhI,MAAOmO,EACP9N,SAAUoD,EACVmE,OAAO,QACP9D,QAAQ,YAOhB0J,OH5B2B,mBEU3B4C,SAAU,CACNsE,OAAQA,IAAM,KACdlH,OAAQ,KACRmI,WAAW,IAIbtF,EAAU,CACZuF,QAAS,CACLC,SJVeD,CAAC1B,EAAMC,EAAM5P,KAChC,MAAOuR,EAAGC,GAAK9B,EAAUC,EAAMC,EAAM5P,EAAK,GAC1C,OAAOuR,EAAIC,GISPC,eAAe,GAEnBC,WAAY,CACRJ,SJTkBI,CAAC/B,EAAMC,EAAM5P,KACnC,MAAOuR,EAAGC,GAAK9B,EAAUC,EAAMC,EAAM5P,EAAK,IAC1C,OAAO2R,YAAQ,CAACJ,EAAGC,IACRD,EAAEK,cAAcJ,GADpBG,CAEJJ,EAAGC,IIMFC,eAAe,GAEnBI,SAAU,CACNP,SJNgBO,CAAClC,EAAMC,EAAM5P,KACjC,MAAOuR,EAAGC,GAAK9B,EAAUC,EAAMC,EAAM5P,EAAK,GAC1C,OAAO2R,YAAQ,CAACJ,EAAGC,IACR,IAAIM,KAAKP,GAAK,IAAIO,KAAKN,GAD3BG,CAEJJ,EAAGC,IIGFC,eAAe,GAEnBM,YAAa,CACTT,SJHmBS,CAACpC,EAAMC,EAAM5P,KACpC,MAAOuR,EAAGC,GAAK9B,EAAUC,EAAMC,EAAM5P,EAAK,IAC1C,OAAO2R,YAAQ,CAACJ,EAAGC,IACRD,EAAEpN,OAASqN,EAAErN,OADjBwN,CAEJJ,EAAGC,IIAFC,eAAe,GAEnB5F,SAAU,CACN4F,eAAe,GAEnBO,QAAS,CACLP,eAAe,K,kCEtCvB,qDAQA,MAAMjV,EAAYC,YAAWC,IAAK,CAC9BC,KAAMA,EAAGsF,YAAO,CACZlF,gBAAiBkV,YAAQhQ,EAAO,KAChCiQ,YAAajQ,EACbkQ,YAAa,IAEjBlS,MAAOA,EAAGgC,YAAO,IACVvF,EAAM0V,WAAWC,SACpBvK,WAAY,OACZ7F,MAAO,aAaTqQ,EAAcA,EAAGC,SAAQC,uBAC3B,MAAMC,EAASzU,kBAAQ,KACnB,GAAIwU,EACA,OAAQD,GACJ,KAAKG,uBAAqBC,SAASC,aAAa1S,GAChD,KAAKwS,uBAAqBC,SAASE,aAAa3S,GAC5C,OAAOwS,uBAAqBC,SAASG,QAKjD,OAAOJ,uBAAqBC,SAASJ,IACtC,CAACC,EAAkBD,IAChB5U,EAAUnB,EAAUiW,GAC1B,OAAKA,EAED5T,IAAAC,cAAC2G,IAAI,CACD9H,QAASA,EACT4B,QAAQ,WACRgH,KAAK,QACLtG,MAAOwS,EAAOxS,QANFpB,IAAAC,cAAC2G,IAAI,CAACc,KAAK,QAAQtG,MAAM,SAYjDqS,EAAY7C,aA9BS,CACjB+C,kBAAkB,GA+BPF,O,kCC1Df,4BAwBeS,IApBSA,EACpBtX,QACAK,WACAkX,OAAO,GACPnP,cAAc,iBAGVhF,IAAAC,cAACmU,IAAM,CACHpP,YAAaA,EACbpI,MAAOA,EACPK,SAAUA,EACVoX,SAAO,EACPtP,QAASoP,EAAKtT,IAAIyT,IAAG,CACjB1X,MAAO0X,EAAIlT,MACXA,MAAOkT,EAAIlT,Y,kCClB3B,yDAiCemT,IAzBMA,EACjBC,OACAC,cAAa,EACbtL,YAAW,EACXuL,WAAWA,aAEX,MAAMC,EAAWH,EAAO,GAAGA,EAAKI,aAAaJ,EAAKK,WAAa,GACzDC,EAAYN,EAAOA,EAAKO,MAAQ,GAEtC,OACI/U,IAAAC,cAAC+U,IAAQ,CAACxR,OAAQiR,EAAYtR,QAASuR,EAAUvL,SAAUA,GACtDqL,EACGxU,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACgV,IAAc,KACXjV,IAAAC,cAACiV,IAAM,CAACC,IAAKR,EAAUS,IAAKZ,EAAOA,EAAKa,OAAS,MAErDrV,IAAAC,cAACiH,IAAY,CAACC,QAASwN,EAAUvN,UAAW0N,KAGhD9U,IAAAC,cAACiH,IAAY,CAACC,QAAQ,c,kCC3BtC,oCAyBemO,IApBkBA,EAC7B1Y,QACAK,WACA+H,cAAc,gBACdyB,cACA8O,mBAAkB,KAGdvV,IAAAC,cAACmU,IAAM,CACHpP,YAAaA,EACbpI,MAAOA,EACPK,SAAUA,EACV8H,QAAS8O,uBAAqB2B,QAAQ3U,IAAI6S,IAAM,CAC5CtS,MAAOsS,EAAOtS,MACdxE,MAAO8W,EAAOrS,S,kCCnB9B,2MA2Be,MAAGoJ,UAASgL,UAAU,GAAIvT,cACrC,MAAMtD,EAAWC,cACX6W,EAAUC,YAAYC,KACtBpB,EAAOmB,YAAYE,KACnBvV,EAAQqV,YAAYG,MACnBC,EAASC,GAAclZ,oBAAS,IAChCmZ,EAAkBC,GAAuBpZ,oBAAS,GACnDqZ,EAAc5Z,YAAa,KAC3B,EAAE6Z,GAAMC,cACRC,EAAU/Z,YAAa,GAAIK,GACxBA,GAA0B,IAAjBA,EAAM0I,OAGhB1I,EAAM0I,OAAS,GACR8Q,EAAE,4BADb,EAFWA,EAAE,sBAQXG,EAAWha,YAAa,IACxBia,EAAOja,YAAa,GAAIK,GACrB4Z,GAAwB,IAAhBA,EAAKlR,OAIdkR,EAAKlR,OAAS,IACP8Q,EAAE,yBADb,EAHWA,EAAE,mBASXK,EAAYla,YAAa,IACzBma,EAAUna,YAAa,IACvBoa,EAAUpa,YACZ,GACAW,sBACIN,IACI,GAAI8Z,EAAQ9Z,OAAS8Z,EAAQ9Z,MAAM0I,OAAS,EAAG,CAC3C,IAAK1I,GAA0B,IAAjBA,EAAM0I,OAChB,OAAO8Q,EAAE,4BAEb,GAA8B,IAA1BxZ,EAAMqO,QAAQ,QACd,OAAOmL,EAAE,2BAKrB,CAACM,EAAQ9Z,MAAOwZ,KAIlBQ,EAAS,CACXT,EACAG,EACAC,EACAC,EACAC,EACAC,EACAC,GAGE/C,EAAS,CACX0C,QAASA,EAAQ1Z,MACjB2Z,SAAUA,EAAS3Z,MACnBia,aAAcV,EAAYvZ,MAC1B4Z,KAAMA,EAAK5Z,MACXka,SAAUJ,EAAQ9Z,MAClBma,SAAUJ,EAAQ/Z,OAGhBH,EAAWS,sBAAY,KACzB,MAAM8Z,EAASJ,EACV/V,IAAIoW,GACMA,EAAMxa,YAEhB2N,OAAOrN,GAA0B,qBAAVA,GAE5B,QAAIia,EAAO1R,OAAS,KAChB0R,EAAOE,QAAQna,IACX6B,EAASuY,IAAsBpa,OAE5B,IAGZ,CAAC6B,EAAUgY,IAERQ,EAAkBla,sBAAY,KAChC,GAAKT,IAgBL,OAfAuZ,GAAW,GACXqB,IAAaC,iBAAiB5B,EAASpV,EAAMiX,KAAM/C,EAAKO,MAAOnB,GAC1D4D,KAAK,KACF5Y,EACIuY,IACIf,EAAE,mBAAoB,CAAE5B,KAAMA,EAAKO,YAI9C0C,MAAMha,IACHmB,EAASuY,IAAsBf,EAAE,wBAEpCsB,QAAQ,KACL1B,GAAW,KAEZ,MACR,CAACvZ,EAAUiZ,EAASpV,EAAMiX,KAAM/C,EAAKO,MAAOnB,EAAQhV,EAAUwX,IAE3DuB,EAAgBza,sBAAY,KACzBT,MACLuZ,GAAW,GACXqB,IAAaO,cACTlC,EACApV,EAAMiX,KACN9B,EACA7B,EACA6C,EAAU7Z,OAET4a,KAAK1N,IACFlL,EACIuY,IAAwBf,EAAE,IAAK,CAAEyB,iBAAkB,SAG1DJ,MAAMha,IACHmB,EAASuY,IAAsBf,EAAE,wBAEpCsB,QAAQ,KACL1B,GAAW,GACX9T,QAET,CACCzF,EACAiZ,EACApV,EAAMiX,KACN9B,EACA7B,EACA6C,EAAU7Z,MACVgC,EACAsD,EACAkU,IAGJ,OAAKX,EAAQnQ,OAGTtF,IAAAC,cAAC0C,IAAM,CAACmV,YAAU,EAAC7V,KAAMwI,EAASvI,QAASA,GACvClC,IAAAC,cAAC8C,IAAa,KACV/C,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,EAASiC,aAAa,GACxChY,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAAC+B,IAAa,CACVC,KAAMgU,EACN5T,MAAO+T,EAAE,SACT9T,QAAS8T,EAAE,gBAAiB,CACxB+B,OAAQ1C,EAAQnQ,SAEpBpD,QAASgU,EACT9T,KAAMuV,IAEV3X,IAAAC,cAACmY,IAAU,CACPC,QAAQ,aACRC,WACI7C,EAAQnQ,OAAS,2BAGzBtF,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQ6X,WAAS,GAChCnC,EAAE,yBAEPpW,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAOuZ,EAAYvZ,MACnBK,SAAUkZ,EAAYtZ,SACtBE,MAAOoZ,EAAYpZ,MACnB6b,aAAW,EACXxX,MAAOgV,EAAE,eACTxR,WAAYwR,EAAE,kBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO0Z,EAAQ1Z,MACfK,SAAUqZ,EAAQzZ,SAClBE,MAAOuZ,EAAQvZ,MACf6b,aAAW,EACXxX,MAAOgV,EAAE,YACTxR,WAAYwR,EAAE,qBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO2Z,EAAS3Z,MAChBK,SAAUsZ,EAAS1Z,SACnBE,MAAOwZ,EAASxZ,MAChB6b,aAAW,EACXxX,MAAOgV,EAAE,aACTxR,WAAYwR,EAAE,uBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC4Y,IAAa,CACVjc,MAAO4Z,EAAK5Z,MACZkc,UAAQ,EACR7b,SAAUuZ,EAAK3Z,SACf+b,aAAW,EACXxX,MAAOgV,EAAE,oBAGjBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO6Z,EAAU7Z,MACjBK,SAAUwZ,EAAU5Z,SACpBE,MAAO0Z,EAAU1Z,MACjB6b,aAAW,EACXxX,MAAOgV,EAAE,qBACTxR,WAAYwR,EAAE,oBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO8Z,EAAQ9Z,MACfK,SAAUyZ,EAAQ7Z,SAClBE,MAAO2Z,EAAQ3Z,MACf6b,aAAW,EACXxX,MAAOgV,EAAE,mBACTxR,WAAYwR,EAAE,6BAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO+Z,EAAQ/Z,MACfK,SAAU0Z,EAAQ9Z,SAClBE,MAAO4Z,EAAQ5Z,MACf6b,aAAW,EACXxX,MAAOgV,EAAE,+BAOjCpW,IAAAC,cAACgD,IAAa,KACVjD,IAAAC,cAACiD,IAAM,CAACC,QAASjB,GAAS,UAC1BlC,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CAACC,QAASiU,GAAkBhB,EAAE,mBACrCpW,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CACH6S,QAASA,EACTrV,QAAQ,YACR0C,MAAM,UACND,QAAS+S,GAERE,EAAE,sBAAuB,CAAE+B,OAAQ1C,EAAQnQ,YA7GhC,O,yMClKjB,IAAGyT,aACd,MAAMC,EAAgBrD,YAAYG,KAClC,OAAO9V,IAAAC,cAACsU,IAAY,CAACC,KAAMwE,EAAcD,M,0ECsB9B,MAAGtO,UAASgL,UAAU,GAAIvT,cACrC,MAAM,EAAEkU,GAAMC,cACRzX,EAAWC,cACXyB,EAAQqV,YAAYG,MACnBC,EAASC,GAAclZ,oBAAS,IAChCmc,EAAgBC,GAAqBpc,oBAAS,IAC9Cqc,EAAeC,GAAoBtc,oBAAS,GAC7Cuc,EAAS9c,YAAa,MACtB+c,EAAa/c,YAAa,MAC1B4X,EAAO5X,YAAa,IACpBmX,EAASnX,YAAa,YAErBgd,EAAaC,GAAkB1c,mBAAS,IAEzC8R,EAAa1R,sBACfuc,IAC2C,IAAhCF,EAAYtO,QAAQwO,GAE/B,CAACF,IAGCG,EAAiBD,IACf7K,EAAW6K,GACXD,EAAeD,EAAYnP,OAAO/I,GAAMA,IAAOoY,IAE/CD,EAAeD,EAAY7P,OAAO+P,KAIpCnc,EAAQJ,sBAAY,KACtBmc,EAAO/b,QACPgc,EAAWhc,QACX6W,EAAK7W,QACLoW,EAAOpW,QACP0Y,GAAW,GACXwD,EAAe,KAChB,CAACH,EAAQC,EAAYnF,EAAMT,IAExBiG,EAAczc,sBAAY,KAC5BI,IACA4E,KACD,CAAC5E,EAAO4E,IAEL0X,EAAW1c,sBAAY,KACzB,MAAM2c,EAAQ,GAKd,OAJIjL,EAAW,YAAWiL,EAAMR,OAASA,EAAOzc,OAC5CgS,EAAW,gBAAeiL,EAAMP,WAAaA,EAAW1c,OACxDgS,EAAW,UAASiL,EAAM1F,KAAOA,EAAKvX,OACtCgS,EAAW,YAAWiL,EAAMnG,OAASA,EAAO9W,OACzCid,GACR,CAACR,EAAQC,EAAYnF,EAAMT,EAAQ9E,IAEhCkL,EAAe5c,sBAAY,KAC7B8Y,GAAW,GACX,MAAM6D,EAAQD,IAEdhb,EACImb,IAAuCtE,EAASoE,EAAOvZ,EAAMiX,OAE5DC,KAAK,KACF5Y,EACIuY,IACI,UAAU1B,EAAQnQ,2BAI7BmS,MAAMha,IACHmB,EAASuY,IAAsBf,EAAE,wBAEpCsB,QAAQ,KACL1B,GAAW,GACX2D,OAET,CAACC,EAAUhb,EAAU6W,EAASnV,EAAMiX,KAAMoC,EAAavD,IAE1D,OAAKX,EAAQnQ,OAETtF,IAAAC,cAAC0C,IAAM,CAACmV,YAAU,EAAC7V,KAAMwI,EAASvI,QAASyX,GACvC3Z,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,EAASiC,aAAa,GACxChY,IAAAC,cAAC8C,IAAa,KACV/C,IAAAC,cAAC+B,IAAa,CACVC,KAAMkX,EACN9W,MAAM,gBACNC,QAAS,8CAA8CmT,EAAQnQ,0HAC/DpD,QAASA,IAAMkX,GAAiB,GAChChX,KAAM0X,IAEV9Z,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAACmY,IAAU,CACPC,QAAQ,YACRC,WACI7C,EAAQnQ,OAAS,2BAGzBtF,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQ6X,WAAS,GAChCnC,EAAE,gCACFA,EAAE,gBACFA,EAAE,qCAEPpW,IAAAC,cAAC+Z,IAAc,CACXC,SAAUrL,EAAW,UACrB3R,SAAUA,IAAMyc,EAAe,WAE/B1Z,IAAAC,cAACia,IAAqB,KAClBla,IAAAC,cAACsB,IAAG,CACA4Y,KAAK,IACLnW,QAAQ,OACRC,cAAc,MACdC,eAAe,iBAEflE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aACf0V,EAAE,YAENxH,EAAW,UACR5O,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,aAELiW,EAAOzc,MACF,iBACAyc,EAAOzc,MACP,gBAGVoD,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,WAELgT,EAAE,uBAKnBpW,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACoa,IAAM,CACHzd,MAAOyc,EAAOzc,MACdK,SAAUA,CAACE,EAAGmd,IAAQjB,EAAOxc,SAASyd,OAIlDta,IAAAC,cAAC+Z,IAAc,CACXC,SAAUrL,EAAW,cACrB3R,SAAUA,IAAMyc,EAAe,eAE/B1Z,IAAAC,cAACia,IAAqB,KAClBla,IAAAC,cAACsB,IAAG,CACA4Y,KAAK,IACLnW,QAAQ,OACRC,cAAc,MACdC,eAAe,iBAEflE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aACf0V,EAAE,gBAENxH,EAAW,cACR5O,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,aAELkW,EAAW1c,MACN,qBACA,qBAGVoD,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,WAELgT,EAAE,uBAKnBpW,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACsa,IAAoB,CACjBtY,KAAMgX,EACN/W,QAASgX,EACTxE,SAAU9X,GACN0c,EAAWzc,SAASD,EAAMmc,QAE9ByB,QAASlB,EAAWzc,WAExBmD,IAAAC,cAACsB,IAAG,CAACyC,QAAQ,OAAOC,cAAc,UAC9BjE,IAAAC,cAACsB,IAAG,CAACkZ,GAAI,EAAGxc,MAAM,QACd+B,IAAAC,cAACya,EAAiB,CACd3B,OACIO,EACMA,EAAW1c,MACX,QAIlBoD,IAAAC,cAACiD,IAAM,CACHxC,QAAQ,YACR0C,MAAM,UACND,QAASA,IAAM+V,GAAkB,IAEhC9C,EAAE,eAKnBpW,IAAAC,cAAC+Z,IAAc,CACXC,SAAUrL,EAAW,QACrB3R,SAAUA,IAAMyc,EAAe,SAE/B1Z,IAAAC,cAACia,IAAqB,KAClBla,IAAAC,cAACsB,IAAG,CACA4Y,KAAK,IACLnW,QAAQ,OACRC,cAAc,MACdC,eAAe,iBAEflE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aACf0V,EAAE,UAENxH,EAAW,QACR5O,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,aAEL+Q,EAAKvX,OAASuX,EAAKvX,MAAM0I,OACpB,eACA6O,EAAKvX,MAAM+d,KAAK,MAChB,cAGV3a,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,WAELgT,EAAE,uBAKnBpW,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACiU,IAAe,CACZtX,MAAOuX,EAAKvX,MACZK,SAAUkX,EAAKtX,SACfsX,KAAM7T,EAAM6T,SAIxBnU,IAAAC,cAAC+Z,IAAc,CACXC,SAAUrL,EAAW,UACrB3R,SAAUA,IAAMyc,EAAe,WAE/B1Z,IAAAC,cAACia,IAAqB,KAClBla,IAAAC,cAACsB,IAAG,CACA4Y,KAAK,IACLnW,QAAQ,OACRC,cAAc,MACdC,eAAe,iBAEflE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aACf0V,EAAE,YAENxH,EAAW,UACR5O,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,aAELgT,EAAE,cAAe,CACdxZ,MAAO8W,EAAO9W,SAItBoD,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAM,WAELgT,EAAE,uBAKnBpW,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACqV,IAAwB,CACrB1Y,MAAO8W,EAAO9W,MACdK,SAAUyW,EAAO7W,eAMrCmD,IAAAC,cAACgD,IAAa,KACVjD,IAAAC,cAACiD,IAAM,CAACC,QAASwW,GAAa,UAC9B3Z,IAAAC,cAACiD,IAAM,CACHC,QAASA,IAAMiW,GAAiB,GAChC1Y,QAAQ,YACR0C,MAAM,UACNuB,SAAiC,IAAvB4U,EAAYjU,QAEE,IAAvBiU,EAAYjU,OACP,8BACA,mBAAmBmQ,EAAQnQ,2BA7NzB,O,wHCjGhC,MAAM3H,EAAYC,YAAWC,IAAK,CAC9BS,QAAS,CACL0F,QAAS,OACT4W,OAAQ,KAEZC,cAAe,CACX9I,QAASlU,EAAMmU,QAAQ,IAE3B8I,QAAS,CACL1c,WAAY,UACZH,MAAO,kBACP8c,SAAU,QACVH,OAAQ,EACR5W,QAAS,OACTC,cAAe,SACfzF,WAAY,WAEhBwc,WAAY,CACRD,SAAU,SAEdE,WAAY,CACRF,SAAU,OACVnS,OAAQ,kBACRsS,aAAc,gBAElBhR,OAAQ,CACJ6H,QAASlU,EAAMmU,QAAQ,GACvBzT,UAAW,UAEf4c,MAAO,CACHpJ,QAAS,OACToI,KAAM,EACNrR,SAAU,WAwCHsS,MApCMA,EACjB/Y,QACAgZ,SACA1B,cACAjS,OACA4T,WACAC,SAAS,SAET,MAAMzc,EAAUnB,IAChB,OACIqC,IAAAC,cAACub,IAAU,CACPH,OAAQA,EACRI,aAAc9B,EACd7a,QAAS,CACL4c,iBAAkBC,YAAK,CACnB,CAAC7c,EAAQgc,UAAU,EACnB,CAAChc,EAAQkc,YAAsB,QAATtT,EACtB,CAAC5I,EAAQmc,YAAsB,QAATvT,IAE1BkU,iBAAkBD,YAAK,CACnB,CAAC7c,EAAQR,UAAU,EACnB,CAACQ,EAAQ+b,eAAyB,QAATnT,MAIhCrF,GACGrC,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQoL,QACpBlK,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,MAAM2B,IAGlCrC,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQqc,OAAQG,GAC/BC,I,4BChEE,MAAGtZ,OAAMC,UAASsY,UAAS9F,eACtC,MAAMmH,EAAalG,YAAYG,MACxB3M,EAAU2S,GAAehf,sBAC1B,EAAEsZ,GAAMC,cACR0F,EAAc7e,sBAAY,KAC5BgF,IACAsY,KACD,CAACtY,EAASsY,IACPV,EAAe5c,sBAAY,KAC7BgF,IACAwS,EAASvL,IACV,CAACA,EAAUjH,EAASwS,IACvB,OACI1U,IAAAC,cAAC+b,EAAK,CACFX,OAAQpZ,EACR0X,YAAazX,EACbG,MAAM,gBACNkZ,OACIvb,IAAAC,cAACsB,IAAG,CACAE,EAAG,EACHuC,QAAQ,OACRC,cAAc,SACdzF,WAAW,SACX0F,eAAe,UAEflE,IAAAC,cAACiD,IAAM,CAAC4D,WAAS,EAAC3D,QAAS4Y,GACtB3F,EAAE,qBAEPpW,IAAAC,cAACsB,IAAG,CAACC,GAAI,IACTxB,IAAAC,cAACiD,IAAM,CACHC,QAAS2W,EACTnV,UAAWwE,EACXrC,WAAS,EACTpG,QAAQ,YACR0C,MAAM,WAEL+F,EACK,GAAGA,EAASyL,aAAazL,EAAS0L,WAClC,mBAKlB7U,IAAAC,cAACgc,IAAI,KACAJ,EAAWhb,IAAIqb,GACZlc,IAAAC,cAACsU,IAAY,CACTE,YAAU,EACVC,SAAUA,IAAMoH,EAAYI,GAC5B/S,SACIA,GAAYA,EAAS4P,SAAWmD,EAAUnD,OAE9C5X,IAAK+a,EAAUnD,OACfvE,KAAM0H,S,kCC9D9B,8CAkHeC,IA7GOA,EAClBC,mBACAN,cACAtH,OACA6H,SACA/b,QACAgc,YAEKF,EAC2B,IAA5BA,EAAiB9W,OACVgX,EACHtc,IAAAC,cAAA,WAAK,yHAKLD,IAAAC,cAAA,WAAK,2HAMTD,IAAAC,cAAA,WACKmc,EAAiBvb,IAAI,CAAC0b,EAASxb,IAExBf,IAAAC,cAAA,OACIkD,QAASA,KACL2Y,EAAYS,IAEhBrc,UAAU,oHAEVF,IAAAC,cAAA,OAAKC,UAAU,sEACVoc,GACGtc,IAAAC,cAAA,OAAKC,UAAU,0BACVa,EAAQ,EAAI,KAGrBf,IAAAC,cAAA,OACImV,IACKmH,EAAQC,OAAO,IACZD,EAAQC,OAAO,GAAGC,KACtB,qIAEJtH,IAAI,UACJjV,UAAU,yEAEdF,IAAAC,cAAA,OAAKC,UAAU,4CACXF,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAChBV,IAAAC,cAAA,MAAIC,UAAU,oCACTqc,EAAQG,OAGjB1c,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAChBV,IAAAC,cAAA,MAAIC,UAAU,oCACTqc,EAAQI,YAGjB3c,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAChBV,IAAAC,cAAA,MAAIC,UAAU,oCACTqc,EAAQK,cAMjB5c,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAChBV,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,OAAKC,UAAU,QAAO,iBAGrBqc,EAAQM,aAAahc,IAClB,CAACic,EAAM/b,IAECA,IACAwb,EAAQM,aACHvX,OACD,EAGAtF,IAAAC,cAAA,OAAKC,UAAU,QACV4c,GAKT9c,IAAAC,cAAA,OAAKC,UAAU,QACV4c,EAAK,UAStC9c,IAAAC,cAAC8c,IAAO,CACJR,QAASA,EACT/H,KAAMA,EACN6H,OAAQA,EACR9E,KAAMjX,EAAMiX,KACZjX,MAAOA,MAInB,KAhGkBN,IAAAC,cAAC+c,IAAc,O,kCCbjD,uMAqBA,MAEMrf,EAAYC,YAAWC,IAAK,CAC9Bof,OAAQ,CACJ7R,SAAU,QACV8R,IAAK,EACLC,KAAM,EACN,CAACtf,EAAMiC,YAAYwI,GAAG,OAAQ,CAC1BrK,MARU,IASVmf,WAAY,IAGpBC,aAAc,CACVtL,QAAS,OACT3G,SAAU,QACV8R,IAAKrf,EAAMmU,QAAQ,GACnBmL,KAAMtf,EAAMmU,QAAQ,GACpB5T,WAAY,UACZwc,OAAQ,KAEZ0C,oBAAqB,CACjBvL,QAAS,OACT3G,SAAU,QACV8R,IAAKrf,EAAMmU,QAAQ,GACnBmL,KAAMA,EAAGI,iBACLA,EAzBU,IAyBoB1f,EAAMmU,QAAQ,GAAKnU,EAAMmU,QAAQ,GACnE5T,WAAY,UACZwc,OAAQ,IACRhP,WAAY,6CAEhBkP,QAAS,CACL9c,SAAU,EACVoN,SAAU,WACVQ,WAAY,mDACZ,CAAC/N,EAAMiC,YAAYwI,GAAG,OAAQ,CAC1BkV,WAAYA,EAAGD,iBAAmBA,EAnCxB,IAmCsD,IAGxEE,YAAa,CACTxf,MAvCc,IAwCd8c,SAAU,MACV3c,WAAY,QACZwc,OAAQ,KAGZ8C,SAAU,CACNta,MAAO,yBAEXua,iBAAkB,CACdva,MAAO,SAEXwa,oBAAqB,CACjBxa,MAAO,WAEXya,sBAAuB,CACnBza,MAAO,WAEX0a,aAAc,CACV1a,MAAO,WAEX2a,YAAa,CACThM,QAAS,EACT,CAAClU,EAAMiC,YAAYwI,GAAG,OAAQ,CAC1ByJ,QAASlU,EAAMmU,QAAQ,KAG/BgM,iBAAkB,CACdjM,QAASlU,EAAMmU,QAAQ,GACvB+I,SAAU,aAIH/a,QAAM0E,KACjB,EACIuZ,aACAC,oBACAvf,YACAD,WACAyf,OAAQC,MAER,MAAMxf,EAAWC,cACXsf,EAASC,EAAQhU,OAAOiU,IAAUA,EAAM3T,QAExCxL,EAAcC,kBAAQ,KACxB,MAAMC,EAAeV,EAASW,SAASC,QAAQX,EAAW,IAS1D,OARYY,YAAU4e,EAAQ3e,GACtBA,EAAKqC,MACEzC,IAAiBI,EAAKR,MAEe,IAArCI,EAAa6L,QAAQzL,EAAKR,QAK1C,CAACL,EAAWD,EAASW,SAAU8e,IAE5Bpf,EAAY7B,sBACd8B,IACIJ,EAASK,YAAK,GAAGN,IAAYK,OAEjC,CAACL,EAAWC,IAGhBa,oBAAU,MACe,IAAjBP,GACAH,EAAUof,EAAO,GAAGnf,OAEzB,CAACmf,EAAQjf,EAAaH,IAEzBU,oBAAU,KACN6e,GAAc,IACf,CAACpf,IAEJ,MAAMQ,GAA6B,IAAjBR,EAAqB,EAAIA,GAEpCqf,EAAYD,GAAiBte,IAAMlD,UAAS,IAC5CygB,EAAaiB,GAAkBxe,IAAMlD,UAAS,GAE/CgC,EAAUnB,EAAU,CAAE4f,gBAEtBkB,EAAqBA,KACvBH,GAAeC,IAGbG,EAA4BA,KAC9BF,GAAgBjB,IAGdoB,EACF3e,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACsB,IAAG,CAACE,EAAG,GAAIyc,GACZle,IAAAC,cAACgc,IAAI,KACAkC,EACI/T,OAAOiU,IAAUA,EAAM3T,QACvB7J,IAAI,CAACwd,EAAOtd,IAELf,IAAAC,cAAC+U,IAAQ,CACLrQ,SAAU0Z,EAAMO,OAChBpb,QAAM,EACNrC,IAAKkd,EAAMrf,KACXmK,SAAUpI,IAAUrB,EACpBZ,QAAS,CACLhB,KAAMgB,EAAQ4e,SACdvU,SAAUrK,EAAQ6e,kBAEtBxa,QAASA,IAAMpE,EAAUsf,EAAMrf,OAE/BgB,IAAAC,cAAC4e,IAAY,CACT3e,UAAWpB,EAAQgf,cAElBO,EAAMO,OACH5e,IAAAC,cAAC6e,IAAQ,MAETT,EAAMtO,MAGd/P,IAAAC,cAACiH,IAAY,CACTpI,QAAS,CACLqI,QACIrI,EAAQ8e,oBACZxW,UACItI,EAAQ+e,uBAEhB1W,QAASkX,EAAMjd,MACfgG,UACIiX,EAAMO,OACAP,EAAMU,kBACN,SAU1C,OACI/e,IAAAC,cAAA,OAAKC,UAAWpB,EAAQhB,MACpBkC,IAAAC,cAAC+e,IAAM,CAACC,MAAI,EAACC,eAAe,OACxBlf,IAAAC,cAACkI,IAAU,CACPhF,QAASsb,EACTve,UAAWpB,EAAQue,aACnBzc,aAAW,iBAEXZ,IAAAC,cAACkf,IAAQ,CAAClT,SAAS,YAG3BjM,IAAAC,cAAC+e,IAAM,CAACI,QAAM,EAACF,eAAe,OAC1Blf,IAAAC,cAACkI,IAAU,CACPhF,QAASub,EACTxe,UAAWpB,EAAQwe,oBACnB1c,aAAW,yBAEV2c,EACGvd,IAAAC,cAACof,IAAqB,MAEtBrf,IAAAC,cAACkf,IAAQ,CAAClT,SAAS,YAI/BjM,IAAAC,cAAC+e,IAAM,CAACC,MAAI,EAACC,eAAe,OACxBlf,IAAAC,cAAA,OAAKC,UAAWpB,EAAQme,QACpBjd,IAAAC,cAACqf,IAAM,CACH5e,QAAQ,YACR6e,OAAO,OACPtd,KAAMsc,EACNrc,QAASuc,EACT3f,QAAS,CACLT,MAAOS,EAAQ2e,aAEnB+B,WAAY,CACRC,aAAa,IAGhBd,KAIb3e,IAAAC,cAAC+e,IAAM,CAACI,QAAM,EAACF,eAAe,OAC1Blf,IAAAC,cAAA,OAAKC,UAAWpB,EAAQ4gB,eACpB1f,IAAAC,cAACqf,IAAM,CACHxgB,QAAS,CACLT,MAAOS,EAAQ2e,aAEnB/c,QAAQ,aACR6e,OAAO,OACPtd,KAAMsb,EACNrb,QAASwc,GAERC,KAIb3e,IAAAC,cAAA,QAAMC,UAAWpB,EAAQgc,SACpBmD,EACDje,IAAAC,cAACgY,IAAS,CACN/X,UAAWpB,EAAQkf,iBACnB2B,aAAc7gB,EAAQif,aAEtB/d,IAAAC,cAACyB,IAAM,KACFyc,EAAOtd,IACJ,EAEQM,MACAnC,OACA0L,SACA/I,YACAE,SAAQ,EACR+c,UAEJ7d,IAEI2J,GAAUkU,EACH,KAGH5e,IAAAC,cAAC2B,IAAK,CACFT,IAAKA,EACLU,MAAOA,EACP7C,KAAM,GAAGL,IAAYK,IACrB2C,UAAWA,KAM/B3B,IAAAC,cAAC6B,IAAQ,CAACC,GAAIpD,W,kCChS1C,sDAOA,MAAMhB,EAAYC,YAAWC,IAAK,CAC9BS,QAAS,CACLL,MAAO,OACP2K,OAAQ,OACRxK,WAAY,QACZ2T,QAASlU,EAAMmU,QAAQ,EAAG,IAE9BmJ,MAAO,CACHnX,QAAS,OACTC,cAAe,MACfzF,WAAY,SACZ0F,eAAgB,gBAChBM,OAAQ,IACRoE,OAAQ,QAEZjF,KAAM,CACFic,YAAa/hB,EAAMmU,QAAQ,GAC3B6N,cAAe,YACfzc,MAAO,QACP0c,UAAW,WACX9b,QAAS,WAqBF+b,IAjBKA,EAAGpc,WACnB,MAAM7E,EAAUnB,IAChB,OACIqC,IAAAC,cAAA,OAAKC,UAAWpB,EAAQR,SACpB0B,IAAAC,cAAA,OAAKC,UAAWpB,EAAQqc,OACpBnb,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAASkJ,MAAO,CAAEoW,YAAa,SAC9Crc,GAEL3D,IAAAC,cAAA,OAAKC,UAAWpB,EAAQqc,OACpBnb,IAAAC,cAACggB,IAAQ,W,kCCxC7B,qIAiBA,MAAMtiB,EAAYC,YAAWC,IAAK,CAC9BqiB,SAAU,CACN9hB,WAAY,OACZH,MAAO,OACP0N,OAAQ,WAEZwU,cAAe,CACXliB,MAAO,OACP2K,OAAQ,QACR5E,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChB1F,WAAY,SACZuT,QAASlU,EAAMmU,QAAQ,IAE3BoO,WAAY,CACRhd,MAAO,QACP7E,UAAW,aAIJ,MAAG3B,QAAOK,WAAUojB,YAAWC,aAAa,cACvD,MAAM,EAAElK,GAAMC,cACRzX,EAAWC,cACX6W,EAAUC,YAAYC,MACrBG,EAASC,GAAclZ,oBAAS,GACjCgC,EAAUnB,IAEV4iB,EAAerjB,sBACjBsjB,IACI,MAAMC,EAAsB,oBAAdD,EAAKvb,KACdwb,GACD7hB,EAASuY,IAAqBf,EAAE,iBAEpC,MAAMsK,EAAUF,EAAK9Y,KAAO,KAAO,KAAO,GAI1C,OAHKgZ,GACD9hB,EAASuY,IAAqBf,EAAE,sBAE7BqK,GAASC,GAEpB,CAAC9hB,EAAUwX,IAGTuK,EAAezjB,sBAAY,KAC7BD,KACD,CAACA,IAEEoD,EAAenD,sBACjB0jB,IACI,GAAyB,cAArBA,EAAKJ,KAAK9M,QASd,GALyB,SAArBkN,EAAKJ,KAAK9M,SACVzW,EAAS2jB,EAAKJ,KAAKK,UACnB7K,GAAW,IAGU,UAArB4K,EAAKJ,KAAK9M,OAAoB,CAAC,IAADoN,EAAAC,EAAAC,EAC9B,MAAM1e,EAC2B,QADpBwe,EACL,OAAJF,QAAI,IAAJA,GAAU,QAANG,EAAJH,EAAMJ,YAAI,IAAAO,GAAU,QAAVC,EAAVD,EAAYF,gBAAQ,IAAAG,OAAhB,EAAJA,EAAsB1e,eAAO,IAAAwe,IAAI1K,EAAE,yBACvCxX,EAASuY,IAAsB7U,IAC/B0T,GAAW,SAZXA,GAAW,IAenB,CAACpX,EAAU3B,EAAUmZ,IAGzB,OACIpW,IAAAC,cAACsB,IAAG,CAACyC,QAAQ,OAAOC,cAAc,SAASzF,WAAW,WACjD5B,GAASA,EAAM6f,IACZzc,IAAAC,cAACsB,IAAG,CACA4Y,KAAK,IACLnW,QAAQ,OACRC,cAAc,MACdzF,WAAW,cAEXwB,IAAAC,cAACsB,IAAG,CAAC4Y,KAAK,KACNna,IAAAC,cAAA,KAAGghB,KAAMrkB,EAAM6f,KAAM7f,EAAM6f,MAE/Bzc,IAAAC,cAACsB,IAAG,CAAC2f,GAAI,GACLlhB,IAAAC,cAACkhB,IAAO,CAAC9e,MAAM,UACXrC,IAAAC,cAACkI,IAAU,CAAChF,QAASwd,GACjB3gB,IAAAC,cAACmhB,IAAS,UAM1BphB,IAAAC,cAACohB,IAAOC,QAAO,CACX5E,KAAK,MACL6E,SAAS,UACTrhB,UAAWpB,EAAQohB,SACnBsB,gBAAgB,EAChBnX,OAAQgW,EACRpW,QAAS,CACLwX,cAAe,UAAU/L,GAE7B6K,aAAcA,EACdtjB,SAAUoD,GAEVL,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQqhB,eACnBpK,EACG/V,IAAAC,cAACyhB,IAAgB,MAEjB1hB,IAAAC,cAACmE,IAAU,CAAClE,UAAWpB,EAAQshB,YAC1BhK,EAAE,wB,kCC3HnC,6CAiFeuL,IA3EYA,EACvB/kB,QAAQ,GACRK,WACA6H,SACA8c,iBAAgB,MAEhB,MAAM,QAAEC,EAAO,YAAEC,EAAW,aAAEC,EAAY,KAAEC,EAAI,WAAEC,EAAU,UAAEC,GAC1DtlB,EAEEyD,EAAenD,sBACjB,CAACilB,EAAWC,KACRnlB,EAAS,IACFL,EACH,CAACulB,GAAYC,KAGrB,CAACxlB,EAAOK,IAGZ,OACI+C,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmU,IAAM,CACHhT,MAAM,UACN2D,QAAQ,UACRnI,MAAOilB,EACP5kB,SAAUL,GAASyD,EAAa,UAAWzD,GAC3CkI,OAAQA,KAGhB9E,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,iBACNxE,MAAOklB,EACP7kB,SAAUL,GAASyD,EAAa,cAAezD,GAC/CkI,OAAQA,KAGhB9E,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,uBACNxE,MAAOmlB,EACP9kB,SAAUL,GAASyD,EAAa,eAAgBzD,GAChDkI,OAAQA,KAGhB9E,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,OACNxE,MAAOolB,EACP/kB,SAAUL,GAASyD,EAAa,OAAQzD,MAGhDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,cACNxE,MAAOqlB,EACPhlB,SAAUL,GAASyD,EAAa,aAAczD,GAC9CkI,OAAQA,KAGf8c,GACG5hB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,aACNxE,MAAOslB,EACPjlB,SAAUL,GAASyD,EAAa,YAAazD,GAC7CkI,OAAQA,Q,8QCnEhC,MAAMud,EAAc,CAChBC,cAAY3U,YAAY4U,OAAOlhB,GAC/BihB,cAAY3U,YAAY6U,WAAWnhB,GACnCihB,cAAY3U,YAAY8U,gBAAgBphB,GACxCihB,cAAY3U,YAAY+U,oBAAoBrhB,IAqIjCshB,MAlIUA,EACrBC,aACAC,YACAjmB,QACAK,WACAqD,YAEA,MAAMwiB,EAAc,CAAElmB,QAAOK,YAC7B,OAAQ2lB,GACJ,KAAKN,cAAY3U,YAAYoV,UAAU1hB,GACvC,KAAKihB,cAAY3U,YAAYqV,cAAc3hB,GAC3C,KAAKihB,cAAY3U,YAAYsV,UAAU5hB,GACvC,KAAKihB,cAAY3U,YAAYuV,cAAc7hB,GACvC,OACIrB,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CACNE,MAAM,iBACNwD,WAAW,sFACPke,IAGhB,KAAKR,cAAY3U,YAAYwV,SAAS9hB,GACtC,KAAKihB,cAAY3U,YAAYyV,aAAa/hB,GAC1C,KAAKihB,cAAY3U,YAAY0V,OAAOhiB,GACpC,KAAKihB,cAAY3U,YAAY2V,WAAWjiB,GACxC,KAAKihB,cAAY3U,YAAY4U,OAAOlhB,GACpC,KAAKihB,cAAY3U,YAAY6U,WAAWnhB,GACxC,KAAKihB,cAAY3U,YAAY8U,gBAAgBphB,GAC7C,KAAKihB,cAAY3U,YAAY+U,oBAAoBrhB,GAC7C,MAAMgT,GAA+C,IAArCgO,EAAYpX,QAAQ2X,GACpC,OAAQC,GACJ,KAAKU,eAAaC,OACd,OAAInP,EAEIrU,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CACNE,MAAM,iCACNqiB,YAAa7mB,GACTwI,MAAMC,QAAQzI,GAASA,EAAM+d,KAAK,KAAO,GAE7C+I,eAAgB9mB,GAASA,EAAM+mB,MAAM,MACjCb,IAKR9iB,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CAACE,MAAM,eAAkB0hB,IAG/C,KAAKS,eAAaK,QACd,OAAO5jB,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CAACE,MAAM,iBAAoB0hB,IAChD,KAAKS,eAAaM,KACd,OAAO7jB,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CAACE,MAAM,cAAiB0hB,IAC7C,KAAKS,eAAaO,OACd,OACI9jB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,gBACN6D,KAAK,SACLJ,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaQ,YACd,OACI/jB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,qBACN6D,KAAK,cACLJ,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaS,QACd,OACIhkB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,iBACN6D,KAAK,UACLJ,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaU,SACd,OACIjkB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,kBACN6D,KAAK,WACLJ,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaW,IACd,MAAMnf,EAAUzE,EAAM6T,KAAKtT,IAAIyT,IAAG,CAC9B1X,MAAO0X,EAAIlT,MACXA,MAAOkT,EAAIlT,SAEf,OACIpB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,aACN2D,QAASA,EACTF,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaY,OACd,OACInkB,IAAAC,cAACmU,IAAMnT,OAAAC,OAAA,CACHE,MAAM,gBACN6D,KAAK,SACLJ,SAAUwP,GACNyO,IAGhB,KAAKS,eAAaa,OACd,OACIpkB,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CACN+D,KAAK,SACL7D,MAAM,kBACF0hB,IAGhB,QACI,OAAO,KAEnB,KAAKR,cAAY3U,YAAY0W,SAC7B,KAAK/B,cAAY3U,YAAY2W,UAC7B,KAAKhC,cAAY3U,YAAY4W,cAAcljB,GAC3C,KAAKihB,cAAY3U,YAAY6W,aAAanjB,GAE1C,QACI,OAAO,O,SCvHnB,MAAM1D,EAAYC,YAAWC,IAAK,CAC9BQ,MAAO,CACH0T,QAASlU,EAAMmU,QAAQ,IAE3ByS,YAAa,CACT7E,YAAa/hB,EAAMmU,QAAQ,IAE/BwE,KAAM,CACFzE,QAASlU,EAAMmU,QAAQ,OAIhB,QAAG0S,eACd,MAAMpkB,EAAQqV,YAAYG,KACpBhX,EAAUnB,KACTsc,EAAU0K,GAAe7nB,oBAAS,IAClCsN,EAAQqH,GAAa3U,sBACrB8lB,EAAYgC,GAAiB9nB,sBAC7BiO,EAAa8Z,GAAkB/nB,sBAChC,EAAEsZ,GAAMC,cACd5W,oBAAU,KACNmlB,OAAcrnB,IACf,CAAC6M,IAEJ3K,oBAAU,KACNolB,OAAetnB,IAChB,CAACqlB,IAEJ,MAAMlJ,EAAiBxc,sBAAY,KAC/BynB,GAAa1K,IACd,CAACA,IAEE8B,EAAc7e,sBAAY,KAC5BynB,GAAY,GACZlT,OAAUlU,GACVqnB,OAAcrnB,GACdsnB,OAAetnB,IAChB,IAEGunB,EAAe3lB,kBAAQ,IAClBiL,EAAS2a,KAAKC,MAAM5a,GAAU,KACtC,CAACA,IAEE6a,EAAc9lB,kBAAQ,IACnB2lB,GACAlC,EAEE,CACHxhB,MAAO0jB,EAAa1jB,MACpBpC,KAAM8lB,EAAa9lB,KACnBiG,KAAM2d,EACNhmB,MAAOmO,GAPe,KAS3B,CAAC+Z,EAAclC,EAAY7X,IAExB+O,EAAe5c,sBAAY,KAC7BwnB,EAASO,GACTlJ,KACD,CAACkJ,EAAaP,EAAU3I,IAErBmJ,EAAgB/lB,kBAAQ,IACnBgmB,qBAAmBC,QAAQvkB,IAAIuJ,IAAM,CACxCxN,MAAOmoB,KAAKM,UAAUjb,GACtBhJ,MAAOgJ,EAAOhJ,SAEnB,IAEGkkB,EAAoBnmB,kBAAQ,KAC9B,IAAK2lB,EAAc,MAAO,GAC1B,MAAM/f,EAAUud,cAAYiD,mBAAmBT,EAAa7f,MAC5D,OAAKF,EAEEA,EAAQlE,IAAIiR,IAAM,CACrBlV,MAAOkV,EACP1Q,MAAOkhB,cAAY3U,YAAYmE,GAAQ1Q,MACvCiG,OAAQib,cAAY3U,YAAYmE,GAAQzK,UALvB,IAOtB,CAACyd,IAEJ,OACI9kB,IAAAC,cAAC+Z,IAAc,CAACC,SAAUA,EAAUhd,SAAUyc,GAC1C1Z,IAAAC,cAACia,IAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,IAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAAA,OAAKC,UAAWpB,EAAQ2lB,aACpBzkB,IAAAC,cAACmE,IAAU,CAAChB,MAAM,eAAc,kBAGxCpD,IAAAC,cAACma,IAAqB,CAACla,UAAWpB,EAAQ0X,MACtCxW,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmU,IAAM,CACHhT,MAAOgV,EAAE,iBACTpR,YAAaoR,EAAE,iBACfxR,WAAYwR,EAAE,wBACdxZ,MAAOwN,EACPnN,SAAUwU,EACV1M,QAASmgB,KAGjBllB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACV4M,EAAkBhgB,OAAS,GACxBtF,IAAAC,cAACmU,IAAM,CACHhT,MAAOgV,EAAE,kBACTxZ,MAAOgmB,EACP3lB,SAAU2nB,EACVhgB,WAAYwR,EAAE,yBACdrR,QAASugB,KAIrBtlB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0iB,EAAgB,CACbC,WAAYA,EACZC,UACIiC,EAAeA,EAAajC,UAAY,KAE5CjmB,MAAOmO,EACP9N,SAAU4nB,EACVvkB,MAAOA,OAKvBN,IAAAC,cAACylB,IAAqB,KAClB1lB,IAAAC,cAACiD,IAAM,CAACC,QAAS4Y,GAAa,UAC9B/b,IAAAC,cAACiD,IAAM,CACHxC,QAAQ,YACR0C,MAAM,UACND,QAAS2W,EACTnV,UAAWsgB,GACd,U,yDC3IjB,MAAMtnB,EAAYC,YAAWC,IAAK,CAC9B8nB,OAAQ,CACJ3hB,QAAS,UAEbK,MAAO,CACHL,QAAS,OACTC,cAAe,MACfK,SAAU,QAEdC,KAAM,CACFC,OAAQ,MA4DDohB,MAxDQA,EAAGxb,SAAS,GAAIyb,eACnC,MAAM/mB,EAAUnB,IAuBhB,OACIqC,IAAAC,cAAC+U,IAAQ,KACLhV,IAAAC,cAACiH,IAAY,CACTC,QAASiD,EAAOhJ,MAChBgG,UACIpH,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,QACRR,UAAWpB,EAAQ6mB,OACnBviB,MAAM,eA/Bd0iB,MACZ,MAAMlS,EAAS0O,cAAY3U,YAAYvD,EAAOnF,MAC9C,OAAO2O,EAASA,EAAOxS,MAAQgJ,EAAOnF,MA+BjB6gB,IACS,KA7BdlpB,EA8BawN,EAAOxN,MA7BhCwI,MAAMC,QAAQzI,GAEVoD,IAAAC,cAAA,OAAKC,UAAWpB,EAAQuF,OACnBzH,EAAMiE,IAAIrB,GACPQ,IAAAC,cAAC2G,IAAI,CACDzF,IAAK3B,EACL4B,MAAO5B,EACPU,UAAWpB,EAAQyF,SAMhC3H,MAoBkB,oBAAbipB,GACJ7lB,IAAAC,cAAC8lB,IAAuB,KACpB/lB,IAAAC,cAACkI,IAAU,CACP6d,KAAK,MACLplB,aAAW,SACXuC,QAAS0iB,GAET7lB,IAAAC,cAACgmB,IAAU,SAzCXrpB,OClBxB,MAAMe,EAAYC,YAAWC,IAAK,CAC9B4mB,YAAa,CACT7E,YAAa/hB,EAAMmU,QAAQ,IAE/BkU,MAAO,CACHC,OAAQ,EAAItoB,EAAMmU,QAAQ,GAC1BkL,IAAKrf,EAAMmU,QAAQ,IAEvBoU,KAAM,CACFnoB,MAAO,WAkEAooB,MA/DIA,EAAGC,gBAAelB,UAAU,GAAInoB,WAAWA,aAC1D,MAAM6B,EAAUnB,KACTsc,EAAU0K,GAAe7nB,oBAAS,GACnC4c,EAAiBxc,sBAAY,IAAMynB,GAAa1K,GAAW,CAACA,IAC5DsM,EAAgC,IAAnBnB,EAAQ9f,QACrB,EAAE8Q,GAAMC,cAEd5W,oBAAU,KACNklB,GAAY,IACb,CAAC2B,IAEJ,MAAM3F,EAAezjB,sBACjB6D,IACI,MAAMylB,EAAapB,EAAQhb,OAAO,CAACA,EAAQqc,IAChCA,IAAQ1lB,GAEnB9D,EAASupB,IAEb,CAACvpB,EAAUmoB,IAGf,OACIplB,IAAAC,cAAC+Z,IAAc,CACXrV,UAAW4hB,EACXtM,SAAUA,EACVhd,SAAUyc,GAEV1Z,IAAAC,cAACia,IAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,IAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACymB,IAAK,CACFtjB,MAAM,UACNujB,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,aAAc1B,EAAQ9f,OACtBxG,QAAS,CAAEonB,MAAOpnB,EAAQonB,OAC1Ba,UAAU,GAEV/mB,IAAAC,cAACmE,IAAU,CAAChB,MAAM,eACbgT,EAAE,sBAIfpW,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACgc,IAAI,CAAC/b,UAAWpB,EAAQsnB,MACpBhB,EAAQvkB,IAAI,CAACuJ,EAAQrJ,IAClBf,IAAAC,cAACD,IAAM4K,SAAQ,CACXzJ,IAAKiJ,EAAOpL,KAAOoL,EAAOnF,KAAOmF,EAAOxN,OAE7B,IAAVmE,GAAef,IAAAC,cAAC+mB,IAAO,MACxBhnB,IAAAC,cAAC2lB,EAAc,CACXxb,OAAQA,EACRyb,SAAUA,IAAMlF,EAAa5f,W,oCC9D9C,IAAGqkB,UAAS6B,aAAYC,iBAAgBC,SAAQC,eAC3D,MAAMxoB,EAAWC,cACXyB,EAAQqV,YAAYG,KACpBuR,GAAUJ,EAAWK,YAAcL,EAAWM,OAC7CxR,EAASC,GAAclZ,oBAAS,IAChCmd,EAAU0K,GAAe7nB,oBAAS,GACnCsE,EAAQ7E,YAAa8qB,EAASJ,EAAW7lB,MAAQ,GAAIxE,GAClC,IAAjBA,EAAM0I,OACC,mBAGP1I,EAAM0I,OAAS,GACR,mCAGN+hB,IACsC,IAAnCH,EAAejc,QAAQrO,QAD/B,EAEe,yBAObggB,EAAcrgB,YAChB8qB,EAASJ,EAAWrK,YAAc,GAClChgB,IACI,GAAIA,EAAM0I,OAAS,IACf,MAAO,6CAOboU,EAAiBxc,sBACnB,CAACoD,EAAOsO,KACJ+V,EAAY/V,GACZxN,EAAMvE,SAASwqB,EAASJ,EAAW7lB,MAAQ,IAC3Cwb,EAAY/f,SAASwqB,EAASJ,EAAWrK,YAAc,KAE3D,CAACxb,EAAOimB,EAAQJ,EAAW7lB,MAAO6lB,EAAWrK,YAAaA,IAG9Dnd,oBAAU,KACNklB,GAAY,IACb,IAEH,MAeM6C,EAAatqB,sBACf,CAACkE,EAAOwb,KACJ5G,GAAW,GACXpX,EACImb,IACIzZ,EAAMiX,KACNnW,EACAwb,EACAwI,IAGH5N,KAAKhY,IACFZ,EAASuY,IAAwB,iBACjCuC,EAAe,MAAM,GACrByN,EAAO3nB,KAEViY,MAAMha,IACHmB,EAASuY,IAAsB,8BAElCO,QAAQ,KACL1B,GAAW,MAGvB,CAACpX,EAAU0B,EAAMiX,KAAM6N,EAAS+B,EAAQzN,IAGtC+N,EAAevqB,sBACjB,CAACkE,EAAOwb,KACJ5G,GAAW,GACXpX,EACImb,IACIzZ,EAAMiX,KACNnW,EACAwb,EACAwI,IAGH5N,KAAKhY,IACFZ,EAASuY,IAAwB,yBACjCuC,EAAe,MAAM,GACrByN,EAAO3nB,KAEViY,MAAMha,IACHmB,EAASuY,IAAsB,8BAElCO,QAAQ,KACL1B,GAAW,MAGvB,CAACpX,EAAU0B,EAAMiX,KAAM6N,EAAS+B,EAAQzN,IAGtCgO,EAAexqB,sBAAY,KAC7B8Y,GAAW,GACXpX,EAASmb,IAAmCzZ,EAAMiX,KAAMnW,EAAMxE,QACzD4a,KAAK,KACF5Y,EAASuY,IAAwB,yBACjCuC,EAAe,MAAM,GACrB0N,MAEH3P,MAAMha,IACHmB,EAASuY,IAAsB,2BAElCO,QAAQ,KACL1B,GAAW,MAEpB,CAACpX,EAAU0B,EAAMiX,KAAMnW,EAAMxE,MAAOwqB,EAAU1N,IAEjD,OACI1Z,IAAAC,cAAC+Z,IAAc,CACXC,SAAUA,EACVhd,SAAUyc,EACV/U,SAA6B,IAAnBygB,EAAQ9f,QAElBtF,IAAAC,cAACia,IAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,IAAc,MAC3BwV,gBAAc,eACdpkB,GAAG,gBAEHrB,IAAAC,cAACmE,IAAU,KACNijB,EAAS,qBAAuB,uBAGzCrnB,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,IACnBqV,GACErnB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,KAAC,iMASpBpE,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CACN0X,aAAW,EACXjU,SAAU0iB,EACVjmB,MAAM,OACNwD,WAAW,8EACPxD,KAGZpB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS1X,OAAAC,OAAA,CACN0X,aAAW,EACXxX,MAAM,cACNwD,WAAW,sCACPgY,OAKpB5c,IAAAC,cAACylB,IAAqB,KACjB3P,GAAW/V,IAAAC,cAACyhB,IAAgB,CAACha,KAAM,KACnC2f,GACGrnB,IAAAC,cAACiD,IAAM,CACHyB,SAAUoR,EACV3S,MAAM,QACN1C,QAAQ,YACRyC,QAASukB,GACZ,uBAIL1nB,IAAAC,cAACiD,IAAM,CACHyB,SAAUoR,EACV3S,MAAM,UACN1C,QAAQ,YACRyC,QAlJK2W,KACJ,CAAC1Y,EAAM3E,WAAYmgB,EAAYngB,YAAY2N,OACpD3M,QAAeF,IAARE,GAEF6H,OAAS,IAId+hB,EACAG,EAAWpmB,EAAMxE,MAAOggB,EAAYhgB,OAEpC6qB,EAAarmB,EAAMxE,MAAOggB,EAAYhgB,UAyI7ByqB,EAAS,aAAe,8BClM7C,MAAM1pB,EAAYC,YAAWC,IAAK,CAC9BC,KAAM,MAGK,MACXb,WAAWA,SACX0qB,mBAAmBA,SACnBC,YAAW,MAEX,MAAMC,EAAelS,YAAYG,MAC3B,EAAEM,GAAMC,cACRvX,EAAUnB,KACTmqB,EAAUC,GAAe/nB,IAAMlD,SAAS,OAExCqM,EAAU2S,GAAehf,sBACzBsoB,EAAS4C,GAAclrB,mBAAS,IAEvC2C,oBAAU,KAEFuoB,EADA7e,EACWA,EAASic,QAET,KAEhB,CAACjc,IAEJ1J,oBAAU,KACNkoB,EAAiBxe,IAClB,CAACA,EAAUwe,IAEdloB,oBAAU,KACNxC,EAASmoB,IACV,CAACA,EAASnoB,IAEb,MAAMgrB,EAAkB/qB,sBACpBkN,IACI4d,EAAW5C,EAAQ1b,OAAOU,KAE9B,CAACgb,IAmBCrgB,EAAU5F,kBAAQ,KACpB,IAAIgG,EAAQ,CACR,CACI/D,MAAOgV,EAAE,qBACTwG,YAAaxG,EAAE,cACfgP,QAAS,GACTkC,WAAW,IAenB,OAXIM,GACAziB,EAAMlG,KAAK,CACPmC,MAAOgV,EAAE,gBACTwG,YAAaxG,EAAE,iBACfgP,QAAS,GACTmC,OAAO,IAIfpiB,EAAQA,EAAMuE,OAAOwe,YAAOL,EAAc,UAEnC1iB,GACR,CAAC0iB,EAAcD,EAAUxR,IAEtB6Q,EAAa9d,GAAYpE,EAAQ,GACjCmiB,EAAiBniB,EAAQlE,IAAIiR,GAAUA,EAAO1Q,OAEpD,OACIpB,IAAAC,cAACkoB,IAAK,CAACjoB,UAAWpB,EAAQhB,MACtBkC,IAAAC,cAACgc,IAAI,CAACta,UAAU,MAAMf,aAAW,yBAC7BZ,IAAAC,cAAC+U,IAAQ,CACLxR,QAAM,EACN4kB,gBAAc,OACd3C,gBAAc,YACd7kB,aAAW,wBACXuC,QAnDY7C,IACxBynB,EAAYznB,EAAM+nB,iBAoDNroB,IAAAC,cAACiH,IAAY,CACTC,QAAS8f,EAAW7lB,MACpBgG,UAAW6f,EAAWrK,gBAIlC5c,IAAAC,cAACqoB,IAAI,CACDjnB,GAAG,YACHymB,SAAUA,EACVrI,aAAW,EACXxd,KAAMsmB,QAAQT,GACd5lB,QApDQyX,KAChBoO,EAAY,QAqDHhjB,EAAQlE,IAAI,CAACiR,EAAQ/Q,KAClB,IAAIoE,EAAQ,GAoBZ,OAnBc,IAAVpE,GACAoE,EAAMlG,KAAKe,IAAAC,cAAC+mB,IAAO,CAAC7lB,IAAK2Q,EAAO1Q,MAAQ,aAE5C+D,EAAMlG,KACFe,IAAAC,cAACgH,IAAQ,CACL9F,IAAK2Q,EAAO1Q,MACZ+H,SAAU2I,EAAO1Q,QAAU6lB,EAAW7lB,MACtC+B,QAASA,IAvEL2O,KACpBA,EAAOwV,UACPxL,IAEAA,EAAYhK,GAEhBiW,EAAY,OAiEuBS,CAAoB1W,IAEnC9R,IAAAC,cAACiH,IAAY,CACTC,QAAS2K,EAAO1Q,MAChBgG,UACI0K,EAAOyV,OAASzV,EAAOwV,UACjBxV,EAAO8K,YACP,OAKfzX,KAGdyiB,IAAaX,EAAWK,WACrBtnB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACwoB,EAAU,CAAC/D,SAAUuD,IACtBjoB,IAAAC,cAAComB,EAAU,CACPC,cAAeW,EAAaA,EAAW7lB,MAAQ,KAC/CgkB,QAASA,EACTnoB,SAAU+qB,IAEdhoB,IAAAC,cAACyoB,EAAc,CACXtD,QAASA,EACT6B,WAAYA,EACZC,eAAgBA,EAChBC,OAAQrL,EACRsL,SAAUtL,Q,8OCvJnB,IAAG6M,eAAcjE,WAAUviB,eACtC,MAAM7B,EAAQqV,YAAYG,MAEnB8S,EAAoBC,IADLlT,YAAYG,KACkBhZ,oBAAS,IACvDuc,EAAS9c,YAAaosB,EAAatP,QACnCC,EAAa/c,YAAaosB,EAAarP,YACvCnF,EAAO5X,YAAaosB,EAAaxU,MACjCT,EAASnX,YAAaosB,EAAajV,QACnCoV,EAAcvsB,YAAaosB,EAAaG,cACxC,EAAE1S,GAAMC,cACR0S,EAAa,CAAC1P,EAAQC,EAAYnF,EAAMT,EAAQoV,GAChDE,EAAa,CACf3P,OAAQA,EAAOzc,MACf0c,WAAYA,EAAW1c,MACvBuX,KAAMA,EAAKvX,MACX8W,OAAQA,EAAO9W,MACfksB,YAAaA,EAAYlsB,OAEvBqsB,GAAoE,IAAxDF,EAAWloB,IAAIoW,GAASA,EAAMvZ,OAAOuN,SAAQ,GAEzD6O,EAAe5c,sBAAY,KACd6rB,EACVloB,IAAIoW,GACMA,EAAMxa,YAEhB2N,OAAO3M,GAAsB,qBAARA,GAEf6H,OAAS,GAIpBof,EAASsE,IACV,CAACD,EAAYC,EAAYtE,IAU5B,OACI1kB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACsB,IAAG,CAACqC,GAAI,GACL5D,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,MAAM0V,EAAE,gBAGpCpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aAAa0V,EAAE,YACnCpW,IAAAC,cAACoa,IAAM,CACHqC,KAAK,WACL9f,MAAOyc,EAAOzc,MACdK,SAAUA,CAACE,EAAGP,IAAUyc,EAAOxc,SAASD,MAkChDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aAAa0V,EAAE,SAAS,KAC5CpW,IAAAC,cAACiU,IAAe,CACZtX,MAAOuX,EAAKvX,MACZK,SAAUisB,IAEI,OAANA,EACA/U,EAAKtX,SAAS,IAEdsX,EAAKtX,SAASqsB,IAGtB/U,KAAM7T,EAAM6T,QAGpBnU,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,aAAa0V,EAAE,WAAW,KAC9CpW,IAAAC,cAACqV,IAAwB,CACrBC,iBAAe,EACf3Y,MAAO8W,EAAO9W,MACdK,SAAUyW,EAAO7W,YAYzBmD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,MACdC,eAAe,YAEflE,IAAAC,cAACiD,IAAM,CAACC,QAAShB,GAAWiU,EAAE,YAC9BpW,IAAAC,cAACiD,IAAM,CACHE,MAAM,UACN1C,QAAQ,YACRyC,QAAS2W,EACTnV,UAAWskB,GAEV7S,EAAE,sB,2JC/IpB,MAAM+S,EAAMC,YAAWvrB,IAAK,CAC/BC,KAAM,CACFI,gBAAiBkV,YAAQ,UAAW,KAExChS,MAAO,IACAvD,EAAM0V,WAAWC,SACpBvK,WAAY,OACZ7F,MAAO,WAPIgmB,CASf,EAAGtqB,aAAckB,IAAAC,cAAC2G,IAAI,CAACc,KAAK,QAAQ5I,QAASA,EAASsC,MAAM,SAEnDioB,EAAKD,YAAWvrB,IAAK,CAC9BC,KAAM,CACFI,gBAAiBkV,YAAQ,UAAW,KAExChS,MAAO,IACAvD,EAAM0V,WAAWC,SACpBvK,WAAY,OACZ7F,MAAO,WAPGgmB,CASd,EAAGtqB,aAAckB,IAAAC,cAAC2G,IAAI,CAACc,KAAK,QAAQ5I,QAASA,EAASsC,MAAM,QAEnDkoB,EAAeF,YAAWvrB,IAAK,CACxCC,KAAM,CACFI,gBAAiBkV,YAAQ,UAAW,KAExChS,MAAO,IACAvD,EAAM0V,WAAWC,SACpBvK,WAAY,OACZ7F,MAAO,WAPagmB,CASxB,EAAGtqB,aAAckB,IAAAC,cAAC2G,IAAI,CAACc,KAAK,QAAQ5I,QAASA,EAASsC,MAAM,S,qBCpBhE,MAAMzD,EAAYC,YAAWC,IAAK,CAC9BwE,MAAO,CACH4G,WAAY,WAwMLsgB,MApMSA,EAAGlnB,QAAOyY,UAASqH,gBACvC,MAAMrjB,EAAUnB,IACV6rB,EAAgBC,IACL,IAATA,EACOzpB,IAAAC,cAACkpB,EAAG,OAEF,IAATM,EACOzpB,IAAAC,cAACopB,EAAE,MAEPrpB,IAAAC,cAACqpB,EAAY,MAGlBI,EAAqBA,CAACC,EAAKC,EAAW,GAAIC,EAAW,KAEnD7pB,IAAAC,cAACgc,IAAI,KACAhb,OAAO2Q,KAAK+X,GAAK9oB,IAAIM,GAClBnB,IAAAC,cAAC+U,IAAQ,CAAC7T,IAAKA,GACXnB,IAAAC,cAACiH,IAAY,CACT4iB,uBAAwB,CACpBppB,QAAS,QACT5B,QAAS,CAAEhB,KAAMgB,EAAQuD,QAE7B0nB,yBAA0B,CAAErpB,QAAS,aACrCyG,QAASyiB,EAASzoB,IAAQA,EAC1BiG,UACIyiB,EAAS1oB,GACH0oB,EAAS1oB,GAAKwoB,EAAIxoB,IAClBwoB,EAAIxoB,IAAQ,WAwJ9C,OACInB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IAKX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQ5B,QAAS,CAAEhB,KAAMgB,EAAQuD,QAChDA,GAGLrC,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,YAAY0C,MAAM,iBAzJxB4mB,EAAClP,EAASqH,KAC5B,OAAQA,GACJ,IAAK,QACD,OACIniB,IAAAC,cAACgc,IAAI,KACAnB,EAAQja,IAAIrB,GACTQ,IAAAC,cAAC+U,IAAQ,CAAC7T,IAAK3B,EAAKyqB,MAChBjqB,IAAAC,cAACiH,IAAY,CACTC,QAAS3H,EAAKyqB,KACd7iB,UAAW8iB,QAAMC,2BACb3qB,EAAK4qB,OAETN,uBAAwB,CACpBppB,QAAS,QACT5B,QAAS,CAAEhB,KAAMgB,EAAQuD,QAE7B0nB,yBAA0B,CACtBrpB,QAAS,kBAOrC,IAAK,YACD,OACIV,IAAAC,cAACgc,IAAI,KACAnB,EAAQja,IAAIrB,IACT,MAAM4B,EAAQipB,SAAOC,sBACjB9qB,EAAK+qB,OAET,OACIvqB,IAAAC,cAAC+U,IAAQ,CACL7T,IAAK3B,EACLoK,MAAO,CAAErL,UAAW,WAEpByB,IAAAC,cAACiH,IAAY,CACTC,QAAS3H,EACT4H,UAAWhG,EACX0oB,uBAAwB,CACpBppB,QAAS,QACT5B,QAAS,UAQzC,IAAK,YACD,OAAO4qB,EAAmB5O,EAAS,CAC/ByP,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,eAAgB,oBAExB,IAAK,cACD,OAAOhB,EACH5O,EACA,CACI6P,YAAa,sBACbC,WAAY,wBAEhB,CACID,YAAanB,EACboB,WAAYpB,IAGxB,IAAK,cACD,OAAOqB,IAAO/P,GAASgQ,OAAO,cAClC,IAAK,gBACD,OAAOC,OAAKC,oBAAoBC,iBAAiBnQ,GACrD,IAAK,YACL,IAAK,SACL,IAAK,WACL,IAAK,kBACD,OACI9a,IAAAC,cAAA,KAAGghB,KAAMnG,EAAS1d,OAAO,SAAS8tB,IAAI,uBACjCpQ,GAGb,IAAK,qBACD,OAAO4O,EACH5O,EACA,CACIqQ,QAAS,gCACTC,WAAY,uBACZ1X,OAAQ,sBAEZ,CACIyX,QAAS3B,EACT4B,WAAYxuB,GACRmuB,OAAKM,kBAAkBJ,iBAAiBruB,GAC5C8W,OAAQ9W,GACJmuB,OAAKO,oBAAoBL,iBAAiBruB,KAG1D,IAAK,sBACL,IAAK,kBACD,OAAKke,GAAYA,EAAQxV,OAClBwV,EAAQH,KAAK,MADoB,OAE5C,IAAK,mBACL,IAAK,uBACD,OACI3a,IAAAC,cAACgc,IAAI,KACAnB,EAAQja,IAAIrB,GACTQ,IAAAC,cAAC+U,IAAQ,CAAC7T,IAAK3B,GACXQ,IAAAC,cAACiH,IAAY,CACTC,QAAS3H,EACTsqB,uBAAwB,CACpBppB,QAAS,QACT5B,QAAS,CAAEhB,KAAMgB,EAAQuD,QAE7B0nB,yBAA0B,CACtBrpB,QAAS,kBAOrC,IAAK,cACD,MAAO,GAAGoa,EAAQyQ,eAAezQ,EAAQ0Q,SAC7C,QACI,IAAK1Q,EAAS,OAAO9a,IAAAC,cAACqpB,EAAY,MAGlC,cAF2BxO,GAGvB,IAAK,SACD,OAAOA,EACX,IAAK,UACD,OAAO0O,EAAc1O,GACzB,IAAK,QACD,OAAIxX,YAAQwX,GAAiB,OACtBA,EAAQH,KAAK,MACxB,IAAK,SACD,OAAO+O,EAAmB5O,GAC9B,QACI,MAAO,MAgBdkP,CAAclP,EAASqH,MCnMzBniB,MAAM0E,KAAK,EAAGikB,mBACzB,MAAMroB,EAAQqV,YAAYG,KACpBc,EAAS3V,OAAO2Q,KAAK+W,EAAa8C,SAClC/Z,EAAUC,YAAQiF,EAAQK,GAC5BkO,qBAAmBuG,YAAYzU,IAE7B0U,EAASzD,YAAOjnB,OAAO2Q,KAAKF,GAAUtQ,GACxC+jB,qBAAmByG,wBAAwBxqB,IAE/CyqB,QAAQC,IAAI,uBAAwBnD,EAAa8C,SACjD,MAAMM,EAAgB,GAClBpD,EAAa8C,QAAQO,eACrBrD,EAAa8C,QAAQO,cAAc9U,QAAQ+U,IAClCF,EAAcE,EAAQC,WACvBH,EAAcE,EAAQC,SAAW,IAErCH,EAAcE,EAAQC,SAASD,EAAQ9qB,KAAO8qB,EAAQrvB,QAG9D,MAAMuvB,EAAgBR,EAAOvhB,OAAOjJ,GAAe,KAARA,GAC3C,OACInB,IAAAC,cAAAD,IAAA4K,SAAA,KACKuhB,EAActrB,IAAI6b,GACf1c,IAAAC,cAAC+Z,IAAc,CAAC7Y,IAAKub,GACjB1c,IAAAC,cAACia,IAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,IAAc,MAC3BwV,gBAAkB/I,EAAH,WACfrb,GAAOqb,EAAH,WAEJ1c,IAAAC,cAACmE,IAAU,KAAEsY,IAEjB1c,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACpBN,EAAQgL,GAAM7b,IAAIoW,IACf4U,QAAQC,IACJ,qBACAnD,EAAa8C,QAAQxU,IAEzB,IAAI7V,EACA+jB,qBAAmBiH,gBAAgBnV,GACvC,IAAK7V,EAAO,CACR,MAAMirB,EAAcC,YAChBhsB,EAAMisB,sBACNC,GAAKA,EAAE9P,OAASzF,GAEhBoV,IACAjrB,EAAQirB,EAAYjrB,OAG5B,OACIpB,IAAAC,cAACspB,EAAe,CACZlnB,MAAOjB,EACP0Z,QAAS6N,EAAa8C,QAAQxU,GAC9BkL,UAAWlL,UAQtC4U,QAAQC,IAAIxrB,EAAMmsB,iBAClBnsB,EAAMmsB,gBAAgB5rB,IAAIqrB,GAEnBlsB,IAAAC,cAAC+Z,IAAc,CAAC7Y,IAAK+qB,EAAQxP,MACzB1c,IAAAC,cAACia,IAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,IAAc,MAC3BwV,gBAAkByG,EAAQxP,KAAX,WACfrb,GAAO6qB,EAAQxP,KAAX,WAEJ1c,IAAAC,cAACmE,IAAU,KAAE8nB,EAAQ9qB,QAEzBpB,IAAAC,cAACma,IAAqB,KAClBpa,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACpBka,EAAQQ,UAAU7rB,IAAI8rB,GAEf3sB,IAAAC,cAACspB,EAAe,CACZlnB,MAAOsqB,EAASvrB,MAChB0Z,QACIiR,EAAcG,EAAQxP,MAChBqP,EACIG,EAAQxP,MACViQ,EAASjQ,MACX,eC/EvC,MACXkQ,iBACA1qB,UAAUA,SACV2qB,WAAWA,aAEX,MAAMjuB,EAAWC,cACX6W,EAAUC,YAAYC,KACtBtV,EAAQqV,YAAYG,KACpBgX,EAAWnX,YAAYG,MACtBC,EAASC,GAAclZ,oBAAS,IAChCC,EAAOC,GAAYF,oBAAS,IAC5B6rB,EAAcoE,GAAmBjwB,sBAClC,KAAEya,GAASjX,EAEjBb,oBAAU,KACFmtB,IACA5W,GAAW,GACXgX,IAAqBC,oBACjBvX,EACA6B,EACAqV,GAECpV,KAAK1N,IACFijB,EAAgBjjB,KAEnB2N,MAAMha,IACHT,GAAS,KAEZ0a,QAAQ,KACL1B,GAAW,OAGxB,CAACN,EAASkX,EAAgBrV,IAE7B,MAAM2V,EAAkB/tB,kBAAQ,KAC5B,IAAKwpB,EAAc,MAAO,GAC1B,MAAM,UAAE/T,EAAS,SAAEC,GAAa8T,EAAa8C,QAC7C,MAAO,GAAG7W,KAAaC,KACxB,CAAC8T,IAEEwE,EAAwBhuB,kBAAQ,KAAO,IAADiuB,EAAAC,EACxC,IAAK1E,EAAc,MAAO,GAC1B,MAAM2E,EAAOR,EAASnE,EAAanU,MAInC,MAAO,CAHyB,OAAZmU,QAAY,IAAZA,GAAqB,QAATyE,EAAZzE,EAAc8C,eAAO,IAAA2B,OAAT,EAAZA,EAAuBG,mBAC1B,UAAmB,QAAnBF,EAAa,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAME,YAAI,IAAAH,IAAI,YAETjjB,OAAOxN,KAAWA,GAAO+d,KAAK,SAC9D,CAACgO,EAAcmE,IAEZtF,EAAatqB,sBACfuwB,UACIzX,GAAW,SACL0X,IAAUC,MAAM,KACtB/uB,EACImb,IAAkC6S,EAAgB9iB,EAAMyN,IAEvDC,KAAK1N,IACFlL,EAASuY,IAAwB,mBACjC0V,EAAS/iB,GACT5H,MAEHuV,MAAMha,IACHmB,EAASuY,IAAsB,8BAElCO,QAAQ,KACL1B,GAAW,MAGvB,CAACpX,EAAUguB,EAAgBrV,EAAMsV,EAAU3qB,IAG/C,OACIlC,IAAAC,cAAC0C,IAAM,CAACV,OAAQ2qB,EAAgB1qB,QAASA,EAAS4V,YAAU,GACxD9X,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,IAAY4S,EAAc5rB,MAAOA,GACnDiD,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAACmY,IAAU,CACPC,QAAS6U,EACT5U,WAAY6U,IAEhBntB,IAAAC,cAAC2tB,EAAuB,CAACjF,aAAcA,IACvC3oB,IAAAC,cAAC4tB,EAAuB,CACpBlF,aAAcA,EACdjE,SAAU8C,EACVrlB,SAAUD,S,gMCzFnB,OACX,MAAM,EAAEkU,GAAMC,eACPqG,EAAMoR,GAAWhxB,mBAAS,KAC1BC,EAAOC,GAAYF,sBACnBiZ,EAASC,GAAclZ,oBAAS,GACjCixB,EAAWxF,QAAQxrB,GAEnB6B,EAAWC,cACX6W,EAAUC,YAAYC,KAE5BnW,oBAAU,KACFsuB,IACIrR,EAAKpX,OAAS,EACdtI,EAASoZ,EAAE,oBACJsG,EAAKpX,QAAU,GACtBtI,EAASoZ,EAAE,qBAEXpZ,MAGT,CAAC0f,EAAMqR,EAAU3X,IAEpB,MAAM4X,EAAY9wB,sBAAY,IACtBwf,EAAKpX,OAAS,GACdtI,EAASoZ,EAAE,qBACJ,KACAsG,EAAKpX,QAAU,MACtBtI,EAASoZ,EAAE,sBACJ,GAGZ,CAACsG,EAAKpX,OAAQ8Q,IAEXqR,EAAevqB,sBAAY,KACxB8wB,MACLhY,GAAW,GACXiY,IAAcC,YAAYxY,EAAS,CAAEgH,SAChClF,KAAK1N,IACFlL,EAASK,YAAK,aAAa6K,EAAKyN,OAChC3Y,EAASuY,IAAwB,WAAWrN,EAAK4S,SAEpDjF,MAAMta,IACHyB,EAASuY,IAAsBf,EAAE,yBAEpCsB,QAAQ,KACL1B,GAAW,OAEpB,CAACgY,EAAWtY,EAASgH,EAAM9d,EAAUwX,IAExC,OACIpW,IAAAC,cAACsB,IAAG,CAACC,GAAI,GACLxB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKytB,cAAY,GAChC/X,EAAE,sBAEPpW,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,EAAGnC,UAAU,MAAMrR,WAAW,YACnDwB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU0C,MAAM,SAC/BrG,IAGTiD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0V,GAAI,GACnBpuB,IAAAC,cAAC0Y,IAAS,CACNvX,MAAOgV,EAAE,eACTpR,YAAaoR,EAAE,qBACfxZ,MAAO8f,EACPzf,SAAU6wB,EACVnpB,SAAUoR,KAGlB/V,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0V,GAAI,GACnBpuB,IAAAC,cAACiD,IAAM,CACHyB,SAAUopB,EACV5qB,QAASskB,EACT1R,QAASA,EACTjP,WAAS,EACT1D,MAAM,UACN1C,QAAQ,aAEP0V,EAAE,gB,oCC1E3B,MAAMzY,EAAYC,YAAW,CACzBywB,WAAY,CACRpiB,SAAU,OACVqiB,UAAW,iBACXpR,IAAK,MACL9R,SAAU,WACVwP,OAAQ,MAEZ2T,MAAO,CACHnrB,MAAO,QACP6F,WAAY,OACZ7K,WAAY,aACZ2T,QAAS,YACTyc,QAAS,OAEbC,OAAQ,CACJrrB,MAAO,SACP6F,WAAY,OACZ7K,WAAY,cACZ2T,QAAS,YACTyc,QAAS,OAEbE,OAAQ,CACJtrB,MAAO,SACP6F,WAAY,OACZ7K,WAAY,uBACZ2T,QAAS,YACTyc,QAAS,SAIF,QAAGG,SAAS,OACvB,MAAOC,EAAYC,GAAiB7uB,IAAMlD,SAAS,KAC5CgyB,EAAeC,GAAoBjyB,mBAAS6xB,GAMnDlvB,oBAAU,KACN,MAAMuvB,EAAUL,EAAOvkB,OACnB9J,IAEK,IADDA,EAAMoc,KAAKuS,cAAchkB,QAAQ2jB,EAAWK,gBAGpDF,EAAiBC,IAClB,CAACL,EAAQC,IAEZ,MAAMhwB,EAAWC,eACX,EAAEuX,GAAMC,cACRvX,EAAUnB,IAChB,OACIqC,IAAAC,cAACsB,IAAG,CAACC,GAAI,GACLxB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKytB,cAAY,GAChC/X,EAAE,iBAEPpW,IAAAC,cAACuY,IAAI,CACDC,WAAS,EACT5I,UAAU,MACVqf,QAAQ,aACR1wB,WAAW,SACXwT,QAAS,GAEThS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,GACNQ,IAAAC,cAACkvB,IAAU,OAEfnvB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,IAAE,GACT1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAOgyB,EACP3xB,SAAU4xB,EACV7pB,YAAaoR,EAAE,eAI3BpW,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACpB8c,EAAcjuB,IAAIP,GACfN,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,EAAGC,GAAI,EAAGluB,IAAKb,EAAMgvB,KACxCtvB,IAAAC,cAAA,OAAKC,UAAWpB,EAAQuvB,YACnB/tB,EAAMivB,WAAajvB,EAAMkvB,SACtBxvB,IAAAC,cAAA,QAAMC,UAAWpB,EAAQyvB,OAAO,cAGhC,KACHjuB,EAAMivB,YAAcjvB,EAAMkvB,SACvBxvB,IAAAC,cAAA,QAAMC,UAAWpB,EAAQ2vB,QAAQ,oBAGjC,KACFnuB,EAAMivB,UAIJ,KAHAvvB,IAAAC,cAAA,QAAMC,UAAWpB,EAAQ4vB,QAAQ,kBAKzC1uB,IAAAC,cAACwvB,IAAS,CACNnvB,MAAOA,EACPovB,QAAS,CACL1vB,IAAAC,cAACiD,IAAM,CACHE,MAAM,UACN1C,QAAQ,YACRyC,QAASA,IACLvE,EACIK,YAAK,aAAaqB,EAAMiX,QAI/BnB,EAAE,oB,SC/GxB,OACX,MAAOuY,EAAQ5Y,GAAW4Z,cAE1B,OACI3vB,IAAAC,cAAC8X,IAAW,CACRhC,QAASA,EACT7L,OAAQA,IAAMlK,IAAAC,cAAC2vB,IAAY,MAC3BrU,OAAQA,IAAMvb,IAAAC,cAAC4vB,IAAM,MACrB1f,OAAQA,IACJnQ,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAAC6vB,EAAY,MACb9vB,IAAAC,cAAC8vB,EAAU,CAACpB,OAAQA,Q,8NCLzB,QACX,MAAM/vB,EAAWC,cACX2V,EAAOmB,YAAYC,KAEnBtV,GADOqV,YAAYqa,KACXra,YAAYG,MACpBma,EAAiBta,YAAYG,KAI7BsG,EAAmBzG,YAAYqa,MAC9B7mB,EAAU2S,GAAehf,oBAAS,IAClCuf,EAAQ6T,GAAapzB,mBAAS,IAERqzB,MACzB,IAAIC,EAAmB,GACnBhU,GACI6T,IAGAG,EAAmBhU,EAAiBhS,OAAOmS,IACvC,GAAIA,EAAQ8T,SAAU,CAClB,IAAIC,GAAQ,EAMZ,GALAL,EAAe/Y,QAAQqZ,IACfA,EAAcjB,MAAQ/S,EAAQ+S,MAC9BgB,GAAQ,MAGXA,EACD,OAAO,EAGf,OAAO,MAQEH,GAwBzB,IAAIK,EAAiB,GAuBrB,OArBA/wB,oBAAU,KACF2c,GAAoB5H,GACpB4H,EAAiBvb,IAAI0b,IAEb/H,EAAKic,KAEDlU,EAAQmU,eAAeC,SAASnc,EAAKic,MACrCD,EAAevxB,KAAKsd,MAKrC,CAACH,EAAkBoU,EAAgBhc,IAEtC/U,oBAAU,KACNosB,QAAQC,IAAI,YAAaxrB,EAAMiX,MAC/B3Y,EAASgyB,IAAqCtwB,EAAMiX,OACpD3Y,EAASmb,IAAmCzZ,EAAMiX,OAClD3Y,EAASgyB,IAAiCtwB,EAAMiX,QACjD,CAACjX,EAAMiX,KAAM3Y,IAEXqxB,GAAmB7T,EAKpBpc,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACmY,IAAU,CAACC,QAAQ,YACpBrY,IAAAC,cAACkc,IAAa,CACVG,QAAQ,EACRhc,MAAOA,EACP8b,iBAAkB6T,EAClB5T,OAAQA,EACRP,YAAaA,EACbtH,KAAMA,IAWVxU,IAAAC,cAAC0C,IAAM,CACHkuB,mBAAoB,EACpB/Y,YAAU,EACV7V,KAAMsmB,QAAQpf,GACdjH,QAASA,IAAM4Z,GAAY,IAE3B9b,IAAAC,cAAC6wB,IAAa,CACVC,cAAc,EACdxU,QAASpT,EACT7I,MAAOA,EACP0wB,OAAQA,IAAMlV,GAAY,GAC1BmV,mBAAmB,EACnBC,cAjFMA,CAACC,EAAWC,EAAOC,KACrCxF,QAAQC,IAAIsF,GACZxyB,EAASgyB,IAA2BO,EAAWC,EAAO9wB,EAAMiX,OAC5D3Y,EAASgyB,IAA8BO,EAAWE,EAAU/wB,EAAMiX,OAClE3Y,EAASgyB,IAAqCtwB,EAAMiX,QA8ExC8E,OAAQA,MApCbrc,IAAAC,cAAC+c,IAAc,O,mCCSfD,ICjGA,QACX,MAAMne,EAAWC,cACX2V,EAAOmB,YAAYC,KAEnBtV,GADOqV,YAAYqa,KACXra,YAAYG,MAIpBsG,EAAmBzG,YAAYqa,MAC9B7mB,EAAU2S,GAAehf,oBAAS,IAClCuf,EAAQ6T,GAAapzB,mBAAS,IAwBrC,IAAI0zB,EAAiB,GAmCrB,OAjCA/wB,oBAAU,KACF2c,GAAoB5H,GACpB4H,EAAiBvb,IAAI0b,IAEb/H,EAAKic,KAEDlU,EAAQmU,eAAeC,SAASnc,EAAKic,MACrCD,EAAevxB,KAAKsd,MAgBrC,CAACH,EAAkBoU,EAAgBhc,IAEtCqX,QAAQC,IAAI,iBAAkB1P,EAAkB5H,GAEhD/U,oBAAU,KACNosB,QAAQC,IAAI,YAAaxrB,EAAMiX,MAC/B3Y,EAASgyB,IAAqCtwB,EAAMiX,OACpD3Y,EAASgyB,IAAiCtwB,EAAMiX,QACjD,CAACjX,EAAMiX,KAAM3Y,IAGZoB,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACmY,IAAU,CAACC,QAAQ,WACpBrY,IAAAC,cAACkc,IAAa,CACV7b,MAAOA,EACP8b,iBAAkBA,EAClBC,OAAQA,EACRP,YAAaA,EACbtH,KAAMA,IAEVxU,IAAAC,cAAC0C,IAAM,CACHkuB,mBAAoB,EACpB/Y,YAAU,EACV7V,KAAMsmB,QAAQpf,GACdjH,QAASA,IAAM4Z,GAAY,IAE3B9b,IAAAC,cAAC6wB,IAAa,CACVC,cAAc,EACdxU,QAASpT,EACT7I,MAAOA,EACP0wB,OAAQA,IAAMlV,GAAY,GAC1BmV,mBAAmB,EACnBC,cA/EMA,CAACC,EAAWC,EAAOC,KACrCxF,QAAQC,IAAIsF,GACZxyB,EAASgyB,IAA2BO,EAAWC,EAAO9wB,EAAMiX,OAC5D3Y,EAASgyB,IAA8BO,EAAWE,EAAU/wB,EAAMiX,OAClE3Y,EAASgyB,IAAqCtwB,EAAMiX,QA4ExC8E,OAAQA,O,yCC5G5B,MAAMiV,GAAkBC,YAEnBC,MAAM,CACH/U,IAAK8U,YAAaE,WAClBC,SAAUH,YAAaE,aAE1BE,QAAQ,MACRC,WAECC,GAAUN,YAEXC,MAAM,CACH3P,QAAS0P,YAAaE,WACtB3P,YAAayP,YAAaE,WAC1B1P,aAAcwP,YACdvP,KAAMuP,YAAaE,WACnBxP,WAAYsP,YAEPO,QAAQ,WAAY,mBACpBC,IAAI,EAAG,mBACPC,IAAI,EAAG,mBACPP,WACLvP,UAAWqP,cAEdI,QAAQ,MAEPM,GAAQV,YAAaC,MAAM,CAC7B9U,KAAM6U,YAAaE,WACnBla,KAAMga,YAAaE,WACnBS,OAAQX,cAGNY,GAAYZ,YAAaC,MAAM,CACjC9U,KAAM6U,YAAaE,WACnBW,QAASb,YACTha,KAAMga,YAAaE,WACnBpvB,MAAOkvB,YACPhb,SAAUgb,YACV3U,YAAa2U,YACbc,SAAUd,YACVe,UAAWf,YACXgB,OAAQhB,YACRiB,SAAUjB,YACVkB,YAAalB,YACbmB,KAAMpB,KASJqB,GAAoBpB,WAAYK,WAEhCgB,GAA+BrB,YAAaC,MAAM,CACpDzsB,QAASwsB,WAAYsB,GAAGtB,aACxBI,QAASJ,eAGPuB,GAAuBvB,YAAaC,MAAM,CAC5CpwB,MAAOmwB,YAAaE,WACpB/U,KAAM6U,YAAaE,WACnBsB,KAAMxB,YACNvsB,YAAausB,YACbyB,UAAWzB,YAAaE,WACxBwB,cAAe1B,aACf2B,SAAUN,KAGRO,GAAsB5B,YAAaC,MAAM,CAC3CpwB,MAAOmwB,YAAaE,WACpB/U,KAAM6U,YAAaE,WACnB7U,YAAa2U,YACb6B,YAAa7B,YACb7E,UAAW6E,WAAYsB,GAAGC,MAGxBO,GAAqB9B,YAAaC,MAAM,CAC1C8B,eAAgB/B,WAAYsB,GAAGtB,aAC/BgC,eAAgBhC,WAAYsB,GAAGtB,eAG7BiC,GAAgBjC,YAAaC,MAAM,CACrCrsB,MAAOosB,WAAYsB,GACftB,YAAaC,MAAM,CACfnvB,MAAOkvB,YAAaQ,IAAI,GAAGN,WAC3BgC,UAAWlC,UAAWE,gBAK5BiC,GAAanC,YAAaC,MAAM,CAClCmC,sBAAuBpC,YAAaE,WACpCmC,gBAAiBrC,YAAaE,WAC9BoC,oBAAqBtC,YAAaE,WAClCqC,uBAAwBvC,YAAaE,WACrCsC,iBAAkBxC,YAAaE,WAC/BuC,uBAAwBzC,YAAaE,WACrCwC,iBAAkB1C,YAAaE,WAC/ByC,YAAa3C,YAAaE,WAC1B0C,UAAW5C,YAAaE,aAGbF,mBAAaC,MAAM,CAC9B9U,KAAM6U,YAAaE,SAAS,0BAC5Bla,KAAMga,YAAaE,SAAS,iCAE5B2C,WAAY9C,GACZ+C,UAAW9C,YACX3U,YAAa2U,YACb+C,SAAU/C,YACVgD,sBAAuBhD,UACvBiD,oBAAqBjD,UACrBkD,mBAAoBlD,UACpBmD,iBAAkBnD,UAClBoD,aAAcpD,YACdqD,0BAA2BrD,UAC3BsD,wBAAyBtD,UACzBuD,uBAAwBvD,UACxBwD,qBAAsBxD,UACtByD,aAAczD,YACd0D,0BAA2B1D,UAC3B2D,wBAAyB3D,UACzB4D,uBAAwB5D,UACxB6D,qBAAsB7D,UACtB8D,aAAc9D,aACd+D,cAAezD,GAAQ0D,cAAc3D,UAAS,GAC9C4D,cAAejE,aACfkE,OAAQlE,WAAYsB,GAAGZ,IACvByD,kBAAmBnE,aACnBoE,WAAYpE,WAAYsB,GAAGV,IAAWJ,IAAI,GAC1CY,qBACAiD,aAAcrE,YACdsE,oBAAqBtE,YACrB9E,gBAAiB8E,WAAYsB,GAAGM,IAChChf,KAAMod,WAAYsB,GACdtB,YAAaC,MAAM,CACfpwB,MAAOmwB,YACPnuB,MAAOmuB,YACP3U,YAAa2U,eAGrBhC,UAAWgC,aAAcE,WACzBqE,YAAavE,aACbwE,MAAOxE,YACP1V,WAAY0V,WAAYsB,GAAGtB,aAC3ByE,cAAezE,WAAYsB,GAAGtB,aAC9B8B,sBACA4C,UAAW1E,YACX2E,SAAU3E,YACV4E,aAAc5E,YACd6E,WAAY7E,YACZiC,iBACA6C,gBAAiB9E,YACjB+E,gBAAiB/E,YACjBgF,UAAWhF,WAAYsB,GAAGtB,aAC1BiF,kBAAmBjF,YAAakF,UAChCjH,SAAU+B,aACV1zB,MAAO61B,K,mGC/JqBgD,IAAG;;;;;;;;;;;EAA5B,MAuBMC,GAAoBD,IAAG;;;;;;;;;;;iBCrBpC,MAAM/4B,GAAYC,YAAW,CACzBU,QAAS,CACL0F,QAAS,OACTxF,WAAY,UAEhBo4B,cAAe,CACXhuB,OAAQ,GACR3K,MAAO,GACP44B,OAAQ,sBACR3b,aAAc,MACd9c,WAAYoK,GAASA,EAAMtK,gBAC3B8F,QAAS,eACT4b,YAAa,EACbjU,OAAQ,WAEZmrB,YAAa,CACT/kB,QAAS,WACT3T,WAAY,YACZ8c,aAAc,EACdvP,OAAQ,WAEZorB,OAAQ,CACJ3rB,SAAU,WACVwP,OAAQ,IAER,oBAAqB,CACjBoc,UAAW,8CAGnBC,UAAW,CACP7rB,SAAU,QACV8R,IAAK,EACLC,KAAM,EACNgJ,MAAO,EACP+Q,OAAQ,KAyCDC,OArCKA,EAAGl6B,WAAWmG,QAAaxG,QAAQ,OACnD,MAAOye,EAAQ+b,GAAat6B,oBAAS,GAC/BgC,EAAUnB,GAAU,CAAEO,gBAAiBtB,IAEvCy6B,EAAeA,KACjBD,GAAW/b,IAQf,OACIrb,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKC,UAAWpB,EAAQR,SACpB0B,IAAAC,cAAA,QACIC,UAAWpB,EAAQ83B,cACnBzzB,QAASk0B,IAEbr3B,IAAAC,cAAA,QAAMC,UAAWpB,EAAQg4B,YAAa3zB,QAASk0B,GAC1Cz6B,IAGRye,GACGrb,IAAAC,cAAA,OAAKC,UAAWpB,EAAQi4B,QACpB/2B,IAAAC,cAAA,OAAKC,UAAWpB,EAAQm4B,UAAW9zB,QAASk0B,IAC5Cr3B,IAAAC,cAACq3B,KAAa,CACVl0B,MAAOxG,EACP26B,iBArBEn0B,IAClBnG,EAASmG,EAAMo0B,KACfH,UCpDD,MAAMI,GAAqB,CAC9B9D,sBAAuB,UACvBC,gBAAiB,UACjBC,oBAAqB,UACrBC,uBAAwB,UACxBC,iBAAkB,UAClBC,uBAAwB,UACxBC,iBAAkB,UAClBC,YAAa,UACbC,UAAW,WCUTuD,GAAc,CAChB,CACIzgB,MAAO,wBACP7V,MAAO,oBACP2xB,KAAM,0CAEV,CACI9b,MAAO,kBACP7V,MAAO,cACP2xB,KAAM,oCAEV,CACI9b,MAAO,sBACP7V,MAAO,kBACP2xB,KAAM,2EAEV,CACI9b,MAAO,yBACP7V,MAAO,2BACP2xB,KAAM,iDAEV,CACI9b,MAAO,mBACP7V,MAAO,qBACP2xB,KAAM,2CAEV,CACI9b,MAAO,yBACP7V,MAAO,qBACP2xB,KAAM,2CAEV,CACI9b,MAAO,mBACP7V,MAAO,eACP2xB,KAAM,qCAEV,CACI9b,MAAO,cACP7V,MAAO,eACP2xB,KAAM,6CAEV,CACI9b,MAAO,YACP7V,MAAO,aACP2xB,KAAM,6CAIC,YACX,MAAMzyB,EAAQqV,YAAYG,MACnBkgB,GH/BwB2B,MAC/B,MAAM,KAAE7tB,EAAI,QAAEiM,EAAO,MAAEhZ,GAAU66B,aAASjB,IAC1C,MAAO,CAAK,OAAJ7sB,QAAI,IAAJA,OAAI,EAAJA,EAAMksB,cAAejgB,EAAShZ,IG6Bd46B,GAClB/4B,EAAWC,cAEjB,OACImB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,aACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,cACN2xB,KAAK,oGACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACsB,IAAG,CAACtD,MAAM,OAAO2F,GAAG,SAASwH,SAAS,YACnCpL,IAAAC,cAACg4B,KAAW,CACRr7B,MAAOqa,EAAMra,MACbK,SAAUL,IACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAC/Bk7B,EAAKK,gBAAgBlhB,EAAMyF,OAE/B2D,UAAW,sBAAsB/f,EAAMiX,mBACvC+I,WAAW,eAOnCtgB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,OACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACN2xB,KAAK,sFACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACsB,IAAG,CAACtD,MAAM,OAAO2F,GAAG,SAASwH,SAAS,YACnCpL,IAAAC,cAACg4B,KAAW,CACRr7B,MAAOqa,EAAMra,MACbK,SAAUL,IACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAC/Bk7B,EAAKK,gBAAgBlhB,EAAMyF,OAE/B2D,UAAW,sBAAsB/f,EAAMiX,YACvC+I,WAAW,iBAOnCtgB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,OACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACN2xB,KAAK,yBACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC0Y,IAAS,CACN+D,KAAK,OACL1X,YAAY,qBACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,YAM7D1c,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,cACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,cACN2xB,KAAK,qCACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACm4B,KAAa,CACVx7B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCoI,YAAY,8BA6GhChF,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,eACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,gCACN2xB,KAAK,uCACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC0Y,IAAS,CACN+D,KAAK,eACL1X,YAAY,uCACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,YAM7D1c,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,aACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,sCACN2xB,KAAK,oDACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC0Y,IAAS,CACN+D,KAAK,aACL1X,YAAY,oDACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,YAM7D1c,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,MAAK,6BAE7BV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACpB0lB,GAAY72B,IAAIw3B,GACbr4B,IAAAC,cAACuY,IAAI,CACDhZ,MAAI,EACJkZ,GAAI,GACJ0W,GAAI,EACJC,GAAI,EACJluB,IAAKk3B,EAAWphB,MAChB5V,GAAIg3B,EAAWphB,OAEfjX,IAAAC,cAAC43B,KAAS,CACNnb,KAAM,SAAS2b,EAAWphB,MAC1B9G,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAOi3B,EAAWj3B,MAClB2xB,KAAMsF,EAAWtF,KACjBh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACk3B,GAAW,CACRv6B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cACDjhB,EAAMyF,KACN9f,UAShCoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACiD,IAAM,CACHxC,QAAQ,YACRyC,QAASA,IACLvE,EAASK,YAAK,WAAaqB,EAAMiX,QAExC,WAGDvX,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,QACLvM,OAAQA,EAAG2nB,UACP93B,IAAAC,cAACiD,IAAM,CACHC,QAASA,IACL20B,EAAKI,cACD,QACAT,KAGX,yB,qBC5WlB,KAAG76B,QAAQ,GAAIK,eAC1B,MAAM,QAAEq7B,EAAO,OAAEC,EAAM,SAAEC,GAAa57B,EAEhCyD,EAAenD,sBACjB,CAACilB,EAAWC,KACRnlB,EAAS,IACFL,EACH,CAACulB,GAAYC,KAGrB,CAACxlB,EAAOK,IAGZ,OACI+C,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,gBACN2xB,KAAK,wDAEL/yB,IAAAC,cAACw4B,KAAY,CACT77B,MAAO07B,IAAW,EAClBr7B,SAAUL,GAASyD,EAAa,UAAWzD,MAGlD07B,GACGt4B,IAAAC,cAAC83B,KAAW,CAAChF,KAAK,0CACd/yB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,SACNxE,MAAO27B,EACPtzB,KAAK,SACLhI,SAAUL,IACNyD,EAAa,SAAUq4B,OAAO97B,QAI1CoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACmU,KAAM,CACHrP,QAAQ,WACR3D,MAAM,WACNxE,MAAO47B,EACPv7B,SAAUL,GACNyD,EAAa,WAAYzD,U,sLC9B9C,KAAGA,QAAOK,eACrB,MAAO07B,EAAYC,GAAiB97B,sBAC7B+7B,EAAWC,GAAgBh8B,sBAC3Bi8B,EAAWC,GAAgBl8B,oBAAU,IACrCm8B,EAAWC,GAAgBp8B,qBAE5Bq8B,EAAmBj8B,sBAAYwf,IACjCkc,EAAclc,GACdoc,EAAaM,KAAQ1c,KACtB,IAEG2c,EAAYn8B,sBAAY,KAC1BD,EACIL,EAAM8M,OAAO,CACTgT,KAAMic,EACNphB,KAAMshB,KAGdD,IACAE,KACD,CAACl8B,EAAO+7B,EAAYE,EAAW57B,IAE5B0jB,EAAezjB,sBACjB6D,IACI9D,EACIL,EAAMwN,OAAO,CAAC5K,EAAMinB,IACTA,IAAQ1lB,KAI3B,CAACnE,EAAOK,IAGNq8B,EAAkBp8B,sBACpB6D,IACIi4B,EAAaj4B,GACbm4B,EAAat8B,EAAMmE,GAAO2b,OAE9B,CAAC9f,IAGC28B,EAAmBr8B,sBAAY,KACjC87B,GAAc,GACdE,KACD,IAEGM,EAAiBt8B,sBAAY,KAC/BD,EACIL,EAAMiE,IAAI,CAACrB,EAAMuB,IACTA,IAAUg4B,EACH,IACAv5B,EACHkd,KAAMuc,GAGPz5B,IAGf+5B,KACD,CAAC38B,EAAOm8B,EAAWE,EAAWh8B,EAAUs8B,IAErCE,EAAUt6B,kBAAQ,IAEhBw5B,GACAE,GAGc,IAFdj8B,EAAMwN,OAAO6nB,GACFA,EAAMvV,OAASic,GAAc1G,EAAM1a,OAASshB,GACpDvzB,OAER,CAAC1I,EAAO+7B,EAAYE,IA+CvB,OACI74B,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,gBACNxE,MAAO+7B,EACP17B,SAAUk8B,IAEdn5B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,WAAU,sDAIlCV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,cACNxE,MAAOi8B,EACP57B,SAAU67B,IAEd94B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,WAAU,kGAKlCV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,MACdC,eAAe,YAEflE,IAAAC,cAACiD,IAAM,CACHyB,UAAW80B,EACXt2B,QAASk2B,EACTj2B,MAAM,kBACN1C,QAAQ,aACX,kBAKTV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACgc,KAAI,KAAErf,EAAMiE,IAvFV64B,CAACzH,EAAOlxB,IACvBA,IAAUg4B,EAEN/4B,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAK8wB,EAAM1a,MAAQ0a,EAAMvV,KAAMid,SAAO,GAC5C35B,IAAAC,cAAC0Y,IAAS,CACN/b,MAAOq8B,EACPh8B,SAAUi8B,EACV93B,MAAO,QAAU6wB,EAAMvV,OAE3B1c,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,UACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASo2B,GACjBv5B,IAAAC,cAAC25B,KAAS,QAGlB55B,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,QACXrC,IAAAC,cAACkI,KAAU,CACPxD,UAAWs0B,GAAkC,IAArBA,EAAU3zB,OAClCnC,QAASq2B,GAETx5B,IAAAC,cAAC45B,KAAQ,SAQzB75B,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAK8wB,EAAM1a,MAAQ0a,EAAMvV,KAAMid,SAAO,GAC5C35B,IAAAC,cAACiH,KAAY,CAACC,QAAS8qB,EAAMvV,KAAMtV,UAAW6qB,EAAM1a,OACpDvX,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,mBACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASA,IAAMm2B,EAAgBv4B,IACvCf,IAAAC,cAAC65B,KAAQ,QAGjB95B,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,gBACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASA,IAAMwd,EAAa5f,IACpCf,IAAAC,cAAC85B,KAAgB,iBChH9B,OAEP/5B,IAAAC,cAACuY,IAAI,CAACxG,QAAS,EAAGyG,WAAS,GACvBzY,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,YACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,YACN2xB,KAAK,uCACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACw4B,KAAY,CACT77B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,SAOvDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,cACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,uBACN2xB,KAAK,kEACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACw4B,KAAY,CACT77B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,SA2BvDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,YACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACN2xB,KAAK,sCACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHxX,MAAOqa,EAAMra,MACbK,SAAUwwB,UAOqB,IAADuM,GANZ,WAAVp9B,SACMk7B,EAAKI,cACP,gBACA,MAGM,aAAVt7B,UACMk7B,EAAKI,cACP,gBACyB,QADV8B,EACflC,EAAK/tB,OAAOurB,qBAAa,IAAA0E,IAAI,IAGrClC,EAAKI,cAAcjhB,EAAMyF,KAAM9f,IAEnCmI,QAAS9D,OAAO2Q,KAAKqoB,cAAYp5B,IAAIM,IAAG,CACpCC,MAAO64B,aAAW94B,GAAKC,MACvBxE,MAAOuE,WAO/BnB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,gBACLvM,OAAQA,EAAG8G,QAAO6gB,UAEgB,aAA1BA,EAAK/tB,OAAOsqB,WACZpd,EAAMra,MAGFoD,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,iBACN2xB,KAAK,qCAEL/yB,IAAAC,cAACk6B,KAAiB,CACdv9B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cACDjhB,EAAMyF,KACN9f,GAGRglB,eAAa,KAKtB,QAInB5hB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,oBACLvM,OAAQA,EAAG8G,QAAO6gB,UACgB,aAA1BA,EAAK/tB,OAAOsqB,UAERr0B,IAAAC,cAACm6B,GAAiB,CACdx9B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,KAKxC,QAInBoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,gBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,4CACN2xB,KACI,qoBASJh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACw4B,KAAY,CACT77B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,SAOvDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,SACLvM,OAAQA,EAAG8G,QAAO6gB,UACdA,EAAK/tB,OAAOyrB,cACRx1B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACN2xB,KAAK,uCACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACo6B,GAAU,CACPz9B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,MAI3C,QAIhBoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,eACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACN2xB,KACI+E,EAAK/tB,OAAOyrB,cACN,sFACA,oEAEVz4B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHxX,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCmI,QAAS9D,OAAO2Q,KAAK0oB,oBAAkBz5B,IACnCM,IAAG,CACCC,MAAOk5B,mBAAiBn5B,GAAKC,MAC7BxE,MAAOuE,WAQnCnB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,sBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,wBACN2xB,KAAK,+DACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHxX,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCmI,QAAS9D,OAAO2Q,KACZ2oB,2BACF15B,IAAIM,IAAG,CACLC,MAAOm5B,0BAAwBp5B,GAAKC,MACpCxE,MAAOuE,WAmD/BnB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACsB,IAAG,CAACqH,OAAO,Y,+BCxT5B,MAAM4xB,GAAQp1B,MAAMq1B,MAAM,KAAMr1B,MAAM,KAAKvE,IAAI,CAACjE,EAAOmE,IAC/CA,EAAQ,GACD,CACHnE,MAAOmE,EACPK,MAAO,IAAML,GAGV,CACHnE,MAAOmE,EACPK,MAAOL,EAAM25B,aAKnBC,GAAUv1B,MAAMq1B,MAAM,KAAMr1B,MAAM,KAAKvE,IAAI,CAACjE,EAAOmE,IACjDA,EAAQ,EACD,CACHnE,MAAe,EAARmE,EACPK,MAAO,IAAc,EAARL,GAGV,CACHnE,MAAe,EAARmE,EACPK,OAAgB,EAARL,GAAW25B,aAKzBE,GAAgB,CAClBC,MAAOL,GAAM,GAAG59B,MAChBk+B,QAASH,GAAQ,GAAG/9B,OAgDTm+B,OA7CGA,EAAGn+B,QAAQg+B,GAAe39B,eACxC,MAAM+9B,EAAoB99B,sBACtB29B,IACI,MAAMt6B,EAAW,IACV3D,EACHi+B,SAEJ59B,EAASsD,IAEb,CAACtD,EAAUL,IAGTq+B,EAAsB/9B,sBACxB49B,IACI,MAAMv6B,EAAW,IACV3D,EACHk+B,WAEJ79B,EAASsD,IAEb,CAACtD,EAAUL,IAGf,OACIoD,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACmU,KAAM,CACHhT,MAAM,KACN2D,QAASy1B,GACT59B,MAAOA,EAAMi+B,MACb59B,SAAU+9B,KAGlBh7B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACmU,KAAM,CACHhT,MAAM,KACN2D,QAAS41B,GACT/9B,MAAOA,EAAMk+B,QACb79B,SAAUg+B,OCjBfC,OApDOl7B,IAAM0E,KACxB,EAAG9H,QAAOK,WAAU6H,SAAQwvB,WAAW,UACnC,MAAM6G,EACFv+B,GAAS03B,EACHzJ,KAAOjuB,GAAOw+B,GAAG9G,GACjBzJ,OAASuQ,GAAG9G,GAAU+G,QAAQ,OAElCC,EAAmBp+B,sBACrBq+B,IACI,GAAKA,EAEE,CACH,MAAMh7B,EAAW46B,EAAYK,QACvBC,EAAe5Q,KAAO0Q,GAC5Bh7B,EAASm7B,KAAKD,EAAaC,QAC3Bn7B,EAASo7B,MAAMF,EAAaE,SAC5Bp7B,EAASg7B,KAAKE,EAAaF,QAC3Bt+B,EAASsD,EAAS86B,QAAQ,UAAUvQ,eAPpC7tB,OAASM,IAUjB,CAACN,EAAUk+B,IAGTS,EAAmB1+B,sBACrB,EAAG29B,QAAOC,cACN,MAAMv6B,EAAW46B,EAAYK,QAC7Bj7B,EAASs7B,KAAKhB,GACdt6B,EAASu7B,OAAOhB,GAChB79B,EAASsD,EAAS86B,QAAQ,UAAUvQ,WAExC,CAACqQ,EAAal+B,IAGlB,OACI+C,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAAC87B,KAAS,CAACn/B,MAAOA,EAAOK,SAAUq+B,KAEvCt7B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI2W,GAAI,GACnBrvB,IAAAC,cAAC86B,GAAS,CACNn+B,MAAO,CACHi+B,MAAOM,EAAYN,QACnBC,QAASK,EAAYL,WAEzB79B,SAAU2+B,QC3CnB,OAEP57B,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,WACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,WACN2xB,KAAK,6CACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHpP,YAAY,oBACZpI,MAAOqa,EAAMra,MACbmI,QAAQ,WACR9H,SAAUq3B,IACNwD,EAAKI,cAAcjhB,EAAMyF,KAAM4X,IAEnCxvB,OAAQA,IAAMgzB,EAAKK,sBAMvCn4B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,wBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,qBACN2xB,KAAK,GACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,sBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,sBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,YACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,eACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,uBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,qBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,oBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,qBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,0BACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,mBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,wBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,UACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,gBCrLvC,OAEPt0B,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,eACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,WACN2xB,KAAK,6CACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHpP,YAAY,oBACZpI,MAAOqa,EAAMra,MACbmI,QAAQ,WACR9H,SAAUq3B,IACNwD,EAAKI,cAAcjhB,EAAMyF,KAAM4X,IAEnCxvB,OAAQA,IAAMgzB,EAAKK,sBAMvCn4B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,4BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,qBACN2xB,KAAK,GACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,0BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,sBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,gBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,eACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,2BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,yBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,oBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,yBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,0BACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,uBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,wBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,cACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,gBCrLvC,QACX,MAAO0H,EAAWC,GAAgBn/B,mBAAS,CACvCo/B,QAAS,KACTC,KAAM,KACNC,KAAM,OAEV,OACIp8B,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,eACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,WACN2xB,KAAK,6CACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmU,KAAM,CACHpP,YAAY,oBACZpI,MAAOqa,EAAMra,MACbmI,QAAQ,WACR9H,SAAUq3B,IACNwD,EAAKI,cAAcjhB,EAAMyF,KAAM4X,IAEnCxvB,OAAQA,IAAMgzB,EAAKK,sBAMvCn4B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,4BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,qBACN2xB,KAAK,GACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,0BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,sBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,gBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,eACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,2BACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,yBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,oBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,yBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,0BACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,uBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,wBACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,eAM1Ct0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,cACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACNrE,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnC03B,SAAUwD,EAAK/tB,OAAOuqB,iB,iECjLtD,MAAM32B,GAAYC,YAAWC,IAAK,CAC9BuD,MAAO,CACH6H,WAAY,WAIL,SACXwB,UACA4xB,kBACA3X,WACA4X,aACAC,eACAC,UACAC,oBAEA,MAAM39B,EAAUnB,MACTmM,EAAM4yB,GAAW5/B,mBAAS,KAC1B6/B,EAAeC,GAAoB9/B,oBAAS,GAEnD2C,oBAAU,KACF+8B,IACAE,EAAQF,GACRI,OAAgDr/B,WAAxBi/B,EAAQpJ,eAErC,CAACoJ,IAEJ,MAAMl/B,EAAQA,KACVo/B,EAAQ,IACRE,GAAiB,IAGfngC,EAAWA,IACRqN,EAAK1I,MAIL0I,EAAK4S,KAIL,YAAYmgB,KAAK/yB,EAAK4S,MAItB8f,IACyC,IAAtCC,EAAcxxB,QAAQnB,EAAK4S,MAK/BigB,IAAkB7yB,EAAKspB,YAChB,oFADX,EAJe,oBAAoBtpB,EAAK4S,mDAL7B,oEAJA,0CAJA,mCAiDTja,EAAeA,KACb+5B,EACAD,IAEAF,GAAgB,IAIlBh8B,EAAenD,sBACjB,CAAC+Z,EAAOra,KACJ8/B,EAAQ,IACD5yB,EACH,CAACmN,GAAQra,KAGjB,CAACkN,IAGL,OACI9J,IAAAC,cAAC0C,IAAM,CACHmE,WAAS,EACTiU,SAAS,KACT9Y,KAAMwI,GAAW+xB,EACjBt6B,QAASO,EACTG,kBAAgB,qBAEhB5C,IAAAC,cAAC6C,KAAW,CAACzB,GAAG,qBACXm7B,EAAU,QAAQA,EAAQp7B,MAAU,qBAEzCpB,IAAAC,cAAC8C,KAAa,KACV/C,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,iBAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,oBACZpI,MAAOkN,EAAK1I,MACZnE,SAAUL,GAASyD,EAAa,QAASzD,KAE7CoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUytB,cAAY,GAAC,sCAG3CnuB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,gBAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,oBACZpI,MAAOkN,EAAK4S,KACZzf,SAAUL,GAASyD,EAAa,OAAQzD,KAE5CoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUytB,cAAY,GAAC,2CAG3CnuB,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,eAGtDpB,IAAAC,cAACm4B,KAAa,CACVx7B,MAAOkN,EAAK8S,YACZ3f,SAAUL,GAASyD,EAAa,cAAezD,KAEnDoD,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,cAGtDpB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUzC,MAAM,OAAOkwB,cAAY,GAAC,0GAIxDnuB,IAAAC,cAACsB,IAAG,CAACtD,MAAM,QACP+B,IAAAC,cAAC68B,KAAgB,CACbC,QACI/8B,IAAAC,cAACyB,KAAM,CACHs7B,QAASL,EACT1/B,SAAUA,CAACE,EAAGP,IAAUggC,EAAiBhgC,GACzCwG,MAAM,YAGdhC,MAAM,kCAGbu7B,GACG38B,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,wBAGtDpB,IAAAC,cAACmE,IAAU,CAACnG,MAAM,OAAOyC,QAAQ,UAAUytB,cAAY,GAAC,+GAKxDnuB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,sDACZpI,MAAOkN,EAAKspB,YACZn2B,SAAUL,GACNyD,EAAa,cAAezD,OAMhDoD,IAAAC,cAACgD,KAAa,KACVjD,IAAAC,cAACiD,IAAM,CACHC,QAASV,EACTW,MAAM,kBACN1C,QAAQ,aACX,UAGDV,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CACHC,QAASq5B,EA5HNhV,KACf,MAAMzqB,EAAQN,IACVM,EACAkgC,OAAOC,MAAMngC,IAEbu/B,EAAW,IACJxyB,EACHspB,YAAauJ,EAAgB7yB,EAAKspB,iBAAc71B,IAEpDD,MAvBU+7B,KACd,MAAMt8B,EAAQN,IACVM,EACAkgC,OAAOC,MAAMngC,IAEb2nB,EAAS,IACF5a,EACHspB,YAAauJ,EAAgB7yB,EAAKspB,iBAAc71B,IAEpD8+B,GAAgB,GAChB/+B,MAiIQ8F,MAAM,UACN1C,QAAQ,aAEP87B,EAAU,aAAe,U,iGCnM9C,MAAMW,GAAc,CAChB/7B,MAAO,GACP2xB,KAAM,GACNG,SAAU,GACVD,eAAe,EACfD,UAAW,QAGTr1B,GAAYC,YAAWC,IAAK,CAC9BuD,MAAO,CACH6H,WAAY,WAIL,SACXzM,eAAe2gC,GACfC,cACA3yB,UACA4xB,kBACAI,gBACA/X,WACA4X,aACAC,eACAC,cAEA,MAAM19B,EAAUnB,MACTmM,EAAM4yB,GAAW5/B,mBAASN,GAEjCiD,oBAAU,KACF+8B,GACAE,EAAQF,IAEb,CAACA,IAEJ,MAAMl/B,EAAQA,KACVo/B,EAAQS,KAGN1gC,EAAWA,IACT6G,aAAQwG,EAAK1I,OACN,oBAGP0I,EAAK1I,MAAMkE,OAAS,IACb,sCAGPhC,aAAQwG,EAAKkpB,WACN,gCAGN,YAAY6J,KAAK/yB,EAAK4S,MAItB8f,IACyC,IAAtCC,EAAcxxB,QAAQnB,EAAK4S,WADnC,EAEe,kEAAkE5S,EAAK4S,kCAL3E,oEAgCTja,EAAeA,KACb+5B,EACAD,IAEAF,GAAgB,GAEpB/+B,KAGE+C,EAAenD,sBACjB,CAAC+Z,EAAOra,KACJ8/B,EAAQ,IACD5yB,EACH,CAACmN,GAAQra,KAGjB,CAACkN,IAGCuzB,EAAyBA,IAEvBr9B,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,eAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,4BACZpI,MAAOkN,EAAK9E,YACZ/H,SAAUL,GAASyD,EAAa,cAAezD,KAEnDoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,4CAkEpD,OACIvY,IAAAC,cAAC0C,IAAM,CACHmE,WAAS,EACTiU,SAAS,KACT9Y,KAAMwI,GAAW+xB,EACjBt6B,QAASO,EACTG,kBAAgB,qBAEhB5C,IAAAC,cAAC6C,KAAW,CAACzB,GAAG,qBACXm7B,EACK,QAAQ1yB,EAAK1I,MACb,4BAA4Bg8B,GAEtCp9B,IAAAC,cAAC8C,KAAa,KACV/C,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,SAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,+BACZpI,MAAOkN,EAAK1I,MACZnE,SAAUL,GAASyD,EAAa,QAASzD,KAE7CoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,6BAGxCvY,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,gBAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,iBACZL,SAAU63B,EACV5/B,MAAOkN,EAAK4S,KACZzf,SAAUL,GAASyD,EAAa,OAAQzD,KAE5CoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,sKAKxCvY,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,iBAGtDpB,IAAAC,cAACmU,KAAM,CACHxX,MAAOkN,EAAKkpB,UACZ/1B,SAAUL,GAASyD,EAAa,YAAazD,GAC7CoI,YAAY,aACZD,QAAS,CACL,CACInI,MAAO,OACPwE,MAAO,cAEX,CACIxE,MAAO,WACPwE,MAAO,aAEX,CACIxE,MAAO,UACPwE,MAAO,YAEX,CACIxE,MAAO,gBACPwE,MAAO,iBAEX,CACIxE,MAAO,kBACPwE,MAAO,sBAInBpB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,mHAhIrB+kB,MAC3B,OAAQxzB,EAAKkpB,WACT,IAAK,kBACL,IAAK,gBACD,OACIhzB,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,0BAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,6BACZpI,MACIkN,EAAKopB,SAASnuB,QACR+E,EAAKopB,SAASnuB,QAAQ4V,KAAK,KAC3B,GAEV1d,SAAUL,GACNyD,EAAa,WAAY,IAClByJ,EAAKopB,SACRnuB,QAASnI,EACJ+mB,MAAM,KACN9iB,IAAIrB,GAAQA,EAAK+9B,YAIlCv9B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,sDAGvC8kB,KAIb,IAAK,WACL,IAAK,UACD,OACIr9B,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,iBAGtDpB,IAAAC,cAACw4B,KAAY,CACT77B,MAAOkN,EAAKopB,SAASvB,UAAW,EAChC10B,SAAUL,GACNyD,EAAa,WAAY,IAClByJ,EAAKopB,SACRvB,QAAS/0B,MAIrBoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,0CAMpD,QACI,OAAO8kB,MA6ENC,GACDt9B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,QAGtDpB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,sEACZpI,MAAOkN,EAAKipB,KACZ91B,SAAUL,GAASyD,EAAa,OAAQzD,KAE5CoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,2GAIxCvY,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQR,UAAWpB,EAAQsC,OAAO,8BAGtDpB,IAAAC,cAACw4B,KAAY,CACT77B,MAAOkN,EAAKmpB,cACZh2B,SAAUL,GAASyD,EAAa,gBAAiBzD,KAErDoD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAU6X,WAAS,GAAC,kGAK5CvY,IAAAC,cAACgD,KAAa,KACVjD,IAAAC,cAACiD,IAAM,CACHC,QAASV,EACTW,MAAM,kBACN1C,QAAQ,aACX,UAGDV,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CACHC,QAASq5B,EArNNhV,KACf,MAAMzqB,EAAQN,IACVM,EACAkgC,OAAOC,MAAMngC,GAEbu/B,EAAWxyB,IAhBDuvB,KACd,MAAMt8B,EAAQN,IACVM,EACAkgC,OAAOC,MAAMngC,IAEb2nB,EAAS5a,GACTuyB,GAAgB,IAEpB/+B,KAyNY8F,MAAM,UACN1C,QAAQ,aAEP87B,EAAU,aAAe,mBClS9C,MAAM7+B,GAAYC,YAAWC,IAAK,CAC9BS,QAAS,CACLyT,QAASlU,EAAMmU,QAAQ,GACvB5T,WAAY,QACZ44B,UAAW,mCACX9b,aAAc,MACdsiB,aAAc3/B,EAAMmU,QAAQ,IAEhCyrB,mBAAoB,CAChBC,UAAW7/B,EAAMmU,QAAQ,OAIlB,SACXka,UACAjvB,WACA4oB,WACA8X,SACAC,aACAC,WACAC,UACAC,aAEA,MAAMj/B,EAAUnB,MACTqgC,EAAWC,GAAgBnhC,oBAAS,IACpC0/B,EAAS0B,GAAcphC,wBAASS,GACjCmvB,EAAYR,EAAQQ,WAAa,GACjC+P,EAAgB/P,EAAU7rB,IAAIs9B,GAAKA,EAAEzhB,MAErC2c,EAAYn8B,sBACdyvB,IACI,MAAMyR,EAAe1R,EAAUhjB,OAAOijB,GACtC1vB,EAAS,IACFivB,EACHQ,UAAW0R,KAGnB,CAACnhC,EAAUyvB,EAAWR,IAGpB1E,EAAatqB,sBACfyvB,IACI,MAAMyR,EAAe1R,EAAU7rB,IAAIs9B,GAC3BA,EAAEzhB,OAASiQ,EAASjQ,KACbiQ,EAEJwR,GAGXlhC,EAAS,IACFivB,EACHQ,UAAW0R,IAEfF,OAAW3gC,IAEf,CAACN,EAAUyvB,EAAWR,IAGpBmS,EAAmBnhC,sBACrB,CAACyvB,EAAU5rB,KACP,GAAc,IAAVA,EAAa,OACjB,MAAMu9B,EAAW5R,EAAU6R,QAC3BD,EAASv9B,GAASu9B,EAASv9B,EAAQ,GACnCu9B,EAASv9B,EAAQ,GAAK4rB,EACtB1vB,EAAS,IACFivB,EACHQ,UAAW4R,KAGnB,CAACrhC,EAAUyvB,EAAWR,IAGpBsS,EAAqBthC,sBACvB,CAACyvB,EAAU5rB,KACP,GAAIA,IAAU2rB,EAAUpnB,OAAS,EAAG,OACpC,MAAMg5B,EAAW5R,EAAU6R,QAC3BD,EAASv9B,GAASu9B,EAASv9B,EAAQ,GACnCu9B,EAASv9B,EAAQ,GAAK4rB,EACtB1vB,EAAS,IACFivB,EACHQ,UAAW4R,KAGnB,CAACrhC,EAAUyvB,EAAWR,IAGpBuS,EAAuBvhC,sBACzB,CAACyvB,EAAU5rB,KACP,MAAMu9B,EAAW5R,EAAU6R,QAC3BD,EAASI,OAAO39B,EAAO,GACvB9D,EAAS,IACFivB,EACHQ,UAAW4R,KAGnB,CAACrhC,EAAUyvB,EAAWR,IAG1B,OACIlsB,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQR,SACpB0B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,MAAMwrB,EAAQ9qB,OAClCpB,IAAAC,cAACgc,KAAI,KACDjc,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTE,UACIpH,IAAAC,cAACsB,IAAG,CAACrB,UAAWpB,EAAQ2+B,oBACpBz9B,IAAAC,cAAC0+B,KAAQ,CAACC,OAAQ1S,EAAQtP,kBAK1C5c,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,gBACRC,UACK8kB,EAAQkH,YAEH,OAAOlH,EAAQkH,eADf,UAMtBpzB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACHirB,EAAU7rB,IAAI,CAAC8rB,EAAU5rB,IACtBf,IAAAC,cAAC+Z,KAAc,CAAC7Y,IAAKwrB,EAASjQ,MAC1B1c,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACiH,KAAY,CACTC,QAASwlB,EAASvrB,MAClBgG,UAAWulB,EAASqG,aAG5BhzB,IAAAC,cAACma,KAAqB,CAACla,UAAWpB,EAAQ+/B,SACtC7+B,IAAAC,cAACgc,KAAI,KACDjc,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,aACRC,UAAWulB,EAASqG,aAG5BhzB,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,eACRC,UAAWulB,EAASjQ,QAG5B1c,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,cACRC,UAAWulB,EAAS3nB,eAG5BhF,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,WACRC,UACIpH,IAAAC,cAAA,UACK0sB,EAASuG,SACLvB,SACD3xB,IAAAC,cAAA,UACID,IAAAC,cAAA,cAAQ,WACK,KAGT0sB,EACKuG,SACAvB,SAIhBhF,EAASuG,SACLnuB,SACD4nB,EAASuG,SACJnuB,QAAQO,OACT,GACAtF,IAAAC,cAAA,UACID,IAAAC,cAAA,cAAQ,WACK,KAEZ0sB,EAASuG,SAASnuB,QAAQ4V,KACvB,aAUxC3a,IAAAC,cAAC+mB,KAAO,MACRhnB,IAAAC,cAACylB,KAAqB,KAClB1lB,IAAAC,cAACiD,IAAM,CACHE,MAAM,QACND,QAASA,IACLs7B,EAAqB9R,EAAU5rB,IAEtC,mBAGDf,IAAAC,cAACiD,IAAM,CACHE,MAAM,kBACND,QAASA,IAAM+6B,EAAWvR,IAC7B,iBAGD3sB,IAAAC,cAACiD,IAAM,CACHE,MAAM,kBACNuB,SAAoB,IAAV5D,EACVoC,QAASA,IACLk7B,EAAiB1R,EAAU5rB,IAElC,WAGDf,IAAAC,cAACiD,IAAM,CACHE,MAAM,kBACNuB,SAAU5D,IAAU2rB,EAAUpnB,OAAS,EACvCnC,QAASA,IACLq7B,EAAmB7R,EAAU5rB,IAEpC,iBAOjBf,IAAAC,cAACsB,IAAG,CACAE,EAAG,EACHuC,QAAQ,OACRC,cAAc,MACdK,SAAS,OACTJ,eAAe,YAEflE,IAAAC,cAACiD,IAAM,CAACE,MAAM,QAAQD,QAAS0iB,GAAU,kBAGzC7lB,IAAAC,cAACiD,IAAM,CACHE,MAAM,kBACND,QAASA,IAAM86B,GAAa,IAC/B,kBAGDj+B,IAAAC,cAACiD,IAAM,CAACE,MAAM,kBAAkBD,QAASw6B,GAAQ,gBAGjD39B,IAAAC,cAACiD,IAAM,CAACE,MAAM,kBAAkBD,QAAS06B,GAAU,WAGnD79B,IAAAC,cAACiD,IAAM,CAACE,MAAM,kBAAkBD,QAASy6B,GAAY,cAIzD59B,IAAAC,cAAC6+B,GAAgB,CACb1B,YAAalR,EAAQ9qB,MACrBqJ,QAASuzB,EACT3B,gBAAiB4B,EACjBxB,cAAeA,EACf/X,SAAU2U,EACViD,WAAY3P,GAAYnF,EAAWmF,GACnC4P,aAAcA,IAAM2B,OAAW3gC,GAC/Bi/B,QAASA,OCrRd,KAAGuC,WAAW,GAAI9hC,eAC7B,MAAO+gC,EAAWC,GAAgBnhC,oBAAS,IACpC0/B,EAAS0B,GAAcphC,qBACxB2/B,EAAgBt9B,kBAAQ,KAC1B,MAAM6/B,EAAeD,EAASl+B,IAAIo+B,GAAKA,EAAEviB,MACnCwiB,EAAgBj+B,OAAO2Q,KAAKuT,qBAAmBga,aACrD,OAAOH,EAAat1B,OAAOw1B,IAC5B,CAACH,IAEE1F,EAAYn8B,sBACdgvB,IACI,MAAM3rB,EAAWw+B,EAASr1B,OAAOwiB,GACjCjvB,EAASsD,IAEb,CAACtD,EAAU8hC,IAGT1+B,EAAenD,sBACjB,CAACkiC,EAAgBC,KACb,MAAM9+B,EAAWw+B,EAASl+B,IAAI,CAACqrB,EAASnrB,IAChCs+B,IAAiBt+B,EACVq+B,EAEJlT,GAEXjvB,EAASsD,IAEb,CAACtD,EAAU8hC,IAGTpe,EAAezjB,sBACjB,CAACgvB,EAASnrB,KACN,MAAMR,EAAWw+B,EAASR,QAC1Bh+B,EAASm+B,OAAO39B,EAAO,GACvB9D,EAASsD,IAEb,CAACtD,EAAU8hC,IAGTO,EAAepiC,sBACjB,CAACgvB,EAASnrB,KACN,GAAc,IAAVA,EAAa,OACjB,MAAMR,EAAWw+B,EAASR,QAC1Bh+B,EAASQ,GAASR,EAASQ,EAAQ,GACnCR,EAASQ,EAAQ,GAAKmrB,EACtBjvB,EAASsD,IAEb,CAACtD,EAAU8hC,IAGTQ,EAAiBriC,sBACnB,CAACgvB,EAASnrB,KACN,GAAIA,IAAUg+B,EAASz5B,OAAS,EAAG,OACnC,MAAM/E,EAAWw+B,EAASR,QAC1Bh+B,EAASQ,GAASR,EAASQ,EAAQ,GACnCR,EAASQ,EAAQ,GAAKmrB,EACtBjvB,EAASsD,IAEb,CAACtD,EAAU8hC,IAGTS,EAAiBtiC,sBACnBgvB,IACI,MAAM3rB,EAAWw+B,EAASl+B,IAAIo+B,GACtBA,EAAEviB,OAASwP,EAAQxP,KACZwP,EAEJ+S,GAEXhiC,EAASsD,GACT29B,OAAW3gC,IAEf,CAACN,EAAU8hC,IAkCf,OACI/+B,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACw/B,GAAe,CACZh1B,QAASuzB,EACT3B,gBAAiB4B,EACjBvZ,SAAU2U,EACVoD,cAAeA,EACfD,QAASA,EACTF,WAAYpQ,GAAWsT,EAAetT,GACtCqQ,aAAcA,IAAM2B,OAAW3gC,KAEd,IAApBwhC,EAASz5B,OA9BPtF,IAAAC,cAACoD,KAAK,CAACC,SAAO,EAACC,UAAU,wBAIzBw7B,EAASl+B,IAAI,CAACqrB,EAASnrB,IAC1Bf,IAAAC,cAACy/B,GAAqB,CAClBv+B,IAAK+qB,EAAQ9qB,MACb8qB,QAASA,EACTjvB,SAAUivB,GAAW7rB,EAAa6rB,EAASnrB,GAC3C8kB,SAAUA,IAAMlF,EAAauL,EAASnrB,GACtC88B,SAAUA,IAAMyB,EAAapT,EAASnrB,GACtC68B,WAAYA,IAAM2B,EAAerT,EAASnrB,GAC1C48B,OAAQA,IAAMO,EAAWhS,GACzB4R,QAAmB,IAAV/8B,EACTg9B,OAAQh9B,IAAUg+B,EAASz5B,OAAS,KAiBxCtF,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,SACdzF,WAAW,SACX0F,eAAe,SACf6W,SAAS,QACT9c,MAAM,OACNuG,OAAO,SACPuN,QAAS,GAlDjB/R,IAAAC,cAACiD,IAAM,CACHC,QAASA,IAAM86B,GAAa,GAC5Bn3B,WAAS,EACT1D,MAAM,UACN1C,QAAQ,aACX,kB,sFC7ET,MAAMkW,GAASuO,qBAAmBga,YAC5BQ,GAAe1+B,OAAO2Q,KAAKgF,IAC5B/V,IAAIshB,GACGvL,GAAOuL,GAAWyd,cAAsB,KAErC,CACHzd,YACA/gB,MAAOwV,GAAOuL,GAAW/gB,MACzBy+B,SAAUjpB,GAAOuL,GAAW0d,SAC5BC,eAAgBlpB,GAAOuL,GAAW2d,iBAGzC11B,OAAOuf,GAAe,OAARA,GACboW,GAAmBpuB,aAAQguB,GAAcnT,GAAKA,EAAEqT,SAASx+B,IACzD2+B,GAAa7a,qBAAmB8a,qBAEhCtiC,GAAYC,YAAWC,IAAK,CAC9BqiC,aAAc,CACVj3B,WAAY,QAEhB0jB,SAAU,CACN/jB,OAAQ,OACR,WAAY,CACRuD,WAAY,oBAKT,SAAGlP,WAAUq2B,iBAAiB,GAAIC,iBAAiB,OAC9D,MAAMz0B,EAAUnB,KACV0C,EAAenD,sBACjB,CAACilB,EAAWge,EAAYC,KAEhBnjC,EADAkjC,EACS,CACL5M,eAAgB,IAAIA,EAAgBpR,GACpCmR,eAAgBA,EAAelpB,OAAOoiB,GAAKA,IAAMrK,IAE9Cie,EACE,CACL7M,eAAgBA,EAAenpB,OAAOoiB,GAAKA,IAAMrK,GACjDmR,kBAGK,CACLC,iBACAD,eAAgB,IAAIA,EAAgBnR,MAIhD,CAACllB,EAAUq2B,EAAgBC,IAsB/B,OACIvzB,IAAAC,cAAC83B,KAAW,CAACp2B,UAAU,WAAWiI,MAAO,CAAE5F,QAAS,UAChDhE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKytB,cAAY,GAAC,0BAGtCnuB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAAQ,mHAEyB,IACjDV,IAAAC,cAAA,QAAM2J,MAAO,CAAEX,WAAY,SAAU,mEAMzCjJ,IAAAC,cAACsB,IAAG,CAACsC,GAAI,EAAGD,GAAI,EAAGK,cAAc,MAAMK,SAAS,QAC5CtE,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQytB,cAAY,GAAC,WAGzCnuB,IAAAC,cAAC2G,KAAI,CACDc,KAAK,QACLhH,QAAQ,WACRU,MAAM,SACN2O,KAAM/P,IAAAC,cAACogC,KAAiB,QACzB,IACHrgC,IAAAC,cAAC2G,KAAI,CACDc,KAAK,QACLtE,MAAM,UACNhC,MAAM,kBACN2O,KAAM/P,IAAAC,cAACqgC,KAAc,QACtB,IACHtgC,IAAAC,cAAC2G,KAAI,CACDc,KAAK,QACLtE,MAAM,YACNhC,MAAM,kBACN2O,KAAM/P,IAAAC,cAACqgC,KAAc,SAI5BN,GAAWn/B,IAAI,EAAGQ,KAAID,WACnBpB,IAAAC,cAACsB,IAAG,CAACkZ,GAAI,GACLza,IAAAC,cAACmE,IAAU,CACPlE,UAAWpB,EAAQohC,aACnBx/B,QAAQ,SACRytB,cAAY,GAEX/sB,GAELpB,IAAAC,cAACsgC,KAAS,CAACv1B,KAAG,GACT6gB,QAAQC,IAAIiU,GAAiB1+B,IAC7B0+B,GAAiB1+B,GAAIR,IAClB,EAAGshB,YAAW/gB,QAAO0+B,qBACjB,MAAMK,GACqC,IAAvC7M,EAAeroB,QAAQkX,GACrBie,GACqC,IAAvC7M,EAAetoB,QAAQkX,GAC3B,OACIniB,IAAAC,cAACsB,IAAG,CAACJ,IAAKghB,EAAWtX,GAAI,EAAGrJ,GAAI,GAC3Bs+B,EACG9/B,IAAAC,cAAC2G,KAAI,CACDxD,MAAM,YACNsE,KAAK,QACLtG,MAAOA,EACPlB,UAAWpB,EAAQ6tB,SACnB5c,KAAM/P,IAAAC,cAACqgC,KAAc,QAGzBtgC,IAAAC,cAAC2G,KAAI3F,OAAAC,OAAA,GArFxBs/B,EAACL,EAAYC,IAC1BD,EACO,CACH/8B,MAAO,UACP2M,KAAM/P,IAAAC,cAACqgC,KAAc,OAElBF,EACA,CACHh9B,MAAO,YACP2M,KAAM/P,IAAAC,cAACqgC,KAAc,OAGlB,CACH5/B,QAAS,WACTqP,KAAM/P,IAAAC,cAACogC,KAAiB,OAwEYG,CACAL,EACAC,GACH,CAEDK,WAAS,EACT/4B,KAAK,QACLvE,QAASA,IACL9C,EACI8hB,EACAge,EACAC,GAGRh/B,MAAOA,EACPlB,UAAWpB,EAAQ6tB,oBC9JpD,OA8DP3sB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,qBACLvM,OAAQA,EAAG8G,QAAO6gB,WAAM,IAAA4I,EAAAC,EAAA,OACpB3gC,IAAAC,cAAC2gC,GAAc,CACXtN,eAAqB,OAALrc,QAAK,IAALA,GAAY,QAAPypB,EAALzpB,EAAOra,aAAK,IAAA8jC,OAAP,EAALA,EAAcpN,eAC9BC,eAAqB,OAALtc,QAAK,IAALA,GAAY,QAAP0pB,EAAL1pB,EAAOra,aAAK,IAAA+jC,OAAP,EAALA,EAAcpN,eAC9Bt2B,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,SAMnDoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,kBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACN2xB,KAAK,qCAEL/yB,IAAAC,cAAC4gC,GAAiB,CACd9B,SAAU9nB,EAAMra,MAChBK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,U,UCxFpD,OAEPoD,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,YACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,aACN2xB,KAAK,aACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC0Y,IAAS,CACN+D,KAAK,YACL1X,YAAY,WACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,YAM7D1c,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,WACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,YACN2xB,KAAK,iEACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC4Y,KAAa,CACV6D,KAAK,WACL1X,YAAY,mNACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,YAM7D1c,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,kBACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,mBACN2xB,KAAK,wEACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAAC0Y,IAAS,CACN+D,KAAK,kBACL1X,YAAY,aACZpI,MAAOqa,EAAMra,MACbK,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,GAEnCkI,OAAQA,IAAMgzB,EAAKK,gBAAgBlhB,EAAMyF,a,sBCjD1D,KAAG9f,QAAOK,eACrB,MAAO6jC,EAAYC,GAAiBjkC,sBAC7BkkC,EAAgBC,GAAqBnkC,mBACxC,IAAImW,KAAK,IAAIA,MAAK,IAAIA,MAAOiuB,SAAS,EAAG,EAAG,EAAG,OAE5CnI,EAAWC,GAAgBl8B,oBAAU,IACrCm8B,EAAWC,GAAgBp8B,mBAAS,CACvCuF,MAAO,GACPoxB,eAAWl2B,KAER+2B,EAAU6M,GAAerkC,mBAAS,YAGlCskC,EAAcC,GAAmBvkC,mBAAS,YAG3CwkC,EAAeniC,kBAAQ,KACT,CACZoiC,SAAUn8B,MAAMC,QAAQzI,GAClBA,EAAMwN,OACF5K,GACIA,IAAyB,aAAhBA,EAAKgiC,SAA0BhiC,EAAKgiC,SAErD,GACNC,KAAMr8B,MAAMC,QAAQzI,GACdA,EAAMwN,OAAO5K,GAAQA,GAAwB,SAAhBA,EAAKgiC,QAClC,GACNE,KAAMt8B,MAAMC,QAAQzI,GACdA,EAAMwN,OAAO5K,GAAQA,GAAwB,SAAhBA,EAAKgiC,QAClC,KAGX,CAAC5kC,IAIEy8B,EAAYn8B,sBAAY,KAC1B,IAAK4jC,IAAeE,EAAgB,OAGpC,MAAMW,EAAU,CACZt/B,MAAOy+B,EACPrN,UAAWuN,EACXQ,OAAQJ,GAIZnkC,EAASmI,MAAMC,QAAQzI,GAAS,IAAIA,EAAO+kC,GAAW,CAACA,IACvDZ,EAAc,IACdE,EAAkB,IAAIhuB,MAAK,IAAIA,MAAOiuB,SAAS,EAAG,EAAG,EAAG,MACzD,CAACtkC,EAAOkkC,EAAYE,EAAgB/jC,EAAUmkC,IAE3CzgB,EAAezjB,sBACjB6D,IAEI,IACKugC,EAAaF,IACdrgC,GAASugC,EAAaF,GAAc97B,OAEpC,OAIJ,MAAMs8B,EAAeN,EAAaF,GAAcrgC,GAChD,IAAK6gC,EAAc,OAEnB,MAAMC,EAAcz8B,MAAMC,QAAQzI,GAC5BA,EAAM2C,UACFC,GACIA,GACAoiC,GACApiC,EAAK6C,QAAUu/B,EAAav/B,OAC5B7C,EAAKi0B,YAAcmO,EAAanO,WAChCj0B,EAAKgiC,SAAWI,EAAaJ,SAEpC,GAEc,IAAjBK,GACA5kC,EAASL,EAAMwN,OAAO,CAAC03B,EAAGrb,IAAQA,IAAQob,KAGlD,CAACjlC,EAAOK,EAAUqkC,EAAcF,IAG9B9H,EAAkBp8B,sBACpB6D,IAEI,IACKugC,EAAaF,IACdrgC,GAASugC,EAAaF,GAAc97B,OAEpC,OAIJ,MAAMy8B,EAAaT,EAAaF,GAAcrgC,GAC9C,IAAKghC,EAAY,OAEjB,MAAMF,EAAcz8B,MAAMC,QAAQzI,GAC5BA,EAAM2C,UACFC,GACIA,GACAuiC,GACAviC,EAAK6C,QAAU0/B,EAAW1/B,OAC1B7C,EAAKi0B,YAAcsO,EAAWtO,WAC9Bj0B,EAAKgiC,SAAWO,EAAWP,SAElC,GAEc,IAAjBK,IACA7I,EAAa6I,GACb3I,EAAat8B,EAAMilC,MAG3B,CAACjlC,EAAO0kC,EAAcF,IAGpB7H,EAAmBr8B,sBAAY,KACjC87B,GAAc,GACdE,EAAa,CACT72B,MAAO,GACPoxB,eAAWl2B,KAEhB,IAEGi8B,EAAiBt8B,sBAAY,MAE1BkI,MAAMC,QAAQzI,IACfm8B,EAAY,GACZA,GAAan8B,EAAM0I,QAMvBrI,EACIL,EAAMiE,IAAI,CAACrB,EAAMuB,IACTA,IAAUg4B,EACH,IACAE,EACHuI,OAAQJ,GAGT5hC,IAZX+5B,KAgBL,CAAC38B,EAAOm8B,EAAWE,EAAWh8B,EAAUs8B,EAAkB6H,IAEvD3H,EAAUt6B,kBAAQ,IAEhB2hC,GACAE,GACAM,EAAaF,IAOC,IANdE,EAAaF,GAAch3B,OAAO5K,GAE1BA,GACAA,EAAK6C,QAAUy+B,GACfjW,KAAOrrB,EAAKi0B,WAAWuO,OAAOnX,KAAOmW,KAE1C17B,OAER,CAAC07B,EAAgBF,EAAYQ,EAAcF,IAmF9C,OACIphC,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACE,KAAI,CACDvD,MAAOwkC,EACPnkC,SAvFGglC,CAAC3hC,EAAOC,KAC/B8gC,EAAgB9gC,IAuFIC,eAAe,UACfC,UAAU,UACVC,QAAQ,aAERV,IAAAC,cAACe,KAAG,CAACI,MAAM,WAAWxE,MAAM,aAC5BoD,IAAAC,cAACe,KAAG,CAACI,MAAM,uBAAuBxE,MAAM,SACxCoD,IAAAC,cAACe,KAAG,CAACI,MAAM,sBAAsBxE,MAAM,WAG/CoD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACiiC,KAAW,CACR9gC,MAAM,WACN2D,QAAQ,WACRnI,MAAO03B,EACPr3B,SAAUq3B,IACN6M,EAAY7M,MAGpBt0B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,WAAU,sDAIlCV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,aACNxE,MAAOkkC,EACP7jC,SAAU8jC,IAEd/gC,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,WAAU,mCAIlCV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOokC,EACP/jC,SAAUgkC,EACV3M,SAAUA,IAEdt0B,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,WAAU,8CAIlCV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,MACdC,eAAe,YAEflE,IAAAC,cAACiD,IAAM,CACHyB,UAAW80B,EACXt2B,QAASk2B,EACTj2B,MAAM,kBACN1C,QAAQ,aACX,cAKTV,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,YAAYytB,cAAY,GACtB,aAAjBiT,EACK,WACiB,SAAjBA,EACA,uBACA,sBAAuB,IAAI,kBAGrCphC,IAAAC,cAACgc,KAAI,KACAqlB,EAAaF,IACVE,EAAaF,GACRe,KAAK,CAACzvB,EAAGC,IACND,EAAE+gB,UAAY9gB,EAAE8gB,WAAa,EAAI,GAEpC5yB,IAAI,CAACrB,EAAMuB,IA7JrB24B,EAACl6B,EAAMuB,IACtBA,IAAUg4B,EAEN/4B,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAK,QAAQJ,EAAS44B,SAAO,GACnC35B,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAAC7O,MAAO,CAAE1F,eAAgB,kBACrClE,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAOq8B,EAAU52B,MACjBpF,SAAUL,GACNs8B,EAAa,IAAKD,EAAW52B,MAAOzF,IAExCwE,MAAO,kBAAiBL,EAAQ,MAGxCf,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,UACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASo2B,GACjBv5B,IAAAC,cAAC25B,KAAS,SAItB55B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi7B,GAAa,CACVt+B,MAAOq8B,EAAUxF,UACjBx2B,SAAUL,GACNs8B,EAAa,IACND,EACHxF,UAAW72B,IAGnB03B,SAAUA,KAGlBt0B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,QACXrC,IAAAC,cAACkI,KAAU,CACPxD,UACKs0B,GACDA,EAAU52B,MAAMiD,OAAS,IACxB2zB,EAAUxF,UAEftwB,QAASq2B,GAETx5B,IAAAC,cAAC45B,KAAQ,WAUjC75B,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAK,QAAQJ,EAAS44B,SAAO,GACnC35B,IAAAC,cAACiH,KAAY,CACTC,QAAS3H,EAAK6C,MACd+E,UAAWyjB,KAAOrrB,EAAKi0B,UAAUiH,YAAY5P,OACzC,sBAGR9qB,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,aACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASA,IAAMm2B,EAAgBv4B,IACvCf,IAAAC,cAAC65B,KAAQ,QAGjB95B,IAAAC,cAACkhB,KAAO,CAAC9e,MAAM,eACXrC,IAAAC,cAACkI,KAAU,CAAChF,QAASA,IAAMwd,EAAa5f,IACpCf,IAAAC,cAAC85B,KAAgB,UA0FLL,CAAel6B,EAAMuB,UCvV9C,OAEPf,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACi6B,KAAK,CACFxd,KAAK,sBACLvM,OAAQA,EAAG8G,QAAO6gB,WAEd,MAAM3yB,EAAQC,MAAMC,QAAQ4R,EAAMra,OAC5Bqa,EAAMra,MAAMiE,IAAIrB,GAERA,GACgB,kBAATA,IACNA,EAAKgiC,OAEC,IAAKhiC,EAAMgiC,OAAQ,YAEvBhiC,GAEX,GAEN,OACIQ,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,WACN2xB,KAAK,0JACLh2B,MAAO+6B,EAAK9gB,OAAOC,EAAMyF,MACzBsb,QAASF,EAAKE,QAAQ/gB,EAAMyF,OAE5B1c,IAAAC,cAACmiC,GAAY,CACTxlC,MAAOuI,EACPlI,SAAUL,GACNk7B,EAAKI,cAAcjhB,EAAMyF,KAAM9f,U,oDChBnE,MAAMylC,GAAS,CACX,UACA,UACA,MACA,SACA,SACA,OACA,OACA,cACA,gBACA,QACA,aACA,OACA,OACA,YACA,UAGEC,GAAeA,EAAGl/B,WAEhBpD,IAAAC,cAAA,OAAK2J,MAAO,CAAE5F,QAAS,OAAQxF,WAAY,WACvCwB,IAAAC,cAAA,QACI2J,MAAO,CACHhB,OAAQ,OACR3K,MAAO,OACPid,aAAc,MACd9c,WAAYgF,EACZwc,YAAa,UAGpBxc,GAKPzF,GAAYC,YAAWC,IAAK,CAC9B0kC,aAAc,CACVn/B,MAAOvF,EAAMM,QAAQpB,MAAM8L,SAIpB,SAAGjM,QAAQ,GAAIulB,YAAW+V,oBACrC,MAAMp5B,EAAUnB,KACVyD,EAAQ7E,aAAa,GAAIK,GACtBA,GAA0B,IAAjBA,EAAM0I,OAGhB1I,EAAM0I,OAAS,GACR,yCAE2C,IAAlD/F,aAAU3C,EAAO0X,GAAOA,EAAIlT,QAAUxE,GAC/B,uBAAuBA,wBADlC,EALW,wBAWTwG,EAAQ7G,kBAAagB,EAAWX,IAClC,IAAKA,GAA0B,IAAjBA,EAAM0I,OAChB,MAAO,0BAKTsX,EAAcrgB,aAAa,GAAIK,GAC5BA,GAA0B,IAAjBA,EAAM0I,OAIhB1I,EAAM0I,OAAS,IACR,oDADX,EAHW,gDAQTk9B,EAAYtlC,sBAAY,KAC1BkE,EAAM9D,QACN8F,EAAM9F,QACNsf,EAAYtf,SACb,CAAC8D,EAAOgC,EAAOwZ,IAEZyc,EAAYn8B,sBAAY,KAE1B,IAAIulC,GAAU,EADA,CAACrhC,EAAOgC,EAAOwZ,GAEvB1F,QAAQ1X,IACV,MAAM/B,EAAM+B,EAAK/C,SAAS+C,EAAK5C,OAC3Ba,IACA+B,EAAKxC,SAASS,GACdglC,GAAU,KAIbA,IAGDvK,EACI/V,EACAvlB,EAAM8M,OAAO,CACTtI,MAAOA,EAAMxE,MACbwG,MAAOA,EAAMxG,MACbggB,YAAaA,EAAYhgB,SAGjC4lC,MAEL,CAAC5lC,EAAOulB,EAAW/e,EAAOhC,EAAOwb,EAAa4lB,EAAWtK,IAEtDxQ,EAAexqB,sBACjBkE,IACI82B,EACI/V,EACAvlB,EAAMwN,OAAOkK,GAAOA,EAAIlT,QAAUA,KAG1C,CAAC82B,EAAe/V,EAAWvlB,IA6B/B,OACIoD,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,EAAGxT,WAAW,YACnCwB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,WACNxE,MAAOwE,EAAMxE,MACbK,SAAUmE,EAAMvE,WAEpBmD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUR,UAAWpB,EAAQyjC,cAC5CnhC,EAAMrE,QAGfiD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAACmU,KAAM,CACHhT,MAAM,YACN4D,YAAY,eACZpI,MAAOwG,EAAMxG,MACbK,SAAUmG,EAAMvG,SAChBkI,QAASs9B,GAAOxhC,IAAIuC,IAAK,CACrBhC,MAAOpB,IAAAC,cAACqiC,GAAY,CAACl/B,MAAOA,IAC5BxG,MAAOwG,OAGfpD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUR,UAAWpB,EAAQyjC,cAC5Cn/B,EAAMrG,QAGfiD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAAC0Y,IAAS,CACNvX,MAAM,kBACNxE,MAAOggB,EAAYhgB,MACnBK,SAAU2f,EAAY/f,WAE1BmD,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAUR,UAAWpB,EAAQyjC,cAC5C3lB,EAAY7f,QAGrBiD,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAACiD,IAAM,CACH4D,WAAS,EACTpG,QAAQ,YACR0C,MAAM,UACND,QAASk2B,GACZ,QAILr5B,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACgc,KAAI,KAzERrf,EACEA,EAAMiE,IAAI,CAACrB,EAAMuB,IAAU,CACpB,IAAVA,EAAcf,IAAAC,cAAC+mB,KAAO,MAAM,KAC5BhnB,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QACInH,IAAAC,cAACsB,IAAG,CAACkZ,GAAI,IACLza,IAAAC,cAACyiC,KAAG,CAACt/B,MAAO5D,EAAK4D,MAAOhC,MAAO5B,EAAK4B,SAG5CgG,UAAW5H,EAAKod,cAEpB5c,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACkI,KAAU,CACPhF,QAASA,IAAMukB,EAAaloB,EAAK4B,OACjC4kB,KAAK,MACLplB,aAAW,YAEXZ,IAAAC,cAACgmB,KAAU,WAlBR,S,uBC9GTroB,YAAWC,IAAK,CAC9B0kC,aAAc,CACVn/B,MAAOvF,EAAMM,QAAQpB,MAAM8L,SCbjBjL,YAAWC,IAAK,CAC9B0kC,aAAc,CACVn/B,MAAOvF,EAAMM,QAAQpB,MAAM8L,MAE/BytB,gBAAiB,CACbO,OAAQ,EACR3b,aAAc,GACdjP,SAAU,GACVoH,YAAa,U,QCyDNsvB,ICxEA,OAEP3iC,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC43B,KAAS,CACNnb,KAAK,OACLvM,OAAQA,EAAG8G,QAAO6gB,UACd93B,IAAAC,cAAC83B,KAAW,CACR32B,MAAM,OACN2xB,KAAK,kDAEL/yB,IAAAC,cAAC2iC,GAAa,CACVhmC,MAAOqa,EAAMra,MACbulB,UAAWlL,EAAMyF,KACjBwb,cAAeJ,EAAKI,qB,WCxBpD,MAAM2K,GACSnM,IAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmCLoM,GAAepM,IAAG;;;;;;MAMzBmM;ECfS,YACX,MAAMjkC,EAAWC,eACVkkC,EAAaC,GAAcC,aAAYH,GAAc,CACxDI,YAAa,MAEbC,QAAS1lC,IACL,MAAMuZ,EAASvZ,EAAI2lC,cAEfxkC,EADAoY,EAEIG,IAAsB,yBAA0B,CAC5CksB,cAAepiC,OAAO2Q,KAAKoF,GAAQnW,IAC/BM,GAAO,GAAGA,MAAQ6V,EAAO7V,GAAKmB,WAElCghC,SAAS,IAIRnsB,IAAsB,4BAGvCosB,YAAaA,KACT3kC,EAASmb,IAA6BxC,IAAOC,KAAK,IAC9C5Y,EACIuY,IACI,6CAMdqsB,EAAQC,cACR/kC,EAAWglC,cAEXpjC,EAAQqV,YAAYG,KACpBC,EAAUJ,YAAYG,MACtB,KAAEyB,EAAI,IAAE+X,GAAQhvB,EAyDtB,OACIN,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,GAClB/V,IAAAC,cAACmY,IAAU,CACPC,QAAQ,aACRC,WAAW,6DAEftY,IAAAC,cAAC0jC,KAAM,CACHC,cACIZ,EAAWl5B,KAAOk5B,EAAWl5B,KAAK+5B,YAAcvjC,EAEpDwjC,oBAAoB,EACpBpf,SAlEZ,SAAkB3a,EAAQX,GACtB,MAAM26B,EAAU,GAChBC,aAAOj6B,EAAQ,CAACnN,EAAOqa,KACf3W,EAAM2W,KAAWra,IACjBmnC,EAAQ9sB,GAASra,KAGzB,MAAMqnC,EAAe,IACdl6B,EACHspB,mBAAoB,IACbtpB,EAAOspB,mBACVC,eAAgBvpB,EAAOspB,mBAAmBC,eAC1CC,eAAgBxpB,EAAOspB,mBAAmBE,gBAE9C11B,MAAO,IACAkM,EAAOlM,eAKXomC,EAAa3U,WACb2U,EAAaC,oBACbD,EAAaE,qBACbF,EAAaG,iBACbH,EAAaI,iBACbJ,EAAaK,WACbL,EAAaM,2CACbN,EAAaO,6BACbP,EAAaQ,aAGhBR,EAAa5Q,2BACN4Q,EAAa5Q,mBAAmB/D,IAGvC2U,EAAapmC,cACNomC,EAAapmC,MAAMyxB,IAG1B2U,EAAazQ,sBACNyQ,EAAazQ,cAAclE,IAIrC,CAAC,aAAc,QAAQpY,QAAQD,IACxBgtB,EAAahtB,IAAUgtB,EAAahtB,GAAOqY,YACpC2U,EAAahtB,GAAOqY,MAInCyT,EAAY,CACR2B,UAAW,CAAEpV,MAAKqV,MAAOV,KAE7B76B,EAAQw7B,eAAc,IAcdC,iBAAkBC,IAEjBC,GACG/kC,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAAC+kC,KAAkB,CACfjnC,aAAW,EACXU,KAAM,CACF,CACIO,KAAM,GACNmC,IAAK,gBACLC,MAAO,gBACPO,UAAWsjC,IAEf,CACIjmC,KAAM,iBACNmC,IAAK,gBACLC,MAAO,gBACPO,UAAWujC,IAQf,CACIlmC,KAAM,oBACNmC,IAAK,mBACLC,MAAO,mBACPO,UAAWwjC,IAEf,CACInmC,KAAM,iBACNmC,IAAK,gBACLC,MAAO,gBACPO,UAAWyjC,IAEf,CACIpmC,KAAM,iBACNmC,IAAK,gBACLC,MAAO,gBACPO,UAAW0jC,IAEf,CACIrmC,KAAM,YACNmC,IAAK,WACLC,MAAO,WACPO,UAAW2jC,IAEf,CACItmC,KAAM,aACNmC,IAAK,YACLC,MAAO,YACPO,UAAW4jC,IAEf,CACIvmC,KAAM,cACNmC,IAAK,aACLC,MAAO,kBACPO,UAAW6jC,IAEf,CACIxmC,KAAM,SACNmC,IAAK,QACLC,MAAO,gBACPO,UAAW8jC,KAGnB/mC,SAAUA,EACVC,UAAW6kC,EAAM/mB,MAErBzc,IAAAC,cAAA,OAAK2J,MAAO,CAAEhB,OAAQ,WACtB5I,IAAAC,cAACylC,KAAS,CACNhhB,SAAUqgB,EAAYjrB,aACtB9C,OAAQ+tB,EAAY/tB,OACpBtZ,MAAOqnC,EAAYrnC,MACnBqY,QAASitB,EAAWjtB,c,gGC1LjC,KAAGsF,SAAQnZ,UAASyjC,UAAS9pB,aAAYtE,WACpD,MAAM3Y,EAAWC,cACX6W,EAAUC,YAAYC,MACrBoZ,EAAS4W,GAAc9oC,mBAAS,KAChC+oC,EAAaC,GAAkBhpC,mBAAS,IAEzCipC,EAAe7oC,sBAAY,KAC7B8oC,KAAoBC,WAAWvwB,EAASmwB,GACnCruB,KAAK0uB,IACmB,IAAjBA,EAAM5gC,QACN1G,EAASuY,IAAqB,mBAElCyuB,EAAWM,KAEdzuB,MAAMha,IACHmB,EACIuY,IACI,iDAIjB,CAAC0uB,EAAanwB,EAAS9W,IAEpBy6B,EAAYn8B,sBACdsX,IACImxB,EAAQnxB,EAAKuE,QACb7W,KAEJ,CAACyjC,EAASzjC,IAGd,OACIlC,IAAAC,cAACqf,KAAM,CAACC,OAAO,QAAQrd,QAASA,EAASD,KAAMoZ,GAC3Crb,IAAAC,cAACsB,IAAG,CAACtD,MAAM,QAAQwD,EAAG,GAClBzB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKytB,cAAY,GAAC,oBAGtCnuB,IAAAC,cAAC0Y,IAAS,CACN3T,YAAY,oDACZpI,MAAOipC,EACP5oC,SAAU6oC,IAEd9lC,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CACH4D,WAAS,EACT1D,MAAM,UACN1C,QAAQ,YACRyC,QAAS4iC,GACZ,UAGD/lC,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACgc,KAAI,KACA+S,EAAQnuB,IAAI2T,GACTxU,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAKqT,EAAKuE,QAChB/Y,IAAAC,cAACgV,KAAc,KACXjV,IAAAC,cAACiV,KAAM,CACHC,IAAK,oBACLC,IAAKZ,EAAOA,EAAKa,OAAS,MAIlCrV,IAAAC,cAACiH,KAAY,CACTC,QAAS,GAAGqN,EAAKI,aAAaJ,EAAKK,WACnCzN,UACIpH,IAAAC,cAACD,IAAM4K,SAAQ,KACX5K,IAAAC,cAACmE,IAAU,CACPzC,UAAU,IACVjB,QAAQ,SACX,UACW,IACRV,IAAAC,cAAA,cAASuU,EAAKO,QAElB/U,IAAAC,cAACmE,IAAU,CACPzC,UAAU,IACVjB,QAAQ,SACX,mBACoB,IACjBV,IAAAC,cAAA,cACK,IAAIgT,KACDuB,EAAK4vB,WACP+B,uBAMgB,IAArCtqB,EAAW5Q,QAAQuJ,EAAKuE,QACrB/Y,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACkI,KAAU,CAAChF,QAASA,IAAMk2B,EAAU7kB,IACjCxU,IAAAC,cAACmmC,KAAO,QAIhBpmC,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,UAAS,gBCjGlD,QACX,MAAM9B,EAAWC,cAEXyB,EAAQqV,YAAYG,KACpBuwB,EAAe1wB,YAAYG,KAC3BwwB,EAAoB3wB,YAAYG,MAE/BywB,EAAYC,GAAiB1pC,oBAAS,IACtCiZ,EAASC,GAAclZ,oBAAS,IACjC,KAAEya,GAASjX,EAEjBb,oBAAU,KACNb,EACImb,IACIzZ,EAAMy1B,MACNz1B,EAAMub,aAEZpE,MAAM,KACJ7Y,EACIuY,IACI,kFAIb,CAAC7W,EAAMub,WAAYvb,EAAMy1B,MAAOn3B,IAEnC,MAAM6nC,EAAyBvpC,sBAC3B6b,IACI/C,GAAW,GACXpX,EAASmb,IAA0CxC,EAAMwB,IACpDvB,KAAK,KACF5Y,EAASuY,IAAwB,wBAEpCM,MAAM,KACH7Y,EACIuY,IACI,+DAIXO,QAAQ,KACL1B,GAAW,MAGvB,CAACpX,EAAU2Y,IAGTmvB,EAAuBxpC,sBACzB6b,IACI/C,GAAW,GACXpX,EAASmb,IAAqCxC,EAAMwB,IAC/CvB,KAAK,KACF5Y,EAASuY,IAAwB,sBAEpCM,MAAMha,IACHmB,EACIuY,IACI,sDAIXO,QAAQ,KACL1B,GAAW,MAGvB,CAACpX,EAAU2Y,IAGf,OACIvX,IAAAC,cAAC8X,IAAW,CACRhC,QAASswB,EACTtpC,OAAQuD,IAAU+lC,EAClBl2B,OAAQA,IACJnQ,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACmY,IAAU,CACPC,QAAQ,aACRC,WAAW,6CAEftY,IAAAC,cAACiD,IAAM,CACH6S,QAASA,EACT3S,MAAM,UACN1C,QAAQ,YACRyC,QAASA,IAAMqjC,GAAc,IAChC,kBAGDxmC,IAAAC,cAACgc,KAAI,KACAqqB,EAAkBzlC,IAAI8lC,GACnB3mC,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAKwlC,EAAQ5tB,OAAQ4gB,SAAO,GAClC35B,IAAAC,cAACiH,KAAY,CACTC,QAAS,GAAGw/B,EAAQ/xB,aAAa+xB,EAAQ9xB,WACzCzN,UAAWu/B,EAAQ5xB,QAEvB/U,IAAAC,cAAC8lB,KAAuB,KACpB/lB,IAAAC,cAACiD,IAAM,CACH6S,QAASA,EACT3S,MAAM,QACND,QAASA,IACLsjC,EACIE,EAAQ5tB,SAGnB,cAQjB/Y,IAAAC,cAAC2mC,GAAkB,CACfvrB,OAAQkrB,EACRrkC,QAASA,IAAMskC,GAAc,GAC7Bb,QAASe,EACTnvB,KAAMjX,EAAMiX,KACZsE,WAAYnS,aAAOpJ,EAAMy1B,MAAOz1B,EAAMub,kB,4FCtI9D,MAAMgrB,GAAe,GAErB,SAASC,GAAOpxB,GACZ,MAAO,CACHzL,QAAS,CACLwX,cAAe,UAAU/L,IAOrCmxB,GAAaE,mBAAqB,CAACrxB,EAAS6B,EAAMxV,EAAI6R,KAClD,MAAM9J,EAAO,CACT/H,KACA6R,UAEJ,OAAOozB,KAAOC,KAAK,UAAiB1vB,YAAgBzN,EAAMg9B,GAAOpxB,KAGrEmxB,GAAaK,gBAAkB,CAC3BxxB,EACA6B,EACA4vB,EACAvzB,EACAwzB,KAEA,MAAMt9B,EAAO,CACTq9B,aACAvzB,SACAwzB,YAGJ,OAAOJ,KAAOC,KAAK,UAAiB1vB,SAAazN,EAAMg9B,GAAOpxB,KAGlEmxB,GAAaQ,mBAAqBzzB,IAC9B,MAAM9J,EAAO,CACT8J,UAEJ,OAAOozB,KAAOC,KAAK,iBAAyBn9B,IAGjC+8B,UClBA,KAAGp8B,UAASgL,UAAU,GAAIvT,cACrC,MAAMtD,EAAWC,cACX6W,EAAUC,YAAYC,KACtBpB,EAAOmB,YAAYE,MACnBvV,EAAQqV,YAAYG,MACnBC,EAASC,GAAclZ,oBAAS,IAChCmZ,EAAkBC,GAAuBpZ,oBAAS,GACnDqZ,EAAc5Z,aAAa,KAC3B,EAAE6Z,GAAMC,cACRC,EAAU/Z,aAAa,GAAIK,GACxBA,GAA0B,IAAjBA,EAAM0I,OAGhB1I,EAAM0I,OAAS,GACR8Q,EAAE,4BADb,EAFWA,EAAE,sBAQXG,EAAWha,aAAa,IACxBia,EAAOja,aAAa,GAAIK,GACrB4Z,GAAwB,IAAhBA,EAAKlR,OAIdkR,EAAKlR,OAAS,IACP8Q,EAAE,yBADb,EAHWA,EAAE,mBASXK,EAAYla,aAAa,IACzBma,EAAUna,aAAa,IACvBoa,EAAUpa,aACZ,GACAW,sBACIN,IACI,GAAI8Z,EAAQ9Z,OAAS8Z,EAAQ9Z,MAAM0I,OAAS,EAAG,CAC3C,IAAK1I,GAA0B,IAAjBA,EAAM0I,OAChB,OAAO8Q,EAAE,4BAEb,GAA8B,IAA1BxZ,EAAMqO,QAAQ,QACd,OAAOmL,EAAE,2BAKrB,CAACM,EAAQ9Z,MAAOwZ,KAIlBQ,EAAS,CACXT,EACAG,EACAC,EACAC,EACAC,EACAC,EACAC,GAGE/C,EAAS,CACX0C,QAASA,EAAQ1Z,MACjB2Z,SAAUA,EAAS3Z,MACnBia,aAAcV,EAAYvZ,MAC1B4Z,KAAMA,EAAK5Z,MACXka,SAAUJ,EAAQ9Z,MAClBma,SAAUJ,EAAQ/Z,OAGhBH,EAAWS,sBAAY,KACzB,MAAM8Z,EAASJ,EACV/V,IAAIoW,GACMA,EAAMxa,YAEhB2N,OAAOrN,GAA0B,qBAAVA,GAE5B,QAAIia,EAAO1R,OAAS,KAChB0R,EAAOE,QAAQna,IACX6B,EAASuY,IAAsBpa,OAE5B,IAGZ,CAAC6B,EAAUgY,IAERQ,EAAkBla,sBAAY,KAChC,GAAKT,IAgBL,OAfAuZ,GAAW,GACX6wB,GAAaE,mBAAmBrxB,EAASpV,EAAMiX,KAAM/C,EAAKO,MAAOnB,GAC5D4D,KAAK,KACF5Y,EACIuY,IACIf,EAAE,mBAAoB,CAAE5B,KAAMA,EAAKO,YAI9C0C,MAAMha,IACHmB,EAASuY,IAAsBf,EAAE,wBAEpCsB,QAAQ,KACL1B,GAAW,KAEZ,MACR,CAACvZ,EAAUiZ,EAASpV,EAAMiX,KAAM/C,EAAKO,MAAOnB,EAAQhV,EAAUwX,IAE3DuB,EAAgBza,sBAAY,KACzBT,MACLuZ,GAAW,GACX6wB,GAAaK,gBACTxxB,EACApV,EAAMiX,KACN9B,EACA7B,EACA6C,EAAU7Z,OAET4a,KAAK1N,IACFlL,EACIuY,IAAwBf,EAAE,IAAK,CAAEyB,iBAAkB,SAG1DJ,MAAMha,IACHmB,EAASuY,IAAsBf,EAAE,wBAEpCsB,QAAQ,KACL1B,GAAW,GACX9T,QAET,CACCzF,EACAiZ,EACApV,EAAMiX,KACN9B,EACA7B,EACA6C,EAAU7Z,MACVgC,EACAsD,EACAkU,IAGJ,OAAKX,EAAQnQ,OAGTtF,IAAAC,cAAC0C,IAAM,CAACmV,YAAU,EAAC7V,KAAMwI,EAASvI,QAASA,GACvClC,IAAAC,cAAC8C,KAAa,KACV/C,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,EAASiC,aAAa,GACxChY,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAAC+B,KAAa,CACVC,KAAMgU,EACN5T,MAAO+T,EAAE,SACT9T,QAAS,iDAAiDmT,EAAQnQ,uBAClEpD,QAASgU,EACT9T,KAAMuV,IAEV3X,IAAAC,cAACmY,IAAU,CACPC,QAAQ,wBACRC,WACI7C,EAAQnQ,OAAS,2BAGzBtF,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQ6X,WAAS,GAAC,sEAItCvY,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GAWrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO0Z,EAAQ1Z,MACfK,SAAUqZ,EAAQzZ,SAClBE,MAAOuZ,EAAQvZ,MACf6b,aAAW,EACXxX,MAAM,QACNwD,WAAW,sCAGnB5E,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO2Z,EAAS3Z,MAChBK,SAAUsZ,EAAS1Z,SACnBE,MAAOwZ,EAASxZ,MAChB6b,aAAW,EACXxX,MAAOgV,EAAE,aACTxR,WAAYwR,EAAE,uBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC4Y,KAAa,CACVjc,MAAO4Z,EAAK5Z,MACZkc,UAAQ,EACR7b,SAAUuZ,EAAK3Z,SACf+b,aAAW,EACXxX,MAAOgV,EAAE,oBAGjBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO6Z,EAAU7Z,MACjBK,SAAUwZ,EAAU5Z,SACpBE,MAAO0Z,EAAU1Z,MACjB6b,aAAW,EACXxX,MAAOgV,EAAE,qBACTxR,WAAYwR,EAAE,oBAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO8Z,EAAQ9Z,MACfK,SAAUyZ,EAAQ7Z,SAClBE,MAAO2Z,EAAQ3Z,MACf6b,aAAW,EACXxX,MAAOgV,EAAE,mBACTxR,WAAYwR,EAAE,6BAGtBpW,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC0Y,IAAS,CACN/b,MAAO+Z,EAAQ/Z,MACfK,SAAU0Z,EAAQ9Z,SAClBE,MAAO4Z,EAAQ5Z,MACf6b,aAAW,EACXxX,MAAOgV,EAAE,+BAOjCpW,IAAAC,cAACgD,KAAa,KACVjD,IAAAC,cAACiD,IAAM,CAACC,QAASjB,GAAS,UAC1BlC,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CAACC,QAASiU,GAAkBhB,EAAE,mBACrCpW,IAAAC,cAACsB,IAAG,CAACE,EAAG,IACRzB,IAAAC,cAACiD,IAAM,CACH6S,QAASA,EACTrV,QAAQ,YACR0C,MAAM,UACND,QAAS+S,GAERE,EAAE,sBAAuB,CAAE+B,OAAQ1C,EAAQnQ,YA5GhC,M,sBClJjB,KACXgiC,gBACAvxB,UACAwxB,YAAY,GACZhsB,SAAS,KACTlZ,QAAQ,eACRmlC,WAAU,MAEV,MAAMC,EAAoBtoC,kBAAQ,IACvBooC,EAAUn9B,OAAOs9B,KACfA,MACAA,EAASjc,SACPic,EAASjc,QAAQ1W,QAE7B,CAACwyB,IACE3oC,EAAWC,cACXH,EAAWglC,cACXiE,EAAe,IAAIC,gBAAgBlpC,EAASmpC,QAC5CC,EAAuBnyB,YAAYG,KAGnCgX,GAFOnX,YAAYC,KACXD,YAAYG,KACTH,YAAYG,MACvBiyB,EAAQ,IAAIH,gBAAgBlpC,EAASmpC,QACrCG,EAAWD,EAAME,IAAI,SACrBC,EAAcH,EAAMI,IAAI,UACvBh/B,EAAU2S,GAAehf,mBAAS,IAEnCsrC,EAAiBlrC,sBACnB8N,IACI,MAAM68B,EAAS,IAAI,IAAID,gBAAgB,CACnCS,MAAO,OACPhnC,GAAI2J,EAAIs9B,SAAS9zB,OAClBkmB,WACH97B,EAASK,YAAK,CAAE4oC,aAEpB,CAACjpC,IAGC2pC,EAAgBrrC,sBAClBsrC,IACI1sB,EAAY0sB,GACZ,MAAMX,EAAS,IAAI,IAAID,gBAAgB,CACnCS,MAAO,cAEXzpC,EAASK,YAAK,CAAE4oC,aAEpB,CAACjpC,IAEC6pC,EAAmBvrC,sBACrBsrC,IACI1sB,EAAY0sB,GACZ,MAAMX,EAAS,IAAI,IAAID,gBAAgB,CACnCS,MAAO,iBAEXzpC,EAASK,YAAK,CAAE4oC,aAEpB,CAACjpC,IAEC8pC,EAAexrC,sBACjBsrC,IACI1sB,EAAY0sB,GACZ,MAAMX,EAAS,IAAI,IAAID,gBAAgB,CACnCS,MAAO,aAEXzpC,EAASK,YAAK,CAAE4oC,aAEpB,CAACjpC,IAwCL,MAIM+pC,EAAczrC,sBAAY,KAC5B0B,EAASK,YAAK,CAAE4oC,OAAQ,OACzB,CAACjpC,IAEJa,oBAAU,KAEN,OAAQyoC,GACJ,IAAK,YACL,IAAK,eACL,IAAK,WACuB,IAApB/+B,EAAS7D,QACTqjC,IAEJ,MACJ,IAAK,OACIZ,EAAME,IAAI,OACXU,MAMb,CAACT,EAAaS,EAAaX,EAAUD,EAAO5+B,EAAS7D,SAExD,MAAMoH,EAAUvN,kBAAQ,IACb,CACH,CACIgL,OAAQ,IACRy+B,SAAUA,CAAC59B,EAAKjK,IACLA,EAAQ,KAEhBkM,KAAQuF,QACXnR,GAAI,SAER,CACI8I,OAAQ,aACRy+B,SAAU,uBACP37B,KAAQ4F,cACR9F,KAAQuF,gBAEf,CACInI,OAAQ,YACRy+B,SAAU,sBACP37B,KAAQ4F,cACR9F,KAAQuF,gBAEf,CACInI,OAAQ,QACRy+B,SAAU,mBACP37B,KAAQ4F,cACR9F,KAAQuF,gBAEf,CACInI,OAAQ,YACRy+B,SAAU,uBACP37B,KAAQ4F,cACR9F,KAAQuF,eACX/D,KAAMA,EAAGkC,MAAQ7T,YAAcA,EAAM+d,KAAK,OAE9C,CACIxQ,OAAQ,SACRy+B,SAAU,YACP77B,KAAQqF,kBACRnF,KAAQ4F,WACXtE,KAAMA,EAAGkC,MAAQ7T,YAAcoD,IAAAC,cAACwT,KAAW,CAACC,OAAQ9W,KAExD,CACIuN,OAAQ,SACRy+B,SAAU,YACP77B,KAAQqF,kBACRnF,KAAQuF,QACXjE,KAAMA,EAAGkC,MAAQ7T,YACbA,EACIoD,IAAAC,cAACoa,KAAM,CAAC3S,KAAK,QAAQ9K,MAAOA,EAAOisC,UAAQ,IAE3C,aAGZ,CACI1+B,OAAQ,OACRy+B,SAAU,UACP37B,KAAQiG,YACX3E,KAAMA,EAAGkC,MAAQ7T,YACRA,EAKGoD,IAAAC,cAAAD,IAAA4K,SAAA,KAEKhO,EAAMiE,IAAI,CAACyT,EAAKvT,IAETf,IAAAC,cAACsB,IAAG,CAACJ,IAAKJ,EAAOmgB,GAAG,MAAM1f,GAAG,OACzBxB,IAAAC,cAACyiC,KAAG,CAACt/B,MAAM,QAAQhC,MAAOkT,OARvC,WAiBnB,CACInK,OAAQ,aACRy+B,SAAU,eACP37B,KAAQ+F,SACXzE,KAAMA,EAAGkC,MAAQ7T,YACbiuB,KAAOjuB,GAAOkuB,OAAO,0BAoBlC,CAACgd,IACJ,OACI9nC,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAAC6oC,KAAqB,CAClBlc,eACoB,SAAhBsb,EAAyBP,EAAaQ,IAAI,WAAQ5qC,EAEtD2E,QAASymC,IAEb3oC,IAAAC,cAAC8oC,KAAyB,CACtBt+B,QAAyB,aAAhBy9B,EACThmC,QAASymC,EACTlzB,QAAStM,EAAStI,IAAIo+B,GAAKA,EAAEqJ,SAAS9zB,QAE1CxU,IAAAC,cAAC+oC,KAAc,CACXv+B,QAAyB,cAAhBy9B,EACThmC,QAASymC,EACTlzB,QAAStM,EAAStI,IAAIo+B,GAAKA,EAAEqJ,SAAS9zB,QAE1CxU,IAAAC,cAACgpC,GAAsB,CACnBx+B,QAAyB,iBAAhBy9B,EACThmC,QAASymC,EACTlzB,QAAStM,EAAStI,IAAIo+B,GAAKA,EAAEqJ,SAAS9zB,QAE1CxU,IAAAC,cAAC+O,KAAK,CACFlF,KAAM29B,EACN/6B,QAASA,EACTnB,WAAY68B,EACZz7B,YAAa,CACT,CACIxL,IAAK,aACLC,MAAO,YACPiJ,OAAQk+B,GAEZ,CACIpnC,IAAK,eACLC,MAAO,uBACPiJ,OAAQo+B,GAEZ,CACItnC,IAAK,YACLC,MAAO,WACPiJ,OAAQq+B,GAEZ,CACIvnC,IAAK,uBACLC,MACIpB,IAAAC,cAAC0J,WAAO,CACJC,MAAO,CACHC,eAAgB,OAChBzG,MAAO,WAEX0G,KAAMX,EAAStI,IAAIrB,GAvN/C,SAAuB0pC,GAAK,IAAD7b,EACnB8b,EAAW,GACf,MAAMC,EAASF,EAAGzd,QACZ4d,EAASH,EAAGnd,cACZuB,EAAOR,EAASoc,EAAG10B,MACnB80B,EAAW,UAAmB,QAAnBjc,EAAa,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAME,YAAI,IAAAH,IAAI,WAWxC,IAAK,IAAIhd,KATT84B,EAAW,CACPI,OAAQL,EAAGx1B,OACX81B,KAAMF,EACNG,UAAWL,EAAOK,UAAU9uB,KAAK,MACjC+uB,KAAMR,EAAGS,QACTC,SAAUV,EAAGxqC,YACV2qC,GAGOD,EACLA,EAAOS,eAAex5B,KAEF,kBAAd+4B,EAAO/4B,KAOd84B,EAAS94B,GAAK+4B,EAAO/4B,KAG7B,OAAO84B,EA2LqBW,CAActqC,EAAK8oC,WAEvBt+B,SAAS,cACZ,wBAILK,OA/LQm+B,IACxB1sB,EAAY0sB,U,WCrHL,QACX,MAAMuB,EAAgBp0B,YAAYG,KAC5Bk0B,EAAuBr0B,YACzBG,MAGGsP,EAAS4C,GAAclrB,mBAAS,IACjCmtC,EAAWC,gBAAcC,aAAaJ,EAAe3kB,GA4B3D,OAzBA3lB,oBAAU,MACNguB,iBACI,IAAK,IAAIpd,EAAI,EAAGA,EAAI45B,EAAS3kC,OAAQ+K,IAAK,CACtC,MAAM0b,QAAsBke,EAAS55B,GAAGob,QAAQO,cAE1C2a,QAAgBX,KAAoBoE,sBACtCH,EAAS55B,GAAGmE,MAEhBy1B,EAAS55B,GAAGs5B,QAAUhD,EAAQ,GAAGgD,QAAU,UAAY,GACvDM,EAAS55B,GAAG3R,SAAWioC,EAAQ,GAAGjoC,SAC5BioC,EAAQ,GAAGjoC,SACX,GAENurC,EAAS55B,GAAG0b,cAAgB,IAErBA,EAAcse,OAAO,CAACC,EAAKC,KAC1BD,EAAIC,EAAIppC,KAAOopC,EAAI3tC,MACZ0tC,GACR,MAIfE,IACD,IAGCxqC,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACwqC,KAAe,CAACxtC,SAAU+qB,IAC3BhoB,IAAAC,cAAC+mB,KAAO,CAACtf,KAAM,IACf1H,IAAAC,cAACyqC,GAAa,CACVnD,UAAW0C,EACXl0B,QAASi0B,M,iCCtCV,KAAGj0B,UAAS40B,QAAQ,GAAIC,kBAAiB,MACpD,MAAMC,EAAmBl1B,YAAYG,MAC9Bg1B,EAAcC,GAAmBjuC,mBAAS,QAC1CkuC,EAAiBC,GAAsBnuC,mBAAS,QAChDouC,EAAaC,GAAkBruC,mBAAS,CAAC,EAAG,KAC5CsuC,EAAUC,GAAevuC,oBAAS,IAClCwuC,EAAWC,GAAgBzuC,oBAAS,IACpCqM,EAAU2S,GAAehf,mBAAS,IAInC0uC,EAA0BtuC,sBAAY,CAACC,EAAGP,KAC5CuuC,EAAevuC,IAChB,IA8BG6uC,EA7BiBtsC,kBAAQ,IACpBwrC,EAAM9pC,IAAIysB,IACbzB,QAAQC,IAAIwB,GACZ,MAAMoe,EAAgBpe,EAAKqe,QACtB9qC,IAAI+qC,GACMf,EAAiBe,IAE3BxhC,OAAOwhC,GAA4B,qBAAXA,GACvBC,EAAchB,EAAiBvd,EAAKyI,QAAU,GAC9C+V,EAAaJ,EAAchiC,OAAOmiC,GAClCE,EAAgBD,EAAW1hC,OAC7BwhC,GAAUA,GAAUA,EAAOvyB,QAC7B/T,OACI0mC,EAAcF,EAAWxmC,OAC/B,MAAO,IACAgoB,EACHyI,MAAO8V,EACPF,QAASG,EACTG,WACIC,aAAMJ,EAAYK,GAAKA,EAAE9yB,QAAU,GAAKyyB,EAAWxmC,QACrD8mC,QAAQ,GACVC,gBAAiBC,KAAKC,MACD,IAAhBR,EAAuBC,MAIrC,CAACrB,EAAOE,IAG0BzgC,OAAOkjB,KAChB,cAApB0d,IAAoC1d,EAAKkf,aAGrB,kBAApBxB,IAAuC1d,EAAKkf,aAG3B,mBAAjB1B,GAA8D,MAAzBxd,EAAK+e,oBAIzB,iBAAjBvB,GAA4D,MAAzBxd,EAAK+e,qBAIxCnB,EAAY,GAAK5d,EAAK2e,cAItBf,EAAY,GAAK5d,EAAK2e,gBAMxBQ,EAAoBttC,kBAAQ,IACvBssC,EAAcpB,OAAO,CAACqC,EAAKpf,IACvBof,EAAIhjC,OAAO4jB,EAAKqe,QAAQ9qC,IAAI8rC,GAAOA,EAAIn4B,OAC/C,IACJ,CAACi3B,IAEE/+B,EAAUvN,kBAAQ,IACb,CACH,CACIgL,OAAQ,IACRy+B,SAAUA,CAAC59B,EAAKjK,KACZ8qB,QAAQC,IAAI9gB,EAAKjK,GACVA,EAAQ,GAEnBM,GAAI,QACJoR,SAAUxF,KAAQuF,SAErB,CACGrI,OAAQ,YACRy+B,SAAU,OACVvnC,GAAI,UACD4L,KAAQ4F,YAGf,CACI1I,OAAQ,QACRy+B,SAAU59B,IACN,MAAM,MAAE+qB,GAAU/qB,EAClB,OAAK+qB,GAAUA,EAAMtK,QACd,GAAGsK,EAAMtK,QAAQ7W,aAAamhB,EAAMtK,QAAQ5W,WADd,OAGzCxT,GAAI,WACD4L,KAAQ4F,YAEf,CACI1I,OAAQ,OACRy+B,SAAU,UACP37B,KAAQ4F,YAEf,CACI1I,OAAQ,UACRy+B,SAAU59B,GAAOA,EAAI2gC,QAAQrmC,OAC7BjE,GAAI,aACD4L,KAAQuF,SAEf,CACIrI,OAAQ,cACRy+B,SAAU,eACP37B,KAAQuF,SAEf,CACIrI,OAAQ,aACRy+B,SAAU,qBACP37B,KAAQuF,QACXjE,KAAMA,EAAGkC,MAAQ7T,YAEToD,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,SACR0C,MAAiB,MAAVxG,EAAgB,UAAY,aAElCA,EAAM,OAM5B,IAOH,OACIoD,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAAC8oC,KAAyB,CACtBt+B,QAAS2gC,EACTlpC,QAASmpC,EACTuB,gBAAiBH,IAErBzsC,IAAAC,cAAC+oC,KAAc,CACXv+B,QAAS6gC,EACTppC,QAASqpC,EACTqB,gBAAiBH,KAEnB7B,GACE5qC,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAACkoB,KAAK,CAAC1mB,EAAG,GACNzB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACmU,KAAM,CACHxX,MAAOouC,EACP/tC,SAAUguC,EACV7pC,MAAM,mBACN2D,QAAS,CACL,CACInI,MAAO,MACPwE,MAAO,OAEX,CACIxE,MAAO,YACPwE,MAAO,aAEX,CACIxE,MAAO,gBACPwE,MAAO,uBAO/BpB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GAAI0W,GAAI,GACnBpvB,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACmU,KAAM,CACHxX,MAAOkuC,EACP7tC,SAAU8tC,EACV3pC,MAAM,gBACN2D,QAAS,CACL,CACInI,MAAO,MACPwE,MAAO,OAEX,CACIxE,MAAO,iBACPwE,MAAO,kBAEX,CACIxE,MAAO,eACPwE,MAAO,4BAO/BpB,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACsB,IAAG,CACAwQ,QAAS,EACT/N,QAAQ,OACRC,cAAc,UAEdjE,IAAAC,cAACmE,IAAU,CACP1D,QAAQ,YACR6X,WAAS,EACTs0B,MAAM,UACT,kBAGD7sC,IAAAC,cAACsB,IAAG,CAACye,YAAa,EAAG8sB,aAAc,GAC/B9sC,IAAAC,cAAC8sC,KAAM,CACH/7B,aAAck6B,EACd8B,kBACIxB,EAEJyB,kBAAkB,KAClBrqC,kBAAgB,eAChBmvB,IAAK,EACLC,IAAK,EACLkb,KAAM,UASlCltC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,IACX1Y,IAAAC,cAAC+O,KAAK,CACFlF,KAAM2hC,EACN/+B,QAASA,EACTlB,eAAgBR,GACZhL,IAAAC,cAACyqC,GAAa,CAACnD,UAAWv8B,EAAIs9B,SAASqD,UAE3Ch/B,YAAa,CACT,CACIxL,IAAK,eACLC,MACIpB,IAAAC,cAAC0J,WAAO,CACJC,MAAO,CACHC,eAAgB,OAChBzG,MAAO,WAEX0G,KAAMX,EAAStI,IAAI,CAACssC,EAAWpsC,KAC3B,MAAMk+B,EAAIkO,EAAU7E,SACpB,OAAKrJ,GACAA,EAAElJ,OAAUkJ,EAAElJ,MAAMtK,QAElB,CACH,IAAK1qB,EAAQ,EACbysB,KAAMyR,EAAEzR,KACRuI,MAAO,GAAGkJ,EAAElJ,MAAMtK,QAAQ7W,aAAaqqB,EAAElJ,MAAMtK,QAAQ5W,WACvD,gBAAiBoqB,EAAE0M,QACb1M,EAAE0M,QAAQrmC,OACV,EACNqmC,QAAS1M,EAAE0M,QACL1M,EAAE0M,QAAQ9qC,IAAI+qC,GACHA,EAAOngB,QACR,GAAGmgB,EAAOngB,QAAQ7W,aAAag3B,EAAOngB,QAAQ5W,YAAY+2B,EAAOngB,QAAQ1W,SACzE,IAEV,GACN,cAAekqB,EAAEgN,UACjB,aAAchN,EAAEoN,iBAlBL,KAsBnBriC,SAAS,aACZ,gBAILK,OAnJJm+B,IAChB3c,QAAQC,IAAI,WAAY0c,GACxB1sB,EAAY0sB,WC/IL,QACX,MAAMmC,EAAQh1B,YAAYG,KACpBk0B,EAAuBr0B,YACzBG,KAEEs3B,EAAez3B,YAAYG,KAEjC,OACI9V,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACotC,GAAU,CACPt3B,QAASi0B,GAAwBoD,EACjCzC,MAAOA,M,2CCRvB,MAAMhtC,GAAYC,YAAWC,IAAK,CAC9BjB,MAAO,CACH2B,UAAW,QAEf+uC,OAAQ,CACJ9vB,WAAY3f,EAAMmU,QAAQ,GAC1BhO,QAAS,mBA8CFupC,OA1CGA,EAAGnsC,QAAOxE,QAAO0wC,SAAQjjC,SAAQmjC,iBAC/C,MAAOC,EAAeC,GAAoB5wC,qBAEpC6wC,EAAezwC,sBAAYuwB,UAC7BigB,GAAiB,SACXrjC,IACNqjC,GAAiB,IAClB,CAACrjC,IACEvL,EAAUnB,KAChB,OACIqC,IAAAC,cAAC2tC,KAAI,KACD5tC,IAAAC,cAAC4tC,KAAW,CAAC3tC,UAAWpB,EAAQhB,MAC5BkC,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,QAAQ0C,MAAM,gBAAgB+qB,cAAY,GACzD/sB,GAELpB,IAAAC,cAACsB,IAAG,CAACyC,QAAQ,OAAOC,cAAc,MAAMzF,WAAW,YAC/CwB,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKR,UAAWpB,EAAQlC,OACvCA,GAEJ0wC,GACGttC,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAKR,UAAWpB,EAAQwuC,QACvCA,IAIZjjC,GAAUmjC,GACPxtC,IAAAC,cAACsB,IAAG,CAACC,GAAI,GACJisC,GAAiBztC,IAAAC,cAACyhB,KAAgB,CAACha,KAAM,KAC1C1H,IAAAC,cAACiD,IAAM,CACHyB,SAAU8oC,EACVrqC,MAAM,YACND,QAASwqC,GAERH,O,SCxC7B,MAAMpnC,GAAWyN,uBAAqBC,SAEvB,YACX,MAAMlV,EAAWC,cAEXkrC,EAAgBp0B,YAAYG,KAC5BC,EAAUJ,YAAYG,KACtBxV,EAAQqV,YAAYG,KACpBJ,EAAUC,YAAYC,KAEtBk4B,EAAkB3uC,kBAAQ,IACrBwS,aAAQo4B,EAAe,UAC/B,CAACA,IAEEgE,EAAWA,CAACC,EAAW,KAClBA,EAAS3D,OAAO,CAACqC,EAAKh5B,IACrBo6B,EAAgBjE,eAAen2B,GACxBg5B,EAAMoB,EAAgBp6B,GAAQpO,OAElConC,EACR,GAyDDuB,EAAQlE,EAAczkC,OACtB4oC,EAAQ9jC,aAAO2/B,EAAe4C,GAAOA,EAAItzB,QAAQ/T,OAEvD,OACItF,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,GAClB/V,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,KAAK6X,WAAS,GAAC,SAGnCvY,IAAAC,cAACuY,IAAI,CAACC,WAAS,EAACzG,QAAS,GACrBhS,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MAAM,sBACNxE,MAAOqxC,MAInBjuC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MAAM,QACNxE,MAAO,GAAGsxC,OAAWD,QAIjCjuC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAAS+nC,UAAU9sC,KAE5CzE,MAAOmxC,EAAS,CAAC,kBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CACRC,OAAQtN,GAASgoC,eAAe/sC,KAGxCzE,MAAOmxC,EAAS,CAAC,uBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAASioC,SAAShtC,KAE3CzE,MAAOmxC,EAAS,CAAC,iBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CACRC,OAAQtN,GAASkoC,cAAcjtC,KAGvCzE,MAAOmxC,EAAS,CAAC,sBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAASmoC,UAAUltC,KAE5CzE,MAAOmxC,EAAS,CAAC,kBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAASooC,SAASntC,KAE3CzE,MAAOmxC,EAAS,CAAC,iBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAASqoC,UAAUptC,KAE5CzE,MAAOmxC,EAAS,CAAC,kBAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MAAOpB,IAAAC,cAACwT,KAAW,CAACC,OAAQtN,GAASsoC,OAAOrtC,KAC5CzE,MAAOmxC,EAAS,CAAC,eAI7B/tC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CACRC,OAAQtN,GAAS2N,aAAa1S,KAGtCzE,MAAOmxC,EAAS,CAAC,iBACjB1jC,OA1KCskC,IACd3hB,KAAqB4hB,gCACxBl5B,EACApV,EAAMiX,MAELC,KAAK1N,IACFlL,EACIuY,IACI,mEAIXM,MAAMha,IACHmB,EACIuY,IACI,8EAIXO,QAAQ,KACL9Y,EACImb,IAA6CzZ,EAAMiX,SAsJ3Ci2B,WAAW,iBAIvBxtC,IAAAC,cAACuY,IAAI,CAAChZ,MAAI,EAACkZ,GAAI,GACX1Y,IAAAC,cAACkoB,KAAK,KACFnoB,IAAAC,cAACstC,GAAS,CACNnsC,MACIpB,IAAAC,cAACwT,KAAW,CACRC,OAAQtN,GAAS4N,aAAa3S,KAGtCzE,MAAOmxC,EAAS,CAAC,iBACjB1jC,OA7JCwkC,IACd7hB,KAAqB8hB,gCACxBp5B,EACApV,EAAMiX,MAELC,KAAK1N,IACFlL,EACIuY,IACI,mEAIXM,MAAMha,IACHmB,EACIuY,IACI,6EAIXO,QAAQ,KACL9Y,EACImb,IAA6CzZ,EAAMiX,SAyI3Ci2B,WAAW,oBClNxB,QACX,MAAMhK,EAAQC,cACR/kC,EAAWglC,cACjB,OACI1jC,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACmY,IAAU,CACPC,QAAQ,eACRC,WAAW,wBAEftY,IAAAC,cAAC+kC,KAAkB,CACfjnC,aAAW,EACXY,UAAW6kC,EAAM/mB,IACjB/d,SAAUA,EACVD,KAAM,CACF,CACI2C,MAAO,eACPpC,KAAM,GACNmC,IAAK,eACLQ,UAAWsjC,IAEf,CACIjmC,KAAM,SACNmC,IAAK,QACLC,MAAO,QACPO,UAAWotC,IAcf,CACI/vC,KAAM,SACNmC,IAAK,QACLC,MAAO,gBACPO,UAAWqtC,S,UClBpB,KACXzyB,UACAra,UAAUA,SACV2qB,WAAWA,SACXoiB,oBACAC,gBACAC,uBAEiBtwC,cAAjB,MACM6W,EAAUC,YAAYC,KACtBtV,EAAQqV,YAAYG,KACpB60B,EAAQh1B,YAAYG,MACnBs5B,EAAiBC,GAAsBvyC,oBAAS,IAChDwyC,EAAeC,GAAoBzyC,mBAAS,CAC/C,CACIyf,QAAS,GACTjc,MAAO,GACPoT,OAAQ,YACR0d,MAAO,EACPoe,SAAU,GACVltC,QAAS,GACT2vB,MAAO,OACPE,UAAW,UAGnB1yB,oBAAU,KACF8c,GAAWjc,IACXmvC,KAAqBC,gCACjBh6B,EACApV,EAAMiX,KACNgF,EAAQ+S,KACV9X,KAAK4Z,IACCA,GAAOme,EAAiBne,KAEhCie,EAAmB/uC,EAAMi2B,UAAU5F,SAASpU,EAAQ+S,QAEzD,CAAChvB,EAAOoV,EAAS6G,IACpB,MAAM+Q,EAAOnuB,kBAAQ,IACbwrC,GAASpuB,EACF,CAACouB,EAAMre,KAAKgB,GAAQA,EAAKgC,MAAQ/S,EAAQ+Q,OAE7C,GACR,CAAC/Q,EAASouB,IAOb,OACI3qC,IAAAC,cAAC0C,IAAM,CAACV,KAAMitC,EAAehtC,QAASA,EAAS6Y,SAAS,KAAKjU,WAAS,GAClE9G,IAAAC,cAAC8X,IAAW,CAAChC,SAAUwG,GAClBA,GACGvc,IAAAC,cAACsB,IAAG,CAACE,EAAG,GACJzB,IAAAC,cAACgY,IAAS,CAACC,QAAM,GACblY,IAAAC,cAACmY,IAAU,CACPC,QAASkE,EAAQG,KACjBpE,WAAYiE,EAAQozB,WAExB3vC,IAAAC,cAAC+Z,KAAc,KACXha,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACmE,IAAU,KAAC,oBAEhBpE,IAAAC,cAACma,KAAqB,KAClBpa,IAAAC,cAACgc,KAAI,KACDjc,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,OACRC,UAAWmV,EAAQG,QAG3B1c,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,YACRC,UAAWmV,EAAQI,aAG3B3c,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,cACRC,UAAWmV,EAAQK,eAG3B5c,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,QACRC,UAAWmV,EAAQozB,YAW3B3vC,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,0BACRC,UAAWmV,EAAQqzB,QAG3B5vC,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACiH,KAAY,CACTC,QAAQ,cACRC,UAAWmV,EAAQqiB,aAMvC5+B,IAAAC,cAAC+Z,KAAc,KACXha,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACmE,IAAU,KAAC,iBAEhBpE,IAAAC,cAACma,KAAqB,KAClBpa,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,SACd2F,MAAO,CAAE3L,MAAO,SAEhB+B,IAAAC,cAACmE,IAAU,CAAC+pB,cAAY,GAAC,sCAGzBnuB,IAAAC,cAACotC,GAAU,CACP1C,MAAOrd,EACPvX,SAAUuX,EACVsd,gBAAgB,OAK/BiF,eAAaC,YAAYxvC,EAAOuqB,OAC7B7qB,IAAAC,cAAC+Z,KAAc,KACXha,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACmE,IAAU,KAAC,iBAEhBpE,IAAAC,cAACma,KAAqB,KACjBmC,EAAQwzB,cAIrB/vC,IAAAC,cAAC+Z,KAAc,KACXha,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACmE,IAAU,KAAC,mBAEhBpE,IAAAC,cAACma,KAAqB,KACjBmC,EAAQ6U,QA6IjBpxB,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,UACIkD,QAASgsC,EACTjvC,UAAU,gDACb,iBAGDF,IAAAC,cAAA,UACIkD,QAAS8rC,EACT/uC,UAAU,oDACb,sB,2FCvVjC,MAAMjD,GAAWA,CAAC4R,EAAYuW,EAAS4qB,EAAQC,OAqOhCC,OAnOSA,EACpBxjC,UACA5C,OACAqmC,eACAC,qBACAC,qBACA9kC,iBAEA,MAAO+kC,EAAYC,GAAiBvwC,IAAMlD,SAAS,KAC5C0zC,EAAgBC,GAAqBzwC,IAAMlD,SAAS,IACrD4zC,EAAc1wC,IAAM2wC,OAAO,OAC1BC,EAAUC,GAAe7wC,IAAMlD,UAAS,GAEzCipC,EAAeA,CAAC+K,EAAcC,EAASC,KACzCD,IACAR,EAAcO,EAAa,IAC3BL,EAAkBO,IAwItB,IAAIC,EAAkBvkC,EAAQ7L,IAAIrB,IAC9B,OAAIA,EAAKqoC,OACE,IAAKroC,MAhISwxC,EAgIqBxxC,EAAKwxC,UAhIjB,CAClCE,eAAgBA,EACZC,kBACAL,eACAC,UACAK,eACAC,WAEArxC,IAAAC,cAAA,OACIoB,GAAG,QACHuI,MAAO,CACHmI,QAAS,EACT6I,OAAQ,KAEZ02B,UAAWn0C,GAAKA,EAAEqR,mBAElBxO,IAAAC,cAACsxC,KAAK,CACFC,IAAKd,EACL1rC,YAAa,UAAUgsC,EACvBp0C,MAAOk0C,EAAa,GACpB7zC,SAAUE,IACNg0C,EAAgBh0C,EAAEC,OAAOR,MAAQ,CAACO,EAAEC,OAAOR,OAAS,KAExD60C,aAAcA,IACV1L,EAAa+K,EAAcC,EAASC,GAExCpnC,MAAO,CACH4zB,aAAc,EACdx5B,QAAS,WAGjBhE,IAAAC,cAACyxC,KAAK,KACF1xC,IAAAC,cAAC0xC,KAAS,CACN1sC,KAAK,UACL9B,QAASA,IACL4iC,EAAa+K,EAAcC,EAASC,GAExCjhC,KAAM/P,IAAAC,cAAC2xC,KAAc,MACrBlqC,KAAK,QACLkC,MAAO,CACH3L,MAAO,KAEd,UAGD+B,IAAAC,cAAC0xC,KACG,CACA1sC,KAAK,OACLyC,KAAK,QACLvE,QAASA,KACLguC,EAAgB,IAChBJ,EAAQ,CACJc,eAAe,IAInBtB,EAAcO,EAAa,IAC3BL,EAAkBO,GAElBK,MAEP,SAGDrxC,IAAAC,cAAC0xC,KAAS,CACN1sC,KAAK,OACLyC,KAAK,QACLvE,QAASA,KACL4tC,EAAQ,CACJc,eAAe,IAEnBtB,EAAcO,EAAa,IAC3BL,EAAkBO,GAClBK,MAEP,UAGDrxC,IAAAC,cAAC0xC,KAAS,CACN1sC,KAAK,OACLyC,KAAK,QACLvE,QAASA,KACLkuC,MAEP,WAMbS,WAAY7H,GACRjqC,IAAAC,cAAC2xC,KAAc,CACXhoC,MACI,KAMZmoC,SAAUA,CAACn1C,EAAOo1C,IACdA,EAAOhB,GACFtW,WACAzL,cACA0B,SAAS/zB,EAAMqyB,eACxBgjB,2BAA4BxnC,IACpBA,GACAynC,WAAW,SAAAC,EAAA,OAAyB,QAAzBA,EAAMzB,EAAY0B,eAAO,IAAAD,OAAA,EAAnBA,EAAqBprC,UAAU,MAGxDoJ,OAAQxM,GACJ6sC,IAAmBQ,EACfhxC,IAAAC,cAACoyC,KAAW,CACRC,eAAgB,CACZp0C,gBAAiB,UACjB6T,QAAS,GAEbwgC,YAAa,CAACjC,GACdkC,YAAU,EACVC,gBAAiB9uC,EAAOA,EAAK+2B,WAAa,KAG9C/2B,KASDnE,EAlIkBwxC,QAsL7B,OACIhxC,IAAAC,cAAA,OAAKC,UAAU,IACXF,IAAAC,cAAC+O,KAAK,CACFH,WAAY,CAAE6jC,gBAAiB,GAC/BhmC,QAASukC,EACT0B,WAAY7oC,EACZ7M,SAAUA,GACV21C,MAAOA,CAACZ,EAAQa,KACL,CACH1vC,QAAS7C,IACLiL,EAAWymC,UCuPxBc,OA5cOA,EAAGC,WAAUC,UAASt0C,WAAUuzB,YAClD,MAAMrzB,EAAWC,cACXud,EAAmBzG,YAAYqa,KAC/B2a,EAAQh1B,YAAYG,KAGpBxV,EAAQqV,YAAYG,MAEnBm9B,EAAmBC,GAAwBp2C,oBAAS,IACpDq2C,EAAkBC,GAAuBt2C,oBAAS,IAClDu2C,EAAyBC,GAC5Bx2C,oBAAS,IACNy2C,EAAiBC,GAAsB12C,mBAAS,OAChD22C,EAAYC,GAAiB52C,mBAAS,OACtCoyC,EAAeyE,GAAoB72C,oBAAS,IAC5CgN,EAAM4yB,GAAW5/B,mBAAS,OAC1B82C,EAAQC,GAAa/2C,oBAAS,IAC9Bg3C,EAAcC,GAAmBj3C,oBAAS,GAEjD2C,oBAAU,KACFa,GACIA,EAAMiX,MACN3Y,EAASgyB,IAAqCtwB,EAAMiX,QAI7D,CAACq8B,EAAQh1C,EAAU0B,EAAMiX,KAAMjX,IAOlCb,oBAAU,KACN,GAAI2c,EAEA,GAAI1d,GAAYuzB,EAAO,CACnB,MAwBM+hB,EAxBc53B,EAAiBvb,IAAI,CAAC0b,EAASxb,KAC/Cwb,EAAQpb,IAAMJ,EAAQ,EACtBwb,EAAQ6U,MAAQ6iB,WAAW13B,EAAQ6U,OAAOgb,QAAQ,GAClD,IAAK,MAAM/7B,KAAKs6B,EAAO,CACnB,MAAMrd,EAAOqd,EAAMt6B,GACnB,GAAIkM,EAAQ+Q,OAASA,EAAKgC,IAAK,CAC3B/S,EAAQ23B,SAAW5mB,EAAKE,KACxB,OAGR,OAAOjR,IAI2B4lB,KAAK,CAACzvB,EAAGC,IACpCA,EAAE0G,OAAS3G,EAAE2G,QAGejP,OACnCmS,GACIA,EAAQozB,WAAa1d,GACrB1V,EAAQ43B,cAAgBz1C,GAGC0L,OAC7BmS,GAAWA,EAAQ23B,UAMvBxX,EAAQsX,OACL,CACH,MAqBMA,EArBc53B,EAAiBvb,IAAI,CAAC0b,EAASxb,KAC/Cwb,EAAQpb,IAAMJ,EAAQ,EACtBwb,EAAQ6U,MAAQ6iB,WAAW13B,EAAQ6U,OAAOgb,QAAQ,GAClD7vB,EAAQwzB,YAAckE,WAClB13B,EAAQwzB,aACV3D,QAAQ,GACV,IAAK,MAAM/7B,KAAKs6B,EAAO,CACnB,MAAMrd,EAAOqd,EAAMt6B,GACnB,GAAIkM,EAAQ+Q,OAASA,EAAKgC,IAAK,CAC3B/S,EAAQ23B,SAAW5mB,EAAKE,KACxB,OAGR,OAAOjR,IAI2B4lB,KAAK,CAACzvB,EAAGC,IACpCA,EAAE0G,OAAS3G,EAAE2G,QAGcjP,OAClCmS,GAAWA,EAAQ23B,UAEvBxX,EAAQsX,KAGjB,CAACjB,EAAU32B,EAAkB1d,EAAUuzB,EAAO0Y,IAGjD,MAAMvC,EAAiBlrC,sBAAY8N,IAC1BA,EAAIs9B,WACLt9B,EAAIs9B,SAAWt9B,GAGnBwoC,EAAmBxoC,EAAIs9B,UACvBqL,GAAiB,IAMlB,IAEGjnC,EAAUvN,kBAAQ,KACpB,MAAMuN,EAAU,CACZ,CACIvC,OAAQ,IACR9H,MAAO,IACP2uC,UAAW,MAEXpI,SAAUA,CAAC59B,EAAKjK,IACLA,EAAQ,EAEnBM,GAAI,QACJoR,SAAUxF,KAAQuF,SAEtB,CACIrI,OAAQ,OACR9H,MAAO,OACP2uC,UAAW,WACXnJ,QAAQ,EACRe,SAAU,cACP77B,KAAQuF,gBAEf,CACInI,OAAQ,OACR9H,MAAO,OACP2uC,UAAW,OACXnJ,QAAQ,EAERe,SAAU,UACP77B,KAAQuF,gBAEf,CACInI,OAAQ,YACR9H,MAAO,YACP2uC,UAAW,YACXnJ,QAAQ,EACR5pC,MAAO,MACP2qC,SAAU,eACP77B,KAAQuF,gBAEf,CACInI,OAAQ,SACR9H,MAAO,SACP2uC,UAAW,SAEXhB,OAAQA,CAACt9B,EAAGC,IAAMD,EAAE2G,OAAS1G,EAAE0G,OAE/BuvB,SAAU,YACP77B,KAAQqnC,eAEf,CACIjqC,OAAQ,QACR9H,MAAO,SACP2uC,UAAW,QAEXhB,OAAQA,CAACt9B,EAAGC,IACOD,EAAE0e,MACFze,EAAEye,MAGrBwX,SAAU59B,GAAOA,EAAIomB,SAClBrkB,KAAQqnC,eAEf,CACIjqC,OAAQ,eACR9H,MAAO,gBACP2uC,UAAW,cAEXhB,OAAQA,CAACt9B,EAAGC,IACOD,EAAEq9B,YACFp9B,EAAEo9B,YAGrBnH,SAAU59B,GAAOA,EAAI+kC,eAClBhjC,KAAQqnC,gBA6CnB,OAlCK11C,GAAauzB,IACdvlB,EAAQzN,KAAK,CACTkL,OAAQ,WACR9H,MAAO,WACP2uC,UAAW,cACXnJ,QAAQ,EAERe,SAAU,iBACP77B,KAAQuF,iBAEf5F,EAAQzN,KAAK,CACTkL,OAAQ,WACR9H,MAAO,WACP2uC,UAAW,WACXnJ,QAAQ,EAERe,SAAU,cACP77B,KAAQuF,kBAInB5F,EAAQzN,KAAK,CACTkL,OAAQ,GACR9H,MAAO,GACP2uC,UAAW,WACX/yC,MAAO,MACP2qC,SAAU,WACVz4B,OAAQhT,GACAA,EACO6C,IAAAC,cAAA,WAAK,YAETD,IAAAC,cAAA,cAGRyM,GACR,CAAChO,EAAUuzB,IAGRme,EAAqBA,KAEvBuD,GAAiB,GACjBP,GAAoB,IAElB/C,EAAqBA,KACvBsD,GAAiB,GACjBT,GAAqB,IAsDzB,OAAK92B,EAGDpc,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAACo0C,GAAgB,CACblF,iBAAkBkB,EAClBpB,kBAAmBmB,EACnB7zB,QAASg3B,EACTrE,cAAeA,EACfhtC,QAASA,KACLyxC,GAAiB,GACjBH,EAAmB,SAG3BxzC,IAAAC,cAACiwC,GAAe,CACZpmC,KAAMA,EACN4C,QAASA,EACT2jC,mBAAoBA,EACpBD,mBAAoBA,EACpBD,aAjFSA,OAkFT5kC,WAAY68B,IAEhBpoC,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAC0J,WAAO,CACJC,MAAO,CACHC,eAAgB,OAChBzG,MAAO,WAEX0G,KAAMipC,EAASlyC,IAAI,CAACY,EAAGV,KAEZ,CACH,IAAKA,EAAQ,EACbuzC,KAAM7yC,EAAEib,KACR8sB,KAAM/nC,EAAE6rB,KACRinB,UAAW9yC,EAAEkb,UAAUrd,QAAQ,cAAe,IAC9C+a,OAAQ5Y,EAAE4X,OACV,iBAAkB5X,EAAE2vB,MACpB,eAAgB3vB,EAAEsuC,YAClBnG,SAAUnoC,EAAE0yC,YACZK,SAAU/yC,EAAEwwB,MACZve,OAAQjS,EAAEiS,OACVmJ,aAAcpb,EAAEob,aAAalC,KAAK,MAClC,YAAalZ,EAAEmuC,KAEfhzB,YAAanb,EAAEmb,YAAYtd,QACvB,cACA,IAEJ,aAAcmC,EAAE2iC,UAChBqQ,UAAWhzC,EAAEgzC,UAAU95B,KAAK,MAC5B+5B,aAAcjzC,EAAEizC,aAAa/5B,KAAK,MAClCgb,WAAYl0B,EAAEk0B,WAAWhb,KAAK,MAC9B6B,OAAQ/a,EAAE+a,OAAO7B,KAAK,SAG9B3Q,SAAS,cAEThK,IAAAC,cAAA,OAAKC,UAAU,0DAAyD,oBAI5EF,IAAAC,cAAA,UACIkD,QAASA,IAAMmwC,GAA2B,GAC1CpzC,UAAU,8CACb,kBAILF,IAAAC,cAAC0C,IAAM,CACHV,KAAMgxC,EACN/wC,QAASA,IAAMgxC,GAAqB,IAEpClzC,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,KAAGC,UAAU,WAAU,wDAGvBF,IAAAC,cAAA,OAAKC,UAAU,6BACXF,IAAAC,cAAA,UACIkD,QAlITwxC,KACfZ,GAAgB,GAChB,MAAMa,EAAU9qC,EAAKjJ,IAAI0b,IACjBA,EAAQ+S,MAAQikB,EAAgBjkB,MAChC/S,EAAQ8T,UAAW,GAEhB9T,IAEXmgB,EAAQkY,GACRh2C,EAASgyB,IAA4B2iB,EAAgBjkB,MAChD9X,KAAK,KACFu8B,GAAgB,GAChBb,GAAqB,GACrBW,GAAWD,KAEdn8B,MAAM,KACHs8B,GAAgB,MAmHA7zC,UAAU,iEACVyE,SAAUmvC,GAETA,EACG9zC,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAAA,OAAKC,UAAU,gBACXF,IAAAC,cAAC+c,IAAc,OAEnBhd,IAAAC,cAAA,YAAM,kBAGV,WAGRD,IAAAC,cAAA,UACIC,UAAU,+CACViD,QAASA,IAAM+vC,GAAqB,GACpCvuC,SAAUmvC,GACb,cAOjB9zC,IAAAC,cAAC0C,IAAM,CACHV,KAAMkxC,EACNjxC,QAASA,IAAMkxC,GAAoB,IAEnCpzC,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,KAAGC,UAAU,WAAU,wDAGvBF,IAAAC,cAAA,OAAKC,UAAU,6BACXF,IAAAC,cAAA,UACIkD,QAnJR0xC,KAChB,MAAMD,EAAU9qC,EAAKjJ,IAAI0b,IACjBA,EAAQ+S,MAAQikB,EAAgBjkB,MAChC/S,EAAQ6U,MAAQ,GAEb7U,IAGXmgB,EAAQkY,GACRh2C,EAASgyB,IAA6B2iB,EAAgBjkB,MAEtD8jB,GAAoB,GACpBS,GAAWD,IAwIa1zC,UAAU,8CACb,gBAGDF,IAAAC,cAAA,UACIC,UAAU,+CACViD,QAASA,IAAMiwC,GAAoB,IACtC,cAOjBpzC,IAAAC,cAAC0C,IAAM,CACHV,KAAMoxC,EACNnxC,QAASA,IAAMoxC,GAA2B,IAE1CtzC,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,KAAGC,UAAU,WAAU,oDAGvBF,IAAAC,cAAA,OAAKC,UAAU,6BACXF,IAAAC,cAAA,UACIkD,QA9JP2xC,KACjBl2C,EAASmb,IAA8BzZ,EAAMiX,OAE7C+7B,GAA2B,GAC3BO,GAAWD,GACX3W,OAAOv+B,SAASq2C,UA0JQ70C,UAAU,8CACb,iBAGDF,IAAAC,cAAA,UACIC,UAAU,+CACViD,QAASA,IACLmwC,GAA2B,IAElC,eAxJKtzC,IAAAC,cAAC+c,IAAc,OCpTlC,QACX,MAAM+1B,EAAWp9B,YAAYG,KACvBxV,EAAQqV,YAAYG,KAI1B,OAFA+V,QAAQC,IAAI,iBAAkBinB,GAG1B/yC,IAAAC,cAAAD,IAAA4K,SAAA,KACKmoC,GACG/yC,IAAAC,cAAC6yC,GAAa,CACVE,QAAS,aAAa1yC,EAAMiX,aAC5Bw7B,SAAUA,MCCf,I,OAAA,KACX,MAAMn0C,EAAWC,cACXyB,EAAQqV,YAAYG,KACpBi9B,EAAWp9B,YAAYG,KAEvBk/B,EAAsBz9B,GACjBw7B,EAAS3oC,OAAOmS,GAAWA,EAAQozB,WAAap4B,GAG3D9X,oBAAU,KACFa,GACA1B,EAASgyB,IAAqCtwB,EAAMiX,QAEzD,CAAC3Y,EAAU0B,EAAOA,EAAMiX,OAE3B,MAAM09B,EAAiCA,CAACC,EAAWC,IACxCpC,EAAS3oC,OACZmS,GACIA,EAAQozB,WAAauF,GACrB34B,EAAQ43B,cAAgBgB,GAIpC,IAAI1f,EAAS,GACTn1B,GACIA,EAAMm1B,SACNA,EAASn1B,EAAMm1B,OAAO50B,IAAIoxB,IACf,CACH1a,KAAM0a,EAAM1a,KACZmF,KAAMuV,EAAMvV,SAmB5B,MAAM04B,EAAY,CACd,CACI79B,KAAM,WACNmF,KAAM,YAEV,CACInF,KAAM,OACNmF,KAAM,QAEV,CACInF,KAAM,QACNmF,KAAM,UAId,OACI1c,IAAAC,cAACsB,IAAG,KACCk0B,EAAO50B,IAAIoxB,IACR,MAAM8gB,EAAWiC,EAAoB/iB,EAAM1a,MAE3C,OACIvX,IAAAC,cAAC+Z,KAAc,CAAC7Y,IAAK8wB,EAAM1a,MACvBvX,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACiH,KAAY,CACTC,QAAS8qB,EAAMvV,KACftV,UAAc2rC,EAASztC,OAAZ,eAGnBtF,IAAAC,cAACma,KAAqB,KAClBpa,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,SACd2F,MAAO,CACH3L,MAAO,SAMVm3C,EAAUv0C,IAAInC,IACX,MAAMq0C,EACFkC,EACIhjB,EAAM1a,KACN7Y,EAAS6Y,MAGjB,OACIvX,IAAAC,cAAC+Z,KAAc,CACXpQ,MAAO,CACH1L,gBAAiB,WAErBiD,IAAKzC,EAAS6Y,MAEdvX,IAAAC,cAACia,KAAqB,CAClBsL,WAAYxlB,IAAAC,cAACgQ,KAAc,MAC3BwV,gBAAc,kBACdpkB,GAAG,kBAEHrB,IAAAC,cAACiH,KAAY,CACTC,QAASzI,EAASge,KAClBtV,UAAc2rC,EAASztC,OAAZ,eAGnBtF,IAAAC,cAACma,KAAqB,KAClBpa,IAAAC,cAACsB,IAAG,CACAyC,QAAQ,OACRC,cAAc,SACd2F,MAAO,CAAE3L,MAAO,SAMhB+B,IAAAC,cAAC6yC,GAAa,CACVp0C,SAAUA,EAAS6Y,KACnB0a,MAAOA,EAAM1a,KACbw7B,SAAUA,iB,8DC/IlE,MAAMsC,GAAoB,GAE1B,SAASvO,GAAOpxB,GACZ,MAAO,CACHzL,QAAS,CACLwX,cAAe,UAAU/L,IAKrC2/B,GAAkBC,WAAa,CAAC5/B,EAAS6B,EAAM4Z,IACpC6V,KAAOC,KAAK,iBAAiB1vB,EAAQ,CAAE4Z,aAAa2V,GAAOpxB,IAGtE2/B,GAAkBE,QAAU,CAAC7/B,EAAS6B,IAC3ByvB,KAAOmB,IAAI,iBAAiB5wB,EAAQuvB,GAAOpxB,IAGtD2/B,GAAkBG,WAAa,CAAC9/B,EAAS6B,IAC9ByvB,KAAOmB,IAAI,iBAAiB5wB,YAAgBuvB,GAAOpxB,IAG/C2/B,ICNA,QACX,MAAM/0C,EAAQqV,YAAYG,KACpB2/B,EAAkB9/B,YAAYG,KAC9B0tB,EAAQC,cACR/kC,EAAWglC,cAEXjlC,EAAOU,kBAAQ,KACjB,MAAM2K,EAAO,CACT,CACI9K,KAAM,GACNmC,IAAK,eACLC,MAAO,eACPO,UAAWsjC,KAmCnB,OAtBAn7B,EAAK7K,KAAK,CACND,KAAM,eACNmC,IAAK,cACLC,MAAO,cACPO,UAAW+zC,KAkBR5rC,GACR,CAACxJ,IAEJ,OAAKA,GAASm1C,EAAwBz1C,IAAAC,cAAC8X,IAAW,CAAChC,SAAO,IAGtD/V,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACmY,IAAU,CACPC,QAAQ,WACRC,WAAW,2CAEftY,IAAAC,cAAC+kC,KAAkB,CACfjnC,aAAW,EACXU,KAAMA,EACNC,SAAUA,EACVC,UAAW6kC,EAAM/mB,Q,OCvEf7e,YAAWC,IAAK,CAC9B83C,YAAa,CACT13C,MAAO,OACP+F,QAAS,OACTC,cAAe,SACfzF,WAAY,iBAIL,I,sBCZf,MAyBMo3C,GAAeA,CAACC,EAAYC,IAC1BD,EACO,CACHE,WAAY,OACZ33C,WAAY,gBACT03C,GAIJ,CACHC,WAAY,UACTD,GAILE,GAAeC,GACbA,EACO,CACHC,cAAe,OACfptC,SAAU,SACV1K,WAAY,oBAGb,CACH83C,cAAe,OACfptC,SAAU,SACV1K,WAAY,oBAuIL+3C,OAnIMA,EACjBv5C,QACAK,WACAm5C,WACAC,cACAC,gBAAgBA,SAChBC,mBAAmBA,aAChB,IAADC,EAAAC,EACF,MAAMhpC,EAAQ,CACVyP,IAAe,QAAZs5B,EAAO,OAAL55C,QAAK,IAALA,OAAK,EAALA,EAAOsgB,WAAG,IAAAs5B,IAAI,GACnBtf,OAAqB,QAAfuf,EAAO,OAAL75C,QAAK,IAALA,OAAK,EAALA,EAAOs6B,cAAM,IAAAuf,IAAI,IAE7B5qB,QAAQC,IAAIre,EAAMypB,QAClB,MAAMwf,EAAgBx5C,sBAClB6R,IACI,MAAM,OAAE6vB,EAAM,YAAE+X,GAAgB5nC,EAEhC,GAAK4nC,EAEL,GAAI/X,EAAOgY,cAAgBD,EAAYC,YAAa,CAChD,MAAMzxC,EA3EN0xC,EAACzwB,EAAM0wB,EAAYC,KAC/B,MAAMhoC,EAAS3J,MAAM4xC,KAAK5wB,IACnB6wB,GAAWloC,EAAO2vB,OAAOoY,EAAY,GAG5C,OAFA/nC,EAAO2vB,OAAOqY,EAAU,EAAGE,GAEpBloC,GAsEmB8nC,CACVppC,EAAMmxB,EAAOgY,aACbhY,EAAO79B,MACP41C,EAAY51C,OAGhB9D,EAAS,IACFL,EACH,CAACgiC,EAAOgY,aAAczxC,QAEvB,CACH,MAAM,IAAE+X,EAAG,OAAEga,GA3EhBggB,EAACtY,EAAQ+X,EAAaQ,EAAiBC,KAChD,MAAMC,EAAcjyC,MAAM4xC,KAAKpY,GACzB0Y,EAAYlyC,MAAM4xC,KAAKL,IACtBM,GAAWI,EAAY3Y,OAAOyY,EAAgBp2C,MAAO,GAE5Du2C,EAAU5Y,OAAO0Y,EAAqBr2C,MAAO,EAAGk2C,GAEhD,MAAMloC,EAAS,GAIf,OAHAA,EAAOooC,EAAgBP,aAAeS,EACtCtoC,EAAOqoC,EAAqBR,aAAeU,EAEpCvoC,GAgE6BmoC,CACpBzpC,EAAMmxB,EAAOgY,aACbnpC,EAAMkpC,EAAYC,aAClBhY,EACA+X,GAGJ15C,EAAS,IACFL,EACHsgB,MACAga,aAIZ,CAACzpB,EAAO7Q,EAAOK,IAGnB,OACI+C,IAAAC,cAACsB,IAAG,CAACE,EAAG,EAAGmI,MAAO,CAAExL,WAAY,UAC5B4B,IAAAC,cAACs3C,KAAe,CAACC,UAAWd,GACxB12C,IAAAC,cAACw3C,KAAS,CAACb,YAAY,OAClB,CAACc,EAAUC,IACR33C,IAAAC,cAACgc,KAAI,CACDu1B,IAAKkG,EAASE,SACdhuC,MAAOosC,GAAa2B,EAAS1B,gBAC7B4B,UACI73C,IAAAC,cAAC63C,KAAa,CAACluC,MAAO,CAAExL,WAAY,UAC/Bg4C,IAIR3oC,EAAMyP,IAAIrc,IAAI,CAACQ,EAAIN,IAEZf,IAAAC,cAAC83C,KAAS,CACN52C,IAAKE,EAAGiuB,IACR0oB,YAAa32C,EAAGiuB,IAChBvuB,MAAOA,GAEN,CAAC22C,EAAUC,IACR33C,IAAAC,cAAA,MAAAgB,OAAAC,OAAA,CACIswC,IAAKkG,EAASE,UACVF,EAASO,eACTP,EAASQ,gBAAe,CAC5BtuC,MAAOgsC,GACH+B,EAAS9B,WACT6B,EAASO,eACJruC,SAGR0sC,EAAcj1C,EAAGiuB,IAAKvuB,MAM1C22C,EAAS1yC,cAItBhF,IAAAC,cAACw3C,KAAS,CAACb,YAAY,UAClB,CAACc,EAAUC,IACR33C,IAAAC,cAACgc,KAAI,CACDu1B,IAAKkG,EAASE,SACdhuC,MAAOosC,GAAa2B,EAAS1B,gBAC7B4B,UACI73C,IAAAC,cAAC63C,KAAa,CAACluC,MAAO,CAAExL,WAAY,UAC/Bi4C,IAIR5oC,EAAMypB,OAAOr2B,IAAI,CAACQ,EAAIN,IACnBf,IAAAC,cAAC83C,KAAS,CACN52C,IAAKE,EAAGiuB,IACR0oB,YAAa32C,EAAGiuB,IAChBvuB,MAAOA,GAEN,CAAC22C,EAAUC,IACR33C,IAAAC,cAAA,MAAAgB,OAAAC,OAAA,CACIswC,IAAKkG,EAASE,UACVF,EAASO,eACTP,EAASQ,gBAAe,CAC5BtuC,MAAOgsC,GACH+B,EAAS9B,WACT6B,EAASO,eAAeruC,SAG3B2sC,EAAiBl1C,EAAGiuB,IAAKvuB,MAKzC22C,EAAS1yC,iBCjKtC,MAAMmzC,GAAiBp3C,IACnB,OAAQA,GACJ,KAAK,EACD,MAAO,CACH7C,gBAAiB,WAEzB,KAAK,EACD,MAAO,CACHA,gBAAiB,WAEzB,KAAK,EACD,MAAO,CACHA,gBAAiB,WAEzB,QACI,MAAO,CACHA,gBAAiB,qBAKlB,SAAG+zB,YACd,MAAMrzB,EAAWC,cAGXu5C,GAFkBziC,YAAYG,KAEhBH,YAAYqa,MAC1B1vB,EAAQqV,YAAYG,KAEpBuiC,EAAiB1iC,YAAYG,KAC7Bma,EAAiBta,YAAYG,MAG5BwiC,EAAiBC,IADI5iC,YAAYG,KACMhZ,oBAAS,KAQhDkjC,EAAYwY,IAPD,OAALvmB,QAAK,IAALA,KAAO1a,KAOgBza,mBAAS,MACtC27C,EAAkBC,GAAuB57C,mBAAS,OAClDwf,EAAQq8B,GAAa77C,mBAASmzB,GAErCxwB,oBAAU,KACFa,GAASA,EAAMiX,OACf3Y,EAASmb,IAAmCzZ,EAAMiX,OAClD3Y,EAASgyB,IAAqCtwB,EAAMiX,SAGzD,CAAC3Y,EAAU0B,EAAMiX,OAGpB9X,oBAAU,KACN,GAAI24C,EAAa,CACb,MAAMQ,EAAmB,IAClB,IAAIC,IAAIT,EAAYv3C,IAAI0b,GAAWA,EAAQ0V,SAChD7nB,OAAOy1B,GAAYA,GACrB2Y,EAAcI,GAGVA,EAAiBtzC,OAAS,IAAMmzC,GAChCC,EAAoBE,EAAiB,MAG9C,CAACR,EAAaK,IAgBjB,MA0DOK,EAAeC,GAAoBj8C,mBAAS,CAC/CogB,IAAK,GACLga,OAAQ,KAgBZz3B,oBAAU,KAEN,IAAK24C,IAAgBC,EAUjB,aALIS,EAAc57B,IAAI5X,OAAS,GAC3BwzC,EAAc5hB,OAAO5xB,OAAS,IAE9ByzC,EAAiB,CAAE77B,IAAK,GAAIga,OAAQ,MAO5C,MAAM8hB,EAAc/oB,EAAiB,IAAIA,GAAkB,GAG3D,IAAIgpB,EAAiB,GAErB,GAAI7zC,MAAMC,QAAQ+yC,GAAc,CAC5B,MAAMc,EAAY,IAAIL,IAAIG,EAAYn4C,IAAIY,GAAKA,EAAE6tB,MACjD2pB,EAAiBb,EAAYhuC,OAAOmS,GAEzBA,EAAQ8T,WAAa6oB,EAAUjR,IAAI1rB,EAAQ+S,MAO1D,MAAM6pB,EAAgBL,EAAc57B,IAC/Brc,IAAIY,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG6tB,KACZllB,OAAO/I,GAAY,MAANA,GACb8gC,OACCiX,EAAqBJ,EACtBn4C,IAAIY,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG6tB,KACZllB,OAAO/I,GAAY,MAANA,GACb8gC,OACCkX,EAAmBP,EAAc5hB,OAClCr2B,IAAIY,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG6tB,KACZllB,OAAO/I,GAAY,MAANA,GACb8gC,OACCmX,EAAwBL,EACzBp4C,IAAIY,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG6tB,KACZllB,OAAO/I,GAAY,MAANA,GACb8gC,OAECoX,EACFx0B,KAAKM,UAAU8zB,KAAmBp0B,KAAKM,UAAU+zB,GAC/CI,EACFz0B,KAAKM,UAAUg0B,KACft0B,KAAKM,UAAUi0B,IAEfC,GAAcC,IACdT,EAAiB,CACb77B,IAAK87B,EACL9hB,OAAQ+hB,KAGjB,CAAChpB,EAAgBmoB,EAAaC,IAoBjC,MA8BMoB,EAAqBv8C,sBACvB,CAACmE,EAAIN,KACD,MAAMwb,EAAU87B,EAAeh3C,GAC/B,OAAKkb,EAMDvc,IAAAC,cAAA,WACID,IAAAC,cAAC+U,KAAQ,KACLhV,IAAAC,cAACgV,KAAc,KACXjV,IAAAC,cAACiV,KAAM,CAACtL,MAAOuuC,GAAep3C,IAAQ,MAE1Cf,IAAAC,cAACiH,KAAY,CACTC,QAASoV,EAAQG,MAAQ,kBACzBtV,UAAWmV,EAAQI,WAAa,mBAEpC3c,IAAAC,cAACiH,KAAY,CACTC,QAASoV,EAAQ43B,aAAe,GAChC/sC,UAAW,cACPmV,EAAQ0V,OAAS,mBAGzBjyB,IAAAC,cAAA,SAAG,SACQ,IACNsc,EAAQwzB,YACHkE,WAAW13B,EAAQwzB,aAAa3D,QAAQ,GACxC,MAAO,QAxBzBvgB,QAAQC,IAAI,8CAA+CzqB,GACpD,OA6Bf,CAACg3C,IAGL,OAAKD,EAKDp4C,IAAAC,cAACkoB,KAAK,CAACuxB,UAAW,GACd15C,IAAAC,cAAA,OAAKC,UAAU,iDACXF,IAAAC,cAAA,MAAIC,UAAU,4BAA2B,mBACzCF,IAAAC,cAAA,OAAKC,UAAU,wBACV8/B,EAAWn/B,IAAIg/B,GACZ7/B,IAAAC,cAAA,UACIkB,IAAK0+B,EACL3/B,UAAW,wFACPu4C,IAAqB5Y,EACf,0BACA,mEAEV18B,QAASA,IAAMu1C,EAAoB7Y,IAElCA,MAMhB4Y,GACGz4C,IAAAC,cAAAD,IAAA4K,SAAA,KACI5K,IAAAC,cAAA,MAAIC,UAAU,gEAA+D,eAC5Du4C,GAEjBz4C,IAAAC,cAAA,OAAKC,UAAU,0CACXF,IAAAC,cAACk2C,GAAY,CACTv5C,MAAO,CACHsgB,IAAK47B,EAAc57B,IAAI9S,OACnBmS,GACIA,GACA87B,EAAe97B,EAAQ+S,MACvB+oB,EAAe97B,EAAQ+S,KAAK2C,QACxBwmB,GAEZvhB,OAAQ4hB,EAAc5hB,OAAO9sB,OACzBmS,GACIA,GACA87B,EAAe97B,EAAQ+S,MACvB+oB,EAAe97B,EAAQ+S,KAAK2C,QACxBwmB,IAGhBx7C,SAAU08C,IAEN,MAAMC,EACFd,EAAc57B,IAAI9S,OACdmS,GACIA,GACA87B,EAAe97B,EAAQ+S,MACvB+oB,EAAe97B,EAAQ+S,KAClB2C,QAAUwmB,GAGrBoB,EACFf,EAAc5hB,OAAO9sB,OACjBmS,GACIA,GACA87B,EAAe97B,EAAQ+S,MACvB+oB,EAAe97B,EAAQ+S,KAClB2C,QAAUwmB,GAG3BM,EAAiB,CACb77B,IAAK,IACE08B,KACAD,EAASz8B,KAEhBga,OAAQ,IACD2iB,KACAF,EAASziB,WAIxBkf,SAAaqC,EAAH,WACVnC,cAnJCwD,CAACz4C,EAAIN,KAC1B,MAAMwb,EAAU87B,EAAeh3C,GAC/B,OAAKkb,EAMDvc,IAAAC,cAAC+U,KAAQ,CAAC7T,IAAKE,GACXrB,IAAAC,cAACgV,KAAc,KACXjV,IAAAC,cAACiV,KAAM,CAACtL,MAAOuuC,GAAep3C,IAASA,EAAQ,IAEnDf,IAAAC,cAACiH,KAAY,CACTC,QAASoV,EAAQG,MAAQ,kBACzBtV,UAAWmV,EAAQI,WAAa,mBAEpC3c,IAAAC,cAACiH,KAAY,CACTC,QAASoV,EAAQ43B,aAAe,GAChC/sC,UAAW,cAAamV,EAAQ0V,OAAS,mBAE7CjyB,IAAAC,cAAA,SAAG,SACQ,IACNsc,EAAQwzB,YACHkE,WAAW13B,EAAQwzB,aAAa3D,QAAQ,GACxC,MAAO,OArBrBvgB,QAAQC,IAAI,qCAAsCzqB,GAC3C,OAgJSg1C,YAAgBoC,EAAH,aACblC,iBAAkBkD,MAMlCz5C,IAAAC,cAAA,OAAKC,UAAU,yBACXF,IAAAC,cAAA,UACIkD,QAASsqB,UAEL,MAAMssB,EAAgBjB,EAAc57B,IAAIrc,IAAI0b,GACjCA,EAAQ+S,KAEnBzD,QAAQC,IACJ,kCACAiuB,GAlUKC,KACzBnuB,QAAQC,IAAI,mBAAoBmE,GAChC,IAAIG,EAAmB,GACvB,GAAIgoB,GACInoB,EAAgB,CAChBpE,QAAQC,IAAI,gBAAiBssB,GAG7B,MAAM6B,EAAmB7B,EAAYhuC,OACjCmS,GAAWA,EAAQ0V,QAAUwmB,GAGjC5sB,QAAQC,IACJ,wBACA2sB,EACA,IACAwB,GAKJ7pB,EAAmB6pB,EAAiB7vC,OAAOmS,IAEvC,GAAIA,EAAQ8T,SAAU,CAElB,GAAI2pB,EACA,OAAQA,EAAWrpB,SAASpU,EAAQ+S,KACjC,GAAIW,EAAgB,CAMvB,OAJwBA,EAAeiqB,KACnC3pB,GACIA,EAAcjB,MAAQ/S,EAAQ+S,KAI1C,OAAO,EAEX,OAAO,IAGXzD,QAAQC,IACJ,wBACA2sB,EACA,IACAroB,KA2RID,CAAqB4pB,GAErB,UAEUn7C,EACFmb,IACIggC,EACAz5C,EAAMiX,aAMR3Y,EACFmb,IAAgCzZ,EAAMiX,OAO1C3Y,EACImb,IAAmCzZ,EAAMiX,OAE7C3Y,EACIgyB,IACItwB,EAAMiX,OAId3Y,EACIuY,IACI,sCAGV,MAAOpa,GACL8uB,QAAQ9uB,MACJ,mCACAA,GAEJ6B,EACIuY,IACI,kDAKhBjX,UAAU,sMACb,kBArJFF,IAAAC,cAAC+c,IAAc,OCrSf,IC9BA,QACX,MAAM+1B,EAAWp9B,YAAYG,KACvBxV,EAAQqV,YAAYG,KACpBqkC,EAAexkC,YAAYG,KAC3BlX,EAAWC,cAmDjB,OAjDAgtB,QAAQC,IAAI,iBAAkBinB,GAC9BtzC,oBAAU,KACFa,GAASA,EAAMiX,OACfsU,QAAQC,IAAI,+BAAgCxrB,EAAMiX,MAClD3Y,EAASmb,IAAoCzZ,EAAMiX,SAExD,CAACjX,EAAO1B,IAEXitB,QAAQC,IAAI,gBAAiBquB,GAyCD,IAAxBA,EAAa70C,OACNtF,IAAAC,cAAA,WAAK,cAGZD,IAAAC,cAAAD,IAAA4K,SAAA,KACKuvC,GAEGn6C,IAAAC,cAAA,SAAOC,UAAU,qBAUbF,IAAAC,cAAA,aACKk6C,EAAat5C,IAAI,CAACuwB,EAAOrwB,IAIL,UAAbqwB,EAAM,GAEFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,gCAEV4J,KAOR,SAAbsnB,EAAM,GAGFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAU,iCAET4J,KAOR,KAAbsnB,EAAM,IACN8L,MAAM9L,GAEFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,kCAEV4J,MAQrB9J,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,oBAEV4J,UCvIlC,QACX,MAAMipC,EAAWp9B,YAAYG,KACvBxV,EAAQqV,YAAYG,KACpBqkC,EAAexkC,YAAYG,KAC3BlX,EAAWC,cAmDjB,OAjDAgtB,QAAQC,IAAI,iBAAkBinB,GAC9BtzC,oBAAU,KACFa,GAASA,EAAMiX,OACfsU,QAAQC,IAAI,+BAAgCxrB,EAAMiX,MAClD3Y,EAASmb,IAAsCzZ,EAAMiX,SAE1D,CAACjX,EAAO1B,IAEXitB,QAAQC,IAAI,gBAAiBquB,GAyCD,IAAxBA,EAAa70C,OACNtF,IAAAC,cAAA,WAAK,cAGZD,IAAAC,cAAAD,IAAA4K,SAAA,KACKuvC,GAEGn6C,IAAAC,cAAA,SAAOC,UAAU,qBAUbF,IAAAC,cAAA,aACKk6C,EAAat5C,IAAI,CAACuwB,EAAOrwB,IAIL,UAAbqwB,EAAM,GAEFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,gCAEV4J,KAOR,SAAbsnB,EAAM,GAGFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAU,iCAET4J,KAOR,KAAbsnB,EAAM,IACN8L,MAAM9L,GAEFpxB,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,kCAEV4J,MAQrB9J,IAAAC,cAAA,MAAIkB,IAAKJ,GACJqwB,EAAMvwB,IAAI,CAACiJ,EAAM/I,IAEVf,IAAAC,cAAA,MACIkB,IAAKJ,EACLb,UAAW,oBAEV4J,UCxHlC,QACX,MAAMxJ,EAAQqV,YAAYG,KACpBpX,EAAWglC,cACXF,EAAQC,cACR7kC,EAAWC,cAEjBY,oBAAU,KACFa,GAASA,EAAMiX,OACfsU,QAAQC,IAAI,+BAAgCxrB,EAAMiX,MAClD3Y,EAASmb,IAAoCzZ,EAAMiX,SAExD,IAEH,MAAM9Y,EAAOU,kBAAQ,KACjB,MAAM2K,EAAO,GA6Cb,OA9BAA,EAAK7K,KAAK,CACND,KAAM,YACNmC,IAAK,YACLC,MAAO,WACPO,UAAW+zC,KAGf5rC,EAAK7K,KAAK,CACND,KAAM,UACNmC,IAAK,SACLC,MAAO,gBACPO,UAAWy4C,KAGftwC,EAAK7K,KAAK,CACND,KAAM,mBACNmC,IAAK,kBACLC,MAAO,kBACPO,UAAW04C,KAYRvwC,GACR,IAEH,OACI9J,IAAAC,cAAC8X,IAAW,KACR/X,IAAAC,cAACmY,IAAU,CACPC,QAAQ,UACRC,WAAW,gDAEftY,IAAAC,cAAC+kC,KAAkB,CACfjnC,aAAW,EACXU,KAAMA,EACNC,SAAUA,EACVC,UAAW6kC,EAAM/mB,Q,qBC9DlB,QAAO,IAAD69B,EAAAC,EACjB,MAAM/W,EAAQC,cACR/kC,EAAWglC,cACX9kC,EAAWC,eAEX,KAAE0Y,GAASisB,EAAM5vB,OAGjBtT,EAAQqV,YAAYG,KAEpBC,GADSJ,YAAYqa,KACXra,YAAYG,MACtB/Y,EAAQ4Y,YAAYG,KAoC1B,OAlCArW,oBAAU,KACNb,EAASmb,IAA6BxC,KACvC,CAAC3Y,EAAU2Y,IAEd9X,oBAAU,KACNb,EAASgyB,IAA6BrZ,IACtC3Y,EAASgyB,IAAoCrZ,IAC7C3Y,EAASgyB,IAA4BrZ,IAErC3Y,EAASmb,IAAgCxC,IACzC3Y,EAASmb,IAAqCxC,IAC9C3Y,EAASmb,IAAgCxC,IACzC3Y,EAASmb,IAAiCxC,KAC3C,CAACA,EAAM3Y,IAEVa,oBAAU,KACFa,IACA1B,EACImb,IACIzZ,EAAMy1B,MACNz1B,EAAMub,aAGdjd,EAASmb,IAA6CxC,IACtD3Y,EAASmb,IAAqCxC,IAC9C3Y,EAASmb,IAAoCxC,IAC7C3Y,EAASmb,IAAgCxC,IACzC3Y,EAASmb,IAAqCxC,IAC9C3Y,EAASmb,IAAgCxC,IACzC3Y,EAASmb,IAAiCxC,MAE/C,CAAC3Y,EAAU2Y,EAAMjX,IAEpBurB,QAAQC,IAAI,QAASxrB,EAAMivB,UAAWjvB,EAAMkvB,UAExCxvB,IAAAC,cAAC8X,IAAW,CAAChC,QAASA,EAAShZ,MAAOA,GAClCiD,IAAAC,cAACsB,IAAG,CAACqI,MAAO,CAAEgR,OAAQ,OAAQxP,SAAU,UACpCpL,IAAAC,cAACiD,IAAM,CACH0G,MAAO,CAAExG,MAAO,SAChBD,QAASA,IAAMvE,EAASK,YAAK,eAE7Be,IAAAC,cAACu6C,KAAgB,CACb5wC,MAAO,CAAEqC,SAAU,OAAQ7I,MAAO,WACpC,SAIVpD,IAAAC,cAACw6C,KAAa,CACVv8B,kBACIle,IAAAC,cAACsB,IAAG,CACAE,EAAG,EACHuC,QAAQ,OACRC,cAAc,SACdzF,WAAW,SACX0F,eAAe,WAET,OAAL5D,QAAK,IAALA,GAAW,QAANg6C,EAALh6C,EAAOoyB,YAAI,IAAA4nB,OAAN,EAALA,EAAa5oB,UACV1xB,IAAAC,cAACy6C,KAAK,CACFhpB,SAAe,OAALpxB,QAAK,IAALA,GAAW,QAANi6C,EAALj6C,EAAOoyB,YAAI,IAAA6nB,OAAN,EAALA,EAAa7oB,SACvBipB,eAAgB,CACZ18C,MAAO,OAIf+B,IAAAC,cAACmE,IAAU,CAACwF,MAAO,CAAExG,MAAO,SAAW1C,QAAQ,MAC1CJ,EAAMoc,MAGf1c,IAAAC,cAACmE,IAAU,CAAC1D,QAAQ,SAASkJ,MAAO,CAAExG,MAAO,UAAW,UAKhE6a,WACIje,IAAAC,cAAAD,IAAA4K,SAAA,KACKtK,EAAMivB,YAAcjvB,EAAMkvB,SACvBxvB,IAAAC,cAAC26C,IAAK,CACFl6C,QAAQ,SACRm6C,SAAS,UACTjxC,MAAO,CACHuT,KAAM,MACNlf,MAAO,MACPmN,SAAU,QACVwP,OAAQ,MAGZ5a,IAAAC,cAAAD,IAAA4K,SAAA,KAAE,oIAMN,KACJ5K,IAAAC,cAAC8f,KAAW,CAACpc,KAAMrD,EAAMoc,QAGjC/d,UAAW6kC,EAAM/mB,IACjB/d,SAAUA,EACVyf,OAAQ,CACJ,CACIhd,IAAK,OACLnC,KAAM,QACN+Q,KAAM/P,IAAAC,cAAC66C,IAAQ,MACf15C,MAAO,OACPO,UAAWo5C,IAUf,CACI55C,IAAK,eACLnC,KAAM,gBACN+Q,KAAM/P,IAAAC,cAAC+6C,IAAU,MACjB55C,MAAO,eACPO,UAAWs5C,IAEf,CACI95C,IAAK,WACLnC,KAAM,UACN6C,OAAO,EACP6I,QAAQ,EACRkU,QAAQ,EACRG,kBAAmB,kBACnBhP,KAAM/P,IAAAC,cAACi7C,IAAa,MACpB95C,MAAO,SACPO,UAAWw5C,IAEf,CACIh6C,IAAK,SACLnC,KAAM,UACN6C,OAAO,EACP6I,QAAQ,EACRkU,QAAQ,EACRG,kBAAmB,gBACnBhP,KAAM/P,IAAAC,cAACm7C,KAAY,MACnBh6C,MAAO,SACPO,UAAW05C,IAEf,CACIl6C,IAAK,WACLnC,KAAM,YACN+Q,KAAM/P,IAAAC,cAACq7C,IAAQ,MACfl6C,MAAO,WACPO,UAAW45C,IAEf,CACIp6C,IAAK,UACLnC,KAAM,WACN+Q,KAAM/P,IAAAC,cAACu7C,IAAc,MACrBp6C,MAAO,UACPO,UAAW85C,IAsBf,CACIt6C,IAAK,SACLnC,KAAM,UACN6C,OAAO,EACPkO,KAAM/P,IAAAC,cAACy7C,IAAY,MACnBt6C,MAAO,SACPO,UAAWg6C,SC5NpB,eACX,MAAMnY,EAAQC,cACd,OACIzjC,IAAAC,cAACyB,IAAM,KACH1B,IAAAC,cAAC2B,IAAK,CAACC,OAAO,EAAM7C,KAAM,GAAGwkC,EAAM/mB,IAAO9a,UAAWi6C,IACrD57C,IAAAC,cAAC2B,IAAK,CACFC,OAAO,EACP7C,KAASwkC,EAAM/mB,IAAT,SACN9a,UAAWk6C,KAEf77C,IAAAC,cAAC6B,IAAQ,CAACC,GAAIyhC,EAAM/mB","file":"static/js/24.727787a5.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\n\nexport const useFormField = (\n    initialValue,\n    validate = () => null,\n    initialError = null,\n    onChangeEvent = true,\n) => {\n    const [value, setValue] = useState(initialValue)\n    const [error, setError] = useState(initialError)\n\n    const onChange = useCallback(\n        e => {\n            const value = onChangeEvent ? e.target.value : e\n            setValue(value)\n            if (error) {\n                const newError = validate(value)\n\n                if (newError) {\n                    setError(newError)\n                } else {\n                    setError(null)\n                }\n            }\n        },\n        [error, validate, onChangeEvent],\n    )\n\n    const reset = useCallback(() => {\n        setValue(initialValue)\n        setError(undefined)\n    }, [initialValue])\n\n    const handleValidate = useCallback(() => {\n        const err = validate(value)\n        if (err) {\n            setError(err)\n            return err\n        } else {\n            setError()\n            return\n        }\n    }, [value, validate])\n\n    return {\n        value,\n        setValue,\n        onChange,\n        reset,\n        error,\n        setError,\n        validate: handleValidate,\n        dirty: value !== initialValue,\n    }\n}\n","import React, { useMemo, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { findIndex } from 'lodash-es'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { Tabs, Tab, Typography, Box, useMediaQuery } from '@material-ui/core'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            <Box>{children}</Box>\n        </Typography>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ transparent }) => ({\n        flexGrow: 1,\n        width: '100%',\n        backgroundColor: transparent\n            ? 'transparent'\n            : theme.palette.background.paper,\n    }),\n    wrapper: {\n        textAlign: 'left',\n        alignItems: 'flex-start',\n    },\n}))\n\nexport default ({ tabs, location, baseRoute, transparent = false }) => {\n    const dispatch = useDispatch()\n    const classes = useStyles({ transparent })\n\n    const pushRoute = useCallback(\n        path => {\n            dispatch(push(`${baseRoute}${path}`))\n        },\n        [baseRoute, dispatch],\n    )\n\n    const handleChange = (event, newValue) => {\n        pushRoute(tabs[newValue].path)\n    }\n\n    const activeIndex = useMemo(() => {\n        const relativePath = location.pathname.replace(baseRoute, '')\n        const idx = findIndex(tabs, item => item.path === relativePath)\n        return idx\n    }, [baseRoute, location.pathname, tabs])\n\n    useEffect(() => {\n        if (activeIndex === -1) {\n            pushRoute(tabs[0].path)\n        }\n    }, [tabs, activeIndex, pushRoute])\n\n    const safeIndex = activeIndex !== -1 ? activeIndex : 0\n    const theme = useTheme()\n    const isMobile = useMediaQuery(theme.breakpoints.down('sm'))\n\n    return (\n        <div className={classes.root}>\n            <Tabs\n                orientation={isMobile ? 'vertical' : 'horizontal'}\n                value={safeIndex}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                aria-label=\"scrollable auto tabs\"\n            >\n                {tabs.map((tab, index) => (\n                    <Tab\n                        key={tab.label}\n                        label={tab.label}\n                        {...a11yProps(index)}\n                        classes={isMobile ? { wrapper: classes.wrapper } : {}}\n                    />\n                ))}\n            </Tabs>\n            <Box mt={3} p={2}>\n                <Switch>\n                    {tabs.map(({ key, path, component }, index) => {\n                        return (\n                            <Route\n                                key={key}\n                                exact={true}\n                                path={`${baseRoute}${path}`}\n                                component={component}\n                            />\n                        )\n                    })}\n                    <Redirect to={baseRoute} />\n                </Switch>\n            </Box>\n        </div>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core'\n\nconst ConfirmDialog = ({\n    open,\n    onClose = () => {},\n    onCancel = () => {},\n    onOk = () => {},\n    title,\n    message,\n    cancelText = 'Cancel',\n    okText = 'OK',\n}) => {\n    const handleCancel = useCallback(() => {\n        onClose()\n        onCancel()\n    }, [onClose, onCancel])\n\n    const handleOk = useCallback(() => {\n        onClose()\n        onOk()\n    }, [onClose, onOk])\n\n    return (\n        <Dialog\n            open={open}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {message}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleCancel}>{cancelText}</Button>\n                <Button onClick={handleOk} color=\"primary\" variant=\"contained\">\n                    {okText}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default ConfirmDialog\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box, Button, Typography } from '@material-ui/core'\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: '#efefef',\n    },\n}))\n\nconst Empty = ({\n    isEmpty,\n    emptyText = 'No data',\n    button,\n    hideIfNotEmpty = false,\n}) => {\n    const classes = useStyles()\n\n    const renderButton = () => {\n        if (!button) return null\n        return (\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={button.onClick}\n            >\n                {button.text}\n            </Button>\n        )\n    }\n\n    if (!isEmpty && !hideIfNotEmpty) {\n        return (\n            <Box\n                pr={2}\n                pb={2}\n                pt={2}\n                pl={2}\n                display=\"flex\"\n                flexDirection=\"row\"\n                justifyContent=\"flex-end\"\n            >\n                {renderButton()}\n            </Box>\n        )\n    }\n\n    return (\n        <Box\n            pt={10}\n            pb={10}\n            pl={3}\n            pr={3}\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            className={classes.root}\n        >\n            <InfoTwoToneIcon />\n            <Box mt={2}>\n                <Typography variant=\"body1\">{emptyText}</Typography>\n            </Box>\n            {button && <Box mt={2}>{renderButton()}</Box>}\n        </Box>\n    )\n}\n\nexport default Empty\n","import React, { useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { TextField, MenuItem, Chip, ListItemText } from '@material-ui/core'\nimport { SelectOptions } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    chips: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}))\n\nconst _Select = React.memo(\n    ({\n        disabled,\n        error,\n        helperText,\n        label,\n        multiple = false,\n        onBlur = () => {},\n        onChange = () => {},\n        options,\n        placeholder,\n        type,\n        value,\n    }) => {\n        const classes = useStyles()\n        const handleChange = useCallback(\n            e => {\n                e.preventDefault()\n                onChange(e.target.value)\n            },\n            [onChange],\n        )\n\n        const items = useMemo(() => {\n            if (Array.isArray(options) && options.length > 0) {\n                return options\n            }\n            switch (type) {\n                case 'country':\n                    return SelectOptions.COUNTRIES\n                case 'countryCode':\n                    return SelectOptions.COUNTRY_CODES\n                case 'nationality':\n                    return SelectOptions.NATIONALITIES\n                case 'dietary-restriction':\n                    return SelectOptions.DIETARY_RESTRICTIONS\n                case 'num-hackathons':\n                    return SelectOptions.NUM_HACKATHONS\n                case 'gender':\n                    return SelectOptions.GENDERS\n                case 'expertise':\n                    return SelectOptions.EXPERTISE\n                case 'industry':\n                    return SelectOptions.INDUSTRIES\n                case 'language':\n                    return SelectOptions.LANGUAGES\n                case 'role':\n                    return SelectOptions.ROLES\n                case 'skill':\n                    return SelectOptions.SKILLS\n                case 'theme':\n                    return SelectOptions.THEMES\n                case 'status':\n                    return SelectOptions.STATUSES\n                case 'day':\n                    return SelectOptions.DAYS\n                case 'month':\n                    return SelectOptions.MONTHS\n                case 'year':\n                    return SelectOptions.YEARS\n                default:\n                    return []\n            }\n        }, [type, options])\n\n        const valueOrDefault = value || (multiple ? [] : '')\n\n        const selectProps = {\n            multiple,\n            onOpen: e => e.preventDefault(),\n        }\n        if (multiple) {\n            selectProps.renderValue = (value = []) => {\n                return (\n                    <div className={classes.chips}>\n                        {value.map(item => (\n                            <Chip\n                                key={item}\n                                label={item}\n                                className={classes.chip}\n                            />\n                        ))}\n                    </div>\n                )\n            }\n        }\n\n        return (\n            <TextField\n                disabled={disabled}\n                error={error}\n                fullWidth\n                helperText={error || helperText}\n                label={label}\n                onBlur={onBlur}\n                onChange={handleChange}\n                placeholder={placeholder}\n                select\n                SelectProps={selectProps}\n                value={valueOrDefault}\n            >\n                {items.map(item => (\n                    <MenuItem key={item.value + item.label} value={item.value}>\n                        <ListItemText\n                            primary={item.label}\n                            secondary={item.helper}\n                        />\n                    </MenuItem>\n                ))}\n            </TextField>\n        )\n    },\n)\n\nexport default _Select\n","import React, { useCallback } from 'react'\n\nimport { Box, Button, ButtonGroup } from '@material-ui/core'\n\nexport default ({ gotoPage, pageSize, setPageSize }) => {\n    const opts = [\n        [10, 10],\n        [25, 25],\n        [50, 50],\n        [100, 100],\n        ['All', 100000],\n    ]\n\n    const _setPageSize = useCallback(\n        size => {\n            setPageSize(size)\n            gotoPage(0)\n        },\n        [setPageSize, gotoPage],\n    )\n\n    return (\n        <Box p={1}>\n            <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n                {opts.map(([label, value]) => (\n                    <Button\n                        onClick={_setPageSize.bind(null, value)}\n                        color={pageSize === value ? 'primary' : undefined}\n                        key={value}\n                    >\n                        {label}\n                    </Button>\n                ))}\n            </ButtonGroup>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport { Box, Typography, IconButton } from '@material-ui/core'\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext'\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore'\n\nexport default ({\n    pageIndex,\n    pageCount,\n    canPreviousPage,\n    previousPage,\n    canNextPage,\n    nextPage,\n    pageSize,\n}) => {\n    return (\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n            <IconButton disabled={!canPreviousPage} onClick={previousPage}>\n                <NavigateBeforeIcon />\n            </IconButton>\n            <Box p={1}>\n                <Typography variant=\"subtitle2\">\n                    Page {pageIndex + 1} of {pageCount}\n                </Typography>\n            </Box>\n            <IconButton disabled={!canNextPage} onClick={nextPage}>\n                <NavigateNextIcon />\n            </IconButton>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Box } from '@material-ui/core'\n\nimport PageSizeSelect from './PageSizeSelect'\nimport PageSelect from './PageSelect'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        [theme.breakpoints.up('md')]: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            flexWrap: 'wrap',\n        },\n    },\n}))\n\nconst Pagination = props => {\n    const classes = useStyles()\n    const {\n        canPreviousPage,\n        canNextPage,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        pageSize,\n        pageIndex,\n    } = props\n\n    return (\n        <Box className={classes.wrapper}>\n            <PageSizeSelect\n                gotoPage={gotoPage}\n                pageSize={pageSize}\n                setPageSize={setPageSize}\n            />\n            <PageSelect\n                pageSize={pageSize}\n                pageIndex={pageIndex}\n                pageCount={pageCount}\n                canPreviousPage={canPreviousPage}\n                previousPage={previousPage}\n                canNextPage={canNextPage}\n                nextPage={nextPage}\n            />\n        </Box>\n    )\n}\n\nexport default Pagination\n","import React, { useMemo } from 'react'\n\nimport { Box, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { motion } from 'framer-motion'\nimport { CSVLink } from 'react-csv'\n\nconst useStyles = makeStyles(theme => ({\n    selectionActions: {\n        height: 0,\n        background: theme.palette.primary.main,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n    },\n    selectionTitle: {\n        color: 'white',\n        fontWeight: 'bold',\n    },\n}))\n\nconst ActionBar = ({ selected, actions = [], enableExport, flatHeaders }) => {\n    const classes = useStyles()\n    const selectionActive = selected.length > 0\n\n    const _actions = useMemo(() => {\n        let base = [...actions]\n        if (enableExport) {\n            base = base.concat({\n                key: 'export',\n                label: (\n                    <CSVLink\n                        style={{ textDecoration: 'none', color: 'inherit' }}\n                        data={selected.map(item => item.values)}\n                        filename=\"export.csv\"\n                        headers={flatHeaders\n                            .map(header => {\n                                if (typeof header.Header === 'string') {\n                                    return {\n                                        label: header.Header,\n                                        key: header.id,\n                                    }\n                                }\n                                // Not a proper header, filter it out\n                                return false\n                            })\n                            .filter(item => item)}\n                    >\n                        Export selected\n                    </CSVLink>\n                ),\n                action: () => {},\n            })\n        }\n        return base\n    }, [actions, enableExport, flatHeaders, selected])\n\n    return (\n        <motion.div\n            className={classes.selectionActions}\n            variants={{\n                visible: {\n                    height: 'auto',\n                },\n                hidden: {\n                    height: 0,\n                },\n            }}\n            animate={selectionActive ? 'visible' : 'hidden'}\n        >\n            <Box\n                p={1}\n                pt={0}\n                display=\"flex\"\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                flexWrap=\"wrap\"\n            >\n                <Box width=\"100%\" mt={1}>\n                    <Typography\n                        variant=\"subtitle2\"\n                        className={classes.selectionTitle}\n                    >\n                        {selected.length} selected\n                    </Typography>\n                </Box>\n                <>\n                    {_actions.map(action => (\n                        <Box key={action.key} mr={1} mt={1}>\n                            <Button\n                                onClick={action.action.bind(null, selected)}\n                                size=\"small\"\n                                variant=\"outlined\"\n                            >\n                                {action.label}\n                            </Button>\n                        </Box>\n                    ))}\n                </>\n            </Box>\n        </motion.div>\n    )\n}\n\nexport default ActionBar\n","import * as FilterTypes from './filterTypes'\n\nexport default {\n    [FilterTypes.SINGLE_SELECT]: (rows, id, filterValue) => {\n        if (!filterValue) return rows\n        return rows.filter(row => row.values[id] === filterValue)\n    },\n    [FilterTypes.MULTIPLE_SELECT]: (rows, id, filterValue) => {\n        if (!Array.isArray(filterValue) || filterValue.length === 0) return rows\n        return rows.filter(row => filterValue.indexOf(row.values[id]) !== -1)\n    },\n    [FilterTypes.CONTAINS_SEARCH]: (rows, id, filterValue) => {\n        return rows.filter(row => row.values[id]?.indexOf(filterValue) !== -1)\n    },\n    [FilterTypes.EXACT_SEARCH]: (rows, id, filterValue) => {\n        return rows.filter(row => row.values[id] === filterValue)\n    },\n}\n","import React, { useCallback, useMemo } from 'react'\nimport {\n    useTable,\n    usePagination,\n    useSortBy,\n    useFilters,\n    useRowSelect,\n    useExpanded,\n} from 'react-table'\n\nimport { makeStyles, darken } from '@material-ui/core/styles'\nimport {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n    TableSortLabel,\n    Checkbox,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport Empty from 'components/generic/Empty'\n\nimport Pagination from './Pagination'\nimport ActionBar from './ActionBar'\nimport FilterFunctions from './filterFunctions'\nimport { Filters, Sorters } from './index'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        width: '100%',\n        overflowX: 'scroll',\n        position: 'relative',\n    },\n    table: {\n        background: theme.palette.background.paper,\n    },\n    tableRow: ({ onRowClick, renderExpanded }) => {\n        const baseStyles = {}\n        const clickableStyles = {\n            cursor: 'pointer',\n            '&:hover': {\n                background: 'rgba(0,0,0,0.05)',\n                transition: 'all 0.2s ease',\n            },\n        }\n        if (\n            typeof onRowClick === 'function' ||\n            typeof renderExpanded === 'function'\n        ) {\n            return {\n                ...baseStyles,\n                ...clickableStyles,\n            }\n        } else {\n            return baseStyles\n        }\n    },\n    tableHead: {\n        background: darken(theme.palette.primary.main, 0.3),\n    },\n    tableHeadRow: {},\n    tableHeadCell: {\n        color: 'white !important',\n        fontWeight: 'bold',\n        fontSize: '12px',\n        lineHeight: '14px',\n        whiteSpace: 'nowrap',\n        transition: 'color 0.2s ease',\n    },\n    tableHeadCellActive: {\n        color: `white !important`,\n    },\n    tableHeadSortIcon: {\n        color: `white !important`,\n    },\n    tableCell: {},\n    tableFooter: {},\n    expandedRow: {\n        background: 'rgba(0,0,0,0.10)',\n    },\n}))\n\nconst _Table = ({\n    columns,\n    data,\n    onRowClick,\n    bulkActions,\n    enablePagination,\n    enableSelection,\n    enableExport,\n    renderExpanded,\n}) => {\n    const classes = useStyles({ onRowClick })\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            ...Filters.Disabled,\n            ...Sorters.Disabled,\n        }),\n        [],\n    )\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        selectedFlatRows,\n        flatHeaders,\n        state: { pageSize, pageIndex },\n    } = useTable(\n        {\n            columns,\n            data,\n            filterTypes: FilterFunctions,\n            defaultColumn,\n            defaultCanFilter: true,\n            initialState: {\n                pageIndex: 0,\n                pageSize: enablePagination ? 10 : 100000,\n            },\n        },\n        useFilters,\n        useSortBy,\n        useExpanded,\n        usePagination,\n        useRowSelect,\n        hooks => {\n            if (enableSelection) {\n                hooks.columns.push(columns => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <div>\n                                <Checkbox\n                                    color=\"primary\"\n                                    {...getToggleAllRowsSelectedProps()}\n                                />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div onClick={e => e.stopPropagation()}>\n                                <Checkbox\n                                    color=\"primary\"\n                                    {...row.getToggleRowSelectedProps()}\n                                />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ])\n            }\n        },\n    )\n\n    const handleRowClick = useCallback(\n        row => {\n            if (typeof renderExpanded === 'function') {\n                row.toggleRowExpanded(!row.isExpanded)\n            }\n\n            if (typeof onRowClick === 'function') {\n                onRowClick(row)\n            }\n        },\n        [onRowClick, renderExpanded],\n    )\n\n    const pagination = enablePagination && data.length > 10 && (\n        <Pagination\n            canPreviousPage={canPreviousPage}\n            canNextPage={canNextPage}\n            pageCount={pageCount}\n            gotoPage={gotoPage}\n            nextPage={nextPage}\n            previousPage={previousPage}\n            setPageSize={setPageSize}\n            pageOptions={pageOptions}\n            pageSize={pageSize}\n            pageIndex={pageIndex}\n            items={data.length}\n        />\n    )\n\n    const isEmpty = !data || data.length === 0\n\n    const columnCount = useMemo(() => {\n        let result = columns.length\n        if (enableSelection) {\n            result += 1\n        }\n\n        return result\n    }, [columns.length, enableSelection])\n\n    if (isEmpty) {\n        return <Empty isEmpty />\n    } else {\n        return (\n            <>\n                {pagination}\n                {enableSelection && (\n                    <ActionBar\n                        selected={selectedFlatRows}\n                        actions={bulkActions}\n                        enableExport={enableExport}\n                        flatHeaders={flatHeaders}\n                    />\n                )}\n                <Box className={classes.wrapper}>\n                    <Table {...getTableProps()} className={classes.table}>\n                        <TableHead className={classes.tableHead}>\n                            {headerGroups.map(headerGroup => (\n                                <TableRow\n                                    {...headerGroup.getHeaderGroupProps()}\n                                    className={classes.tableHeadRow}\n                                >\n                                    {headerGroup.headers.map(column => (\n                                        <TableCell\n                                            {...column.getHeaderProps(\n                                                column.getSortByToggleProps(),\n                                            )}\n                                        >\n                                            <TableSortLabel\n                                                active={\n                                                    column.canSort &&\n                                                    column.isSorted\n                                                }\n                                                direction={\n                                                    column.isSortedDesc\n                                                        ? 'desc'\n                                                        : 'asc'\n                                                }\n                                                classes={{\n                                                    root: classes.tableHeadCell,\n                                                    active: classes.tableHeadCellActive,\n                                                    icon: classes.tableHeadSortIcon,\n                                                }}\n                                                IconComponent={ExpandMoreIcon}\n                                                hideSortIcon\n                                            >\n                                                <Typography variant=\"overline\">\n                                                    {column.render('Header')}\n                                                </Typography>\n                                            </TableSortLabel>\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableHead>\n                        <TableBody {...getTableBodyProps()}>\n                            {page.map((row, i) => {\n                                prepareRow(row)\n                                return [\n                                    <TableRow\n                                        {...row.getRowProps()}\n                                        className={classes.tableRow}\n                                        onClick={handleRowClick.bind(null, row)}\n                                    >\n                                        {row.cells.map(cell => {\n                                            return (\n                                                <TableCell\n                                                    {...cell.getCellProps()}\n                                                    onClick={e => {\n                                                        if (\n                                                            cell.column.id ===\n                                                            'selection'\n                                                        ) {\n                                                            e.stopPropagation()\n                                                        }\n                                                    }}\n                                                >\n                                                    {cell.render('Cell')}\n                                                </TableCell>\n                                            )\n                                        })}\n                                    </TableRow>,\n                                    row.isExpanded && (\n                                        <TableRow\n                                            className={classes.expandedRow}\n                                            key={\n                                                row.getRowProps()?.key +\n                                                '_expanded'\n                                            }\n                                        >\n                                            <TableCell colSpan={columnCount}>\n                                                {renderExpanded(row)}\n                                            </TableCell>\n                                        </TableRow>\n                                    ),\n                                ]\n                            })}\n                        </TableBody>\n                    </Table>\n                </Box>\n                {pagination}\n            </>\n        )\n    }\n}\n\n_Table.defaultProps = {\n    data: [],\n    columns: [],\n    onRowClick: () => {},\n    bulkActions: [],\n    enableExport: true,\n    enablePagination: true,\n    enableSelection: true,\n}\n\nexport default _Table\n","import { memoize } from 'lodash-es'\n\nconst getValues = (rowA, rowB, key, defaultValue) => {\n    return [\n        rowA?.values?.[key] ?? defaultValue,\n        rowB?.values?.[key] ?? defaultValue,\n    ]\n}\n\nexport const Numeric = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, 0)\n    return a - b\n}\n\nexport const Alphabetic = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, '')\n    return memoize((a, b) => {\n        return a.localeCompare(b)\n    })(a, b)\n}\n\nexport const DateTime = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, 0)\n    return memoize((a, b) => {\n        return new Date(a) - new Date(b)\n    })(a, b)\n}\n\nexport const ArrayLength = (rowA, rowB, key) => {\n    const [a, b] = getValues(rowA, rowB, key, [])\n    return memoize((a, b) => {\n        return a.length - b.length\n    })(a, b)\n}\n","import React, { useCallback, useMemo } from 'react'\nimport { groupBy } from 'lodash-es'\nimport { TextField } from '@material-ui/core'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst Component = ({ column }) => {\n    const { filterValue, preFilteredRows, setFilter, id } = column\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    const options = useMemo(() => {\n        const grouped = groupBy(preFilteredRows, row => row.values[id])\n        return Object.keys(grouped).map(value => ({\n            value,\n            label: `${value} (${grouped[value].length})`,\n        }))\n    }, [preFilteredRows, id])\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            select\n            helperText={'Choose one'}\n            value={filterValue}\n            onChange={handleChange}\n            margin=\"dense\"\n            SelectProps={{\n                native: true,\n            }}\n            variant=\"filled\"\n        >\n            {options.map(({ value, label }) => (\n                <option key={value} value={value}>\n                    {label}\n                </option>\n            ))}\n        </TextField>\n    )\n}\n\nconst SingleSelectFilter = {\n    Filter: Component,\n    filter: FilterTypes.SINGLE_SELECT,\n}\n\nexport default SingleSelectFilter\n","export const CONTAINS_SEARCH = 'contains-search'\nexport const FUZZY_SEARCH = 'fuzzy-search'\nexport const EXACT_SEARCH = 'exact-search'\nexport const SINGLE_SELECT = 'single-select'\nexport const MULTIPLE_SELECT = 'multiple-select'\n","import React, { useCallback, useMemo } from 'react'\nimport { groupBy } from 'lodash-es'\nimport { TextField } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst useStyles = makeStyles(theme => ({\n    option: {\n        padding: theme.spacing(1),\n    },\n    optionSelected: {\n        padding: theme.spacing(1),\n        background: theme.palette.theme_lightgray.main,\n    },\n}))\n\nconst Component = ({ column }) => {\n    const classes = useStyles()\n    const { filterValue, preFilteredRows, setFilter, id } = column\n    const selectedValues = filterValue || []\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    const options = useMemo(() => {\n        const grouped = groupBy(preFilteredRows, row => row.values[id])\n        return Object.keys(grouped).map(value => ({\n            value,\n            label: `${value} (${grouped[value].length})`,\n        }))\n    }, [preFilteredRows, id])\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            select\n            helperText={'Choose one or more'}\n            value={selectedValues}\n            onChange={handleChange}\n            SelectProps={{\n                multiple: true,\n            }}\n            variant=\"filled\"\n        >\n            {options.map(({ value, label }) => (\n                <option\n                    className={\n                        selectedValues.indexOf(value) !== -1\n                            ? classes.optionSelected\n                            : classes.option\n                    }\n                    key={value}\n                    value={value}\n                >\n                    {label}\n                </option>\n            ))}\n        </TextField>\n    )\n}\n\nconst MultipleSelectFilter = {\n    Filter: Component,\n    filter: FilterTypes.MULTIPLE_SELECT,\n}\n\nexport default MultipleSelectFilter\n","import Table from './Table'\nimport * as SortFunctions from './sortFunctions'\nimport SingleSelectFilter from './filters/SingleSelectFilter'\nimport MultipleSelectFilter from './filters/MultipleSelectFilter'\nimport ContainsSearchFilter from './filters/ContainsSearch'\n\nconst Filters = {\n    SingleSelect: SingleSelectFilter,\n    MultipleSelect: MultipleSelectFilter,\n    ContainsSearch: ContainsSearchFilter,\n    Disabled: {\n        Filter: () => null,\n        filter: null,\n        canFilter: false,\n    },\n}\n\nconst Sorters = {\n    Numeric: {\n        sortType: SortFunctions.Numeric,\n        disableSortBy: false,\n    },\n    Alphabetic: {\n        sortType: SortFunctions.Alphabetic,\n        disableSortBy: false,\n    },\n    DateTime: {\n        sortType: SortFunctions.DateTime,\n        disableSortBy: false,\n    },\n    ArrayLength: {\n        sortType: SortFunctions.ArrayLength,\n        disableSortBy: false,\n    },\n    Disabled: {\n        disableSortBy: true,\n    },\n    Default: {\n        disableSortBy: false,\n    },\n}\n\nexport { Table, Filters, Sorters }\n","import React, { useCallback } from 'react'\nimport { TextField } from '@material-ui/core'\n\nimport * as FilterTypes from '../filterTypes'\n\nconst Component = ({ column }) => {\n    const { filterValue, setFilter } = column\n    const handleChange = useCallback(\n        e => {\n            setFilter(e.target.value)\n        },\n        [setFilter],\n    )\n\n    return (\n        <TextField\n            style={{ width: '100%' }}\n            helperText={'Contains value'}\n            value={filterValue}\n            onChange={handleChange}\n            margin=\"dense\"\n            variant=\"filled\"\n        />\n    )\n}\n\nconst ContainsSearchFilter = {\n    Filter: Component,\n    filter: FilterTypes.CONTAINS_SEARCH,\n}\n\nexport default ContainsSearchFilter\n","import React, { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { makeStyles, lighten } from '@material-ui/core/styles'\nimport { Chip } from '@material-ui/core'\n\nimport { RegistrationStatuses } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    root: ({ color }) => ({\n        backgroundColor: lighten(color, 0.33),\n        borderColor: color,\n        borderWidth: 2,\n    }),\n    label: ({ color }) => ({\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    }),\n}))\n\nconst propTypes = {\n    status: PropTypes.oneOf(RegistrationStatuses.ids).isRequired,\n    hideSoftStatuses: PropTypes.bool,\n}\n\nconst defaultProps = {\n    hideSoftStatuses: false,\n}\n\nconst StatusBadge = ({ status, hideSoftStatuses }) => {\n    const params = useMemo(() => {\n        if (hideSoftStatuses) {\n            switch (status) {\n                case RegistrationStatuses.asObject.softAccepted.id:\n                case RegistrationStatuses.asObject.softRejected.id:\n                    return RegistrationStatuses.asObject.pending\n                default:\n                    break\n            }\n        }\n        return RegistrationStatuses.asObject[status]\n    }, [hideSoftStatuses, status])\n    const classes = useStyles(params)\n    if (!params) return <Chip size=\"small\" label=\"???\" />\n    return (\n        <Chip\n            classes={classes}\n            variant=\"outlined\"\n            size=\"small\"\n            label={params.label}\n        />\n    )\n}\n\nStatusBadge.propTypes = propTypes\nStatusBadge.defaultProps = defaultProps\n\nexport default StatusBadge\n","import React from 'react'\n\nimport Select from 'components/inputs/Select'\n\nconst EventTagsSelect = ({\n    value,\n    onChange,\n    tags = [],\n    placeholder = 'Select tags',\n}) => {\n    return (\n        <Select\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            isMulti\n            options={tags.map(tag => ({\n                value: tag.label,\n                label: tag.label,\n            }))}\n        />\n    )\n}\n\nexport default EventTagsSelect\n","import React from 'react'\nimport {\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    Avatar,\n} from '@material-ui/core'\n\nconst UserListItem = ({\n    user,\n    selectable = false,\n    selected = false,\n    onSelect = () => {},\n}) => {\n    const userName = user ? `${user.firstName} ${user.lastName}` : ''\n    const userEmail = user ? user.email : ''\n\n    return (\n        <ListItem button={selectable} onClick={onSelect} selected={selected}>\n            {user ? (\n                <>\n                    <ListItemAvatar>\n                        <Avatar alt={userName} src={user ? user.avatar : ''} />\n                    </ListItemAvatar>\n                    <ListItemText primary={userName} secondary={userEmail} />\n                </>\n            ) : (\n                <ListItemText primary=\"No one\" />\n            )}\n        </ListItem>\n    )\n}\n\nexport default UserListItem\n","import React from 'react'\n\nimport { RegistrationStatuses } from '@hackjunction/shared'\nimport Select from 'components/inputs/Select'\n\nconst RegistrationStatusSelect = ({\n    value,\n    onChange,\n    placeholder = 'Select status',\n    selectProps,\n    allowRestricted = false,\n}) => {\n    return (\n        <Select\n            placeholder={placeholder}\n            value={value}\n            onChange={onChange}\n            options={RegistrationStatuses.asArray.map(status => ({\n                label: status.label,\n                value: status.id,\n            }))}\n        />\n    )\n}\n\nexport default RegistrationStatusSelect\n","import React, { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Dialog,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Button from 'components/generic/Button'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useFormField } from 'hooks/formHooks'\nimport EmailService from 'services/email'\nimport { useTranslation } from 'react-i18next'\n\nexport default ({ visible, userIds = [], onClose }) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const user = useSelector(UserSelectors.userProfile)\n    const event = useSelector(OrganiserSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n    const headerImage = useFormField('')\n    const { t } = useTranslation()\n    const subject = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return t('Subject_required_')\n        }\n        if (value.length > 50) {\n            return t('Subject_most_chars_')\n        }\n\n        return\n    })\n    const subtitle = useFormField('')\n    const body = useFormField('', value => {\n        if (!body || body.length === 0) {\n            return t('Body_required_')\n        }\n\n        if (body.length > 1000) {\n            return t('Body_most_chars_')\n        }\n\n        return\n    })\n    const messageId = useFormField('')\n    const ctaText = useFormField('')\n    const ctaLink = useFormField(\n        '',\n        useCallback(\n            value => {\n                if (ctaText.value && ctaText.value.length > 0) {\n                    if (!value || value.length === 0) {\n                        return t('Call_to_action_required_')\n                    }\n                    if (value.indexOf('http') !== 0) {\n                        return t('Call_to_action_valid_')\n                    }\n                }\n                return\n            },\n            [ctaText.value, t],\n        ),\n    )\n\n    const fields = [\n        headerImage,\n        subject,\n        subtitle,\n        body,\n        messageId,\n        ctaText,\n        ctaLink,\n    ]\n\n    const params = {\n        subject: subject.value,\n        subtitle: subtitle.value,\n        header_image: headerImage.value,\n        body: body.value,\n        cta_text: ctaText.value,\n        cta_link: ctaLink.value,\n    }\n\n    const validate = useCallback(() => {\n        const errors = fields\n            .map(field => {\n                return field.validate()\n            })\n            .filter(error => typeof error !== 'undefined')\n\n        if (errors.length > 0) {\n            errors.forEach(error => {\n                dispatch(SnackbarActions.error(error))\n            })\n            return false\n        }\n        return true\n    }, [dispatch, fields])\n\n    const handleTestEmail = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        EmailService.sendPreviewEmail(idToken, event.slug, user.email, params)\n            .then(() => {\n                dispatch(\n                    SnackbarActions.success(\n                        t('Test_email_sent_', { user: user.email }),\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n        return null\n    }, [validate, idToken, event.slug, user.email, params, dispatch, t])\n\n    const handleConfirm = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        EmailService.sendBulkEmail(\n            idToken,\n            event.slug,\n            userIds,\n            params,\n            messageId.value,\n        )\n            .then(data => {\n                dispatch(\n                    SnackbarActions.success(t(''), { autoHideDuration: 5000 }),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n                onClose()\n            })\n    }, [\n        validate,\n        idToken,\n        event.slug,\n        userIds,\n        params,\n        messageId.value,\n        dispatch,\n        onClose,\n        t,\n    ])\n\n    if (!userIds.length) return null\n\n    return (\n        <Dialog fullScreen open={visible} onClose={onClose}>\n            <DialogContent>\n                <PageWrapper loading={loading} wrapContent={false}>\n                    <Container center>\n                        <ConfirmDialog\n                            open={confirmModalOpen}\n                            title={t('Sure_')}\n                            message={t('Will_send_to_', {\n                                amount: userIds.length,\n                            })}\n                            onClose={setConfirmModalOpen}\n                            onOk={handleConfirm}\n                        />\n                        <PageHeader\n                            heading=\"Bulk email\"\n                            subheading={\n                                userIds.length + ' selected participants'\n                            }\n                        />\n                        <Typography variant=\"body1\" paragraph>\n                            {t('Send_email_selected_')}\n                        </Typography>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={headerImage.value}\n                                    onChange={headerImage.setValue}\n                                    error={headerImage.error}\n                                    rawOnChange\n                                    label={t('URL_header_')}\n                                    helperText={t('URL_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subject.value}\n                                    onChange={subject.setValue}\n                                    error={subject.error}\n                                    rawOnChange\n                                    label={t('Subject_')}\n                                    helperText={t('Subect_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subtitle.value}\n                                    onChange={subtitle.setValue}\n                                    error={subtitle.error}\n                                    rawOnChange\n                                    label={t('Subtitle_')}\n                                    helperText={t('Subtitle_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextAreaInput\n                                    value={body.value}\n                                    textarea\n                                    onChange={body.setValue}\n                                    rawOnChange\n                                    label={t('Message_body_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={messageId.value}\n                                    onChange={messageId.setValue}\n                                    error={messageId.error}\n                                    rawOnChange\n                                    label={t('Unique_message_id')}\n                                    helperText={t('Enter_unique_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaText.value}\n                                    onChange={ctaText.setValue}\n                                    error={ctaText.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_')}\n                                    helperText={t('Call_to_action_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaLink.value}\n                                    onChange={ctaLink.setValue}\n                                    error={ctaLink.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_link_')}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </PageWrapper>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Box p={1} />\n                <Button onClick={handleTestEmail}>{t('Send_yourself_')}</Button>\n                <Box p={1} />\n                <Button\n                    loading={loading}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={setConfirmModalOpen}\n                >\n                    {t('Send_to_recipients_', { amount: userIds.length })}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport UserListItem from './index'\n\nexport default ({ userId }) => {\n    const organisersMap = useSelector(OrganiserSelectors.organisersMap)\n    return <UserListItem user={organisersMap[userId]} />\n}\n","import React, { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n    Box,\n    Typography,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Dialog,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\nimport Rating from '@material-ui/lab/Rating'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport OrganiserSelectModal from 'components/modals/OrganiserSelectModal'\nimport OrganiserListItem from 'components/generic/UserListItem/OrganiserListItem'\nimport EventTagsSelect from 'components/inputs/EventTagsSelect'\nimport RegistrationStatusSelect from 'components/inputs/RegistrationStatusSelect'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Button from 'components/generic/Button'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useFormField } from 'hooks/formHooks'\nimport { useTranslation } from 'react-i18next'\nexport default ({ visible, userIds = [], onClose }) => {\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const event = useSelector(OrganiserSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [organiserModal, setOrganiserModal] = useState(false)\n    const [confirmDialog, setConfirmDialog] = useState(false)\n    const rating = useFormField(null)\n    const assignedTo = useFormField(null)\n    const tags = useFormField([])\n    const status = useFormField('pending')\n\n    const [expandedIds, setExpandedIds] = useState([])\n\n    const isExpanded = useCallback(\n        panel => {\n            return expandedIds.indexOf(panel) !== -1\n        },\n        [expandedIds],\n    )\n\n    const toggleExpanded = panel => {\n        if (isExpanded(panel)) {\n            setExpandedIds(expandedIds.filter(id => id !== panel))\n        } else {\n            setExpandedIds(expandedIds.concat(panel))\n        }\n    }\n\n    const reset = useCallback(() => {\n        rating.reset()\n        assignedTo.reset()\n        tags.reset()\n        status.reset()\n        setLoading(false)\n        setExpandedIds([])\n    }, [rating, assignedTo, tags, status])\n\n    const handleClose = useCallback(() => {\n        reset()\n        onClose()\n    }, [reset, onClose])\n\n    const getEdits = useCallback(() => {\n        const edits = {}\n        if (isExpanded('rating')) edits.rating = rating.value\n        if (isExpanded('assignedTo')) edits.assignedTo = assignedTo.value\n        if (isExpanded('tags')) edits.tags = tags.value\n        if (isExpanded('status')) edits.status = status.value\n        return edits\n    }, [rating, assignedTo, tags, status, isExpanded])\n\n    const handleSubmit = useCallback(() => {\n        setLoading(true)\n        const edits = getEdits()\n\n        dispatch(\n            OrganiserActions.bulkEditRegistrations(userIds, edits, event.slug),\n        )\n            .then(() => {\n                dispatch(\n                    SnackbarActions.success(\n                        `Edited ${userIds.length} registrations`,\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n                handleClose()\n            })\n    }, [getEdits, dispatch, userIds, event.slug, handleClose, t])\n\n    if (!userIds.length) return null\n    return (\n        <Dialog fullScreen open={visible} onClose={handleClose}>\n            <PageWrapper loading={loading} wrapContent={false}>\n                <DialogContent>\n                    <ConfirmDialog\n                        open={confirmDialog}\n                        title=\"Are you sure?\"\n                        message={`This will apply your configured changes to ${userIds.length} registrations, and you won't be able to revert them. Please make sure you are not making any unintended changes.`}\n                        onClose={() => setConfirmDialog(false)}\n                        onOk={handleSubmit}\n                    />\n                    <Container center>\n                        <PageHeader\n                            heading=\"Bulk edit\"\n                            subheading={\n                                userIds.length + ' selected participants'\n                            }\n                        />\n                        <Typography variant=\"body1\" paragraph>\n                            {t('Edit_selected_registrations_')}\n                            {t('un_expanded_')}\n                            {t('Edit_selected_registration_cont_')}\n                        </Typography>\n                        <ExpansionPanel\n                            expanded={isExpanded('rating')}\n                            onChange={() => toggleExpanded('rating')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Rating_')}\n                                    </Typography>\n                                    {isExpanded('rating') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {rating.value\n                                                ? 'Set rating to ' +\n                                                  rating.value\n                                                : 'Clear rating'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <Rating\n                                    value={rating.value}\n                                    onChange={(e, num) => rating.setValue(num)}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('assignedTo')}\n                            onChange={() => toggleExpanded('assignedTo')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Assigned to')}\n                                    </Typography>\n                                    {isExpanded('assignedTo') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {assignedTo.value\n                                                ? 'Change assigned to'\n                                                : 'Clear assigned to'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <OrganiserSelectModal\n                                    open={organiserModal}\n                                    onClose={setOrganiserModal}\n                                    onSelect={value =>\n                                        assignedTo.setValue(value.userId)\n                                    }\n                                    onClear={assignedTo.setValue}\n                                />\n                                <Box display=\"flex\" flexDirection=\"column\">\n                                    <Box mb={1} width=\"100%\">\n                                        <OrganiserListItem\n                                            userId={\n                                                assignedTo\n                                                    ? assignedTo.value\n                                                    : null\n                                            }\n                                        />\n                                    </Box>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => setOrganiserModal(true)}\n                                    >\n                                        {t('Change_')}\n                                    </Button>\n                                </Box>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('tags')}\n                            onChange={() => toggleExpanded('tags')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Tags_')}\n                                    </Typography>\n                                    {isExpanded('tags') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {tags.value && tags.value.length\n                                                ? 'Set tags to ' +\n                                                  tags.value.join(', ')\n                                                : 'Clear tags'}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <EventTagsSelect\n                                    value={tags.value}\n                                    onChange={tags.setValue}\n                                    tags={event.tags}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                        <ExpansionPanel\n                            expanded={isExpanded('status')}\n                            onChange={() => toggleExpanded('status')}\n                        >\n                            <ExpansionPanelSummary>\n                                <Box\n                                    flex=\"1\"\n                                    display=\"flex\"\n                                    flexDirection=\"row\"\n                                    justifyContent=\"space-between\"\n                                >\n                                    <Typography variant=\"subtitle1\">\n                                        {t('Status_')}\n                                    </Typography>\n                                    {isExpanded('status') ? (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"secondary\"\n                                        >\n                                            {t('Set_status_', {\n                                                value: status.value,\n                                            })}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            variant=\"button\"\n                                            color=\"primary\"\n                                        >\n                                            {t('Leave_unchanged_')}\n                                        </Typography>\n                                    )}\n                                </Box>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <RegistrationStatusSelect\n                                    value={status.value}\n                                    onChange={status.setValue}\n                                />\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    </Container>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Cancel</Button>\n                    <Button\n                        onClick={() => setConfirmDialog(true)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={expandedIds.length === 0}\n                    >\n                        {expandedIds.length === 0\n                            ? 'Expand panels to make edits'\n                            : ` Apply edits to ${userIds.length} registrations`}\n                    </Button>\n                </DialogActions>\n            </PageWrapper>\n        </Dialog>\n    )\n}\n","import React from 'react'\n\nimport HyperModal from 'react-hyper-modal'\nimport clsx from 'clsx'\nimport { Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        display: 'flex',\n        zIndex: 2000,\n    },\n    wrapperPadded: {\n        padding: theme.spacing(2),\n    },\n    content: {\n        background: '#ffffff',\n        width: '100% !important',\n        maxWidth: '600px',\n        zIndex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'stretch',\n    },\n    contentMed: {\n        maxWidth: '900px',\n    },\n    contentMax: {\n        maxWidth: 'none',\n        height: '100% !important',\n        borderRadius: '0 !important',\n    },\n    header: {\n        padding: theme.spacing(3),\n        textAlign: 'center',\n    },\n    inner: {\n        padding: '1rem',\n        flex: 1,\n        overflow: 'auto',\n    },\n}))\n\nconst GenericModal = ({\n    title,\n    isOpen,\n    handleClose,\n    size,\n    children,\n    footer = null,\n}) => {\n    const classes = useStyles()\n    return (\n        <HyperModal\n            isOpen={isOpen}\n            requestClose={handleClose}\n            classes={{\n                contentClassName: clsx({\n                    [classes.content]: true,\n                    [classes.contentMed]: size === 'med',\n                    [classes.contentMax]: size === 'max',\n                }),\n                wrapperClassName: clsx({\n                    [classes.wrapper]: true,\n                    [classes.wrapperPadded]: size !== 'max',\n                }),\n            }}\n        >\n            {title && (\n                <Box className={classes.header}>\n                    <Typography variant=\"h6\">{title}</Typography>\n                </Box>\n            )}\n            <Box className={classes.inner}>{children}</Box>\n            {footer}\n        </HyperModal>\n    )\n}\n\nexport default GenericModal\n","import React, { useState, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Box, List, Button } from '@material-ui/core'\n\nimport Modal from 'components/generic/Modal'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport { useTranslation } from 'react-i18next'\nimport UserListItem from 'components/generic/UserListItem'\n\nexport default ({ open, onClose, onClear, onSelect }) => {\n    const organisers = useSelector(OrganiserSelectors.organisers)\n    const [selected, setSelected] = useState()\n    const { t } = useTranslation()\n    const handleClear = useCallback(() => {\n        onClose()\n        onClear()\n    }, [onClose, onClear])\n    const handleSubmit = useCallback(() => {\n        onClose()\n        onSelect(selected)\n    }, [selected, onClose, onSelect])\n    return (\n        <Modal\n            isOpen={open}\n            handleClose={onClose}\n            title=\"Select a user\"\n            footer={\n                <Box\n                    p={1}\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                >\n                    <Button fullWidth onClick={handleClear}>\n                        {t('Clear_selection_')}\n                    </Button>\n                    <Box mt={1} />\n                    <Button\n                        onClick={handleSubmit}\n                        disabled={!selected}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        {selected\n                            ? `${selected.firstName} ${selected.lastName}`\n                            : 'Select a user'}\n                    </Button>\n                </Box>\n            }\n        >\n            <List>\n                {organisers.map(organiser => (\n                    <UserListItem\n                        selectable\n                        onSelect={() => setSelected(organiser)}\n                        selected={\n                            selected && selected.userId === organiser.userId\n                        }\n                        key={organiser.userId}\n                        user={organiser}\n                    />\n                ))}\n            </List>\n        </Modal>\n    )\n}\n","import Typography from '@material-ui/core/Typography'\nimport Scoring from 'pages/_dashboard/slug/rating/Scoring'\nimport React from 'react'\nimport LoadingSpinner from './loadingCircle'\n\nconst RenderContent = ({\n    projectsByRating,\n    setSelected,\n    user,\n    scores,\n    event,\n    ranked,\n}) => {\n    if (!projectsByRating) return <LoadingSpinner />\n    if (projectsByRating.length === 0)\n        return ranked ? (\n            <div>\n                The reviewing process is currently underway. Upon its\n                conclusion, the list of winners will be showcased on this page.\n            </div>\n        ) : (\n            <div>\n                At present, no projects have been submitted. Please revisit at a\n                later time to assess and rate your preferred projects.\n            </div>\n        )\n    return (\n        <div>\n            {projectsByRating.map((project, index) => {\n                return (\n                    <div\n                        onClick={() => {\n                            setSelected(project)\n                        }}\n                        className=\"lg:flex hover:cursor-pointer items-center justify-between bg-[#A9EFF2] text-gray-800 w-full mb-4 p-4 rounded-lg \"\n                    >\n                        <div className=\"flex flex-col mb-2 lg:mb-0 justify-center items-center lg:flex-row\">\n                            {ranked && (\n                                <div className=\"mr-8 text-xl font-bold\">\n                                    {index + 1 + ')'}\n                                </div>\n                            )}\n                            <img\n                                src={\n                                    (project.images[0] &&\n                                        project.images[0].url) ||\n                                    'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg'\n                                }\n                                alt=\"project\"\n                                className=\"w-full max-w-md lg:w-32 lg:h-32 mr-0 lg:mr-2 object-cover rounded-md\"\n                            />\n                            <div className=\"flex flex-col justify-start mb-2 lg:mb-0\">\n                                <Typography variant=\"body1\">\n                                    <h3 className=\"text-gray-800 text-3xl text-left\">\n                                        {project.name}\n                                    </h3>\n                                </Typography>\n                                <Typography variant=\"body1\">\n                                    <h3 className=\" text-gray-800 text-lg font-bold\">\n                                        {project.punchline}\n                                    </h3>\n                                </Typography>\n                                <Typography variant=\"body1\">\n                                    <h3 className=\" text-gray-800 text-md text-left\">\n                                        {project.description}\n                                    </h3>\n                                </Typography>\n                                {/* <Typography variant=\"body1\">\n                              {project.rating}\n                          </Typography> */}\n                                <Typography variant=\"body1\">\n                                    <div className=\"flex text-left\">\n                                        <div className=\"mr-2\">\n                                            Technologies:\n                                        </div>\n                                        {project.technologies.map(\n                                            (tech, index) => {\n                                                if (\n                                                    index ===\n                                                    project.technologies\n                                                        .length -\n                                                        1\n                                                ) {\n                                                    return (\n                                                        <div className=\"mr-2\">\n                                                            {tech}\n                                                        </div>\n                                                    )\n                                                }\n                                                return (\n                                                    <div className=\"mr-2\">\n                                                        {tech},\n                                                    </div>\n                                                )\n                                            },\n                                        )}\n                                    </div>\n                                </Typography>\n                            </div>\n                        </div>\n                        <Scoring\n                            project={project}\n                            user={user}\n                            scores={scores}\n                            slug={event.slug}\n                            event={event}\n                        />\n                    </div>\n                )\n            })}{' '}\n        </div>\n    )\n}\n\nexport default RenderContent\n","import React, { useMemo, useEffect, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch } from 'react-redux'\nimport { findIndex } from 'lodash-es'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport Container from 'components/generic/Container/index'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport LockIcon from '@material-ui/icons/Lock'\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace'\nimport {\n    Drawer,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Hidden,\n    IconButton,\n    Box,\n} from '@material-ui/core'\nimport { push } from 'connected-react-router'\n\nconst SIDEBAR_WIDTH = 300\n\nconst useStyles = makeStyles(theme => ({\n    drawer: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        [theme.breakpoints.up('md')]: {\n            width: SIDEBAR_WIDTH,\n            flexShrink: 0,\n        },\n    },\n    drawerToggle: {\n        padding: '10px',\n        position: 'fixed',\n        top: theme.spacing(1),\n        left: theme.spacing(1),\n        background: '#fbfbfb',\n        zIndex: 100,\n    },\n    drawerToggleDesktop: {\n        padding: '10px',\n        position: 'fixed',\n        top: theme.spacing(1),\n        left: ({ desktopOpen }) =>\n            desktopOpen ? SIDEBAR_WIDTH + theme.spacing(1) : theme.spacing(1),\n        background: '#fbfbfb',\n        zIndex: 100,\n        transition: 'left 225ms cubic-bezier(0, 0, 0.2, 1) 0ms',\n    },\n    content: {\n        flexGrow: 1,\n        position: 'relative',\n        transition: 'margin-left 225ms cubic-bezier(0, 0, 0.2, 1) 0ms',\n        [theme.breakpoints.up('md')]: {\n            marginLeft: ({ desktopOpen }) => (desktopOpen ? SIDEBAR_WIDTH : 0),\n        },\n    },\n    drawerPaper: {\n        width: SIDEBAR_WIDTH,\n        maxWidth: '80%',\n        background: 'black',\n        zIndex: 998,\n    },\n\n    listItem: {\n        color: 'rgba(255,255,255,0.6)',\n    },\n    listItemSelected: {\n        color: 'white',\n    },\n    listItemTextPrimary: {\n        color: 'inherit',\n    },\n    listItemTextSecondary: {\n        color: 'inherit',\n    },\n    listItemIcon: {\n        color: 'inherit',\n    },\n    pageWrapper: {\n        padding: 0,\n        [theme.breakpoints.up('md')]: {\n            padding: theme.spacing(2),\n        },\n    },\n    pageWrapperInner: {\n        padding: theme.spacing(2),\n        maxWidth: '1400px',\n    },\n}))\n\nexport default React.memo(\n    ({\n        topContent,\n        sidebarTopContent,\n        baseRoute,\n        location,\n        routes: _routes,\n    }) => {\n        const dispatch = useDispatch()\n        const routes = _routes.filter(route => !route.hidden)\n\n        const activeIndex = useMemo(() => {\n            const relativePath = location.pathname.replace(baseRoute, '')\n            const idx = findIndex(routes, item => {\n                if (item.exact) {\n                    return relativePath === item.path\n                } else {\n                    return relativePath.indexOf(item.path) !== -1\n                }\n            })\n\n            return idx\n        }, [baseRoute, location.pathname, routes])\n\n        const pushRoute = useCallback(\n            path => {\n                dispatch(push(`${baseRoute}${path}`))\n            },\n            [baseRoute, dispatch],\n        )\n\n        useEffect(() => {\n            if (activeIndex === -1) {\n                pushRoute(routes[0].path)\n            }\n        }, [routes, activeIndex, pushRoute])\n\n        useEffect(() => {\n            setMobileOpen(false)\n        }, [activeIndex])\n\n        const safeIndex = activeIndex === -1 ? 0 : activeIndex\n\n        const [mobileOpen, setMobileOpen] = React.useState(false)\n        const [desktopOpen, setDesktopOpen] = React.useState(true)\n\n        const classes = useStyles({ desktopOpen })\n\n        const handleDrawerToggle = () => {\n            setMobileOpen(!mobileOpen)\n        }\n\n        const handleDrawerToggleDesktop = () => {\n            setDesktopOpen(!desktopOpen)\n        }\n\n        const drawerContent = (\n            <>\n                <Box p={2}>{sidebarTopContent}</Box>\n                <List>\n                    {routes\n                        .filter(route => !route.hidden)\n                        .map((route, index) => {\n                            return (\n                                <ListItem\n                                    disabled={route.locked}\n                                    button\n                                    key={route.path}\n                                    selected={index === safeIndex}\n                                    classes={{\n                                        root: classes.listItem,\n                                        selected: classes.listItemSelected,\n                                    }}\n                                    onClick={() => pushRoute(route.path)}\n                                >\n                                    <ListItemIcon\n                                        className={classes.listItemIcon}\n                                    >\n                                        {route.locked ? (\n                                            <LockIcon />\n                                        ) : (\n                                            route.icon\n                                        )}\n                                    </ListItemIcon>\n                                    <ListItemText\n                                        classes={{\n                                            primary:\n                                                classes.listItemTextPrimary,\n                                            secondary:\n                                                classes.listItemTextSecondary,\n                                        }}\n                                        primary={route.label}\n                                        secondary={\n                                            route.locked\n                                                ? route.lockedDescription\n                                                : ''\n                                        }\n                                    />\n                                </ListItem>\n                            )\n                        })}\n                </List>\n            </>\n        )\n\n        return (\n            <div className={classes.root}>\n                <Hidden mdUp implementation=\"css\">\n                    <IconButton\n                        onClick={handleDrawerToggle}\n                        className={classes.drawerToggle}\n                        aria-label=\"toggle drawer\"\n                    >\n                        <MenuIcon fontSize=\"large\" />\n                    </IconButton>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <IconButton\n                        onClick={handleDrawerToggleDesktop}\n                        className={classes.drawerToggleDesktop}\n                        aria-label=\"toggle drawer desktop\"\n                    >\n                        {desktopOpen ? (\n                            <KeyboardBackspaceIcon />\n                        ) : (\n                            <MenuIcon fontSize=\"large\" />\n                        )}\n                    </IconButton>\n                </Hidden>\n                <Hidden mdUp implementation=\"css\">\n                    <nav className={classes.drawer}>\n                        <Drawer\n                            variant=\"temporary\"\n                            anchor=\"left\"\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            ModalProps={{\n                                keepMounted: true, // Better open performance on mobile.\n                            }}\n                        >\n                            {drawerContent}\n                        </Drawer>\n                    </nav>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <nav className={classes.drawerDesktop}>\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            variant=\"persistent\"\n                            anchor=\"left\"\n                            open={desktopOpen}\n                            onClose={handleDrawerToggleDesktop}\n                        >\n                            {drawerContent}\n                        </Drawer>\n                    </nav>\n                </Hidden>\n                <main className={classes.content}>\n                    {topContent}\n                    <Container\n                        className={classes.pageWrapperInner}\n                        wrapperClass={classes.pageWrapper}\n                    >\n                        <Switch>\n                            {routes.map(\n                                (\n                                    {\n                                        key,\n                                        path,\n                                        hidden,\n                                        component,\n                                        exact = false,\n                                        locked,\n                                    },\n                                    index,\n                                ) => {\n                                    if (hidden || locked) {\n                                        return null\n                                    } else {\n                                        return (\n                                            <Route\n                                                key={key}\n                                                exact={exact}\n                                                path={`${baseRoute}${path}`}\n                                                component={component}\n                                            />\n                                        )\n                                    }\n                                },\n                            )}\n                            <Redirect to={baseRoute} />\n                        </Switch>\n                    </Container>\n                </main>\n            </div>\n        )\n    },\n)\n","import React from 'react'\nimport UserMenu from 'components/UserMenu'\nimport LanguageMenu from 'components/LanguageMenu'\n\nimport { Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        width: '100%',\n        height: '78px',\n        background: 'white',\n        padding: theme.spacing(0, 2),\n    },\n    inner: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        margin: '0',\n        height: '100%',\n    },\n    text: {\n        marginRight: theme.spacing(1),\n        textTransform: 'uppercase',\n        color: 'black',\n        alignSelf: 'flex-end',\n        display: 'none',\n    },\n}))\n\nconst BasicNavBar = ({ text }) => {\n    const classes = useStyles()\n    return (\n        <div className={classes.wrapper}>\n            <div className={classes.inner}>\n                <Typography variant=\"button\" style={{ paddingLeft: '50px' }}>\n                    {text}\n                </Typography>\n                <div className={classes.inner}>\n                    <UserMenu />\n                    {/* <LanguageMenu /> */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BasicNavBar\n","import React, { useCallback, useState } from 'react'\n\nimport {\n    Box,\n    Typography,\n    CircularProgress,\n    IconButton,\n    Tooltip,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Upload } from 'antd'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { useTranslation } from 'react-i18next'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nconst useStyles = makeStyles(theme => ({\n    uploader: {\n        background: 'gray',\n        width: '100%',\n        cursor: 'pointer',\n    },\n    uploaderInner: {\n        width: '100%',\n        height: '100px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: theme.spacing(3),\n    },\n    uploadText: {\n        color: 'white',\n        textAlign: 'center',\n    },\n}))\n\nexport default ({ value, onChange, uploadUrl, resizeMode = 'contain' }) => {\n    const { t } = useTranslation()\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [loading, setLoading] = useState(false)\n    const classes = useStyles()\n\n    const beforeUpload = useCallback(\n        file => {\n            const isPDF = file.type === 'application/pdf'\n            if (!isPDF) {\n                dispatch(SnackbarActions.show(t('Upload_pdf_')))\n            }\n            const isLt10M = file.size / 1024 / 1024 < 10\n            if (!isLt10M) {\n                dispatch(SnackbarActions.show(t('Upload_size_ten_')))\n            }\n            return isPDF && isLt10M\n        },\n        [dispatch, t],\n    )\n\n    const handleRemove = useCallback(() => {\n        onChange()\n    }, [onChange])\n\n    const handleChange = useCallback(\n        info => {\n            if (info.file.status === 'uploading') {\n                setLoading(true)\n                return\n            }\n            if (info.file.status === 'done') {\n                onChange(info.file.response)\n                setLoading(false)\n            }\n\n            if (info.file.status === 'error') {\n                const message =\n                    info?.file?.response?.message ?? t('Something_went_wrong_')\n                dispatch(SnackbarActions.error(message))\n                setLoading(false)\n            }\n        },\n        [dispatch, onChange, t],\n    )\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n            {value && value.url ? (\n                <Box\n                    flex=\"1\"\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    alignItems=\"flex-start\"\n                >\n                    <Box flex=\"1\">\n                        <a href={value.url}>{value.url}</a>\n                    </Box>\n                    <Box ml={2}>\n                        <Tooltip title=\"Remove\">\n                            <IconButton onClick={handleRemove}>\n                                <ClearIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                </Box>\n            ) : (\n                <Upload.Dragger\n                    name=\"pdf\"\n                    listType=\"picture\"\n                    className={classes.uploader}\n                    showUploadList={false}\n                    action={uploadUrl}\n                    headers={{\n                        Authorization: `Bearer ${idToken}`,\n                    }}\n                    beforeUpload={beforeUpload}\n                    onChange={handleChange}\n                >\n                    <Box className={classes.uploaderInner}>\n                        {loading ? (\n                            <CircularProgress />\n                        ) : (\n                            <Typography className={classes.uploadText}>\n                                {t('Click_or_drag_')}\n                            </Typography>\n                        )}\n                    </Box>\n                </Upload.Dragger>\n            )}\n        </Box>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport Select from 'components/inputs/Select'\nimport TextInput from 'components/inputs/TextInput'\n\nconst StreetAddressInput = ({\n    value = {},\n    onChange,\n    onBlur,\n    showVenueName = false,\n}) => {\n    const { country, addressLine, addressLine2, city, postalCode, venueName } =\n        value\n\n    const handleChange = useCallback(\n        (fieldName, fieldValue) => {\n            onChange({\n                ...value,\n                [fieldName]: fieldValue,\n            })\n        },\n        [value, onChange],\n    )\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Select\n                    label=\"Country\"\n                    options=\"country\"\n                    value={country}\n                    onChange={value => handleChange('country', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={9}>\n                <TextInput\n                    label=\"Street address\"\n                    value={addressLine}\n                    onChange={value => handleChange('addressLine', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={3}>\n                <TextInput\n                    label=\"Apartment/Unit/Other\"\n                    value={addressLine2}\n                    onChange={value => handleChange('addressLine2', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            <Grid item xs={8}>\n                <TextInput\n                    label=\"City\"\n                    value={city}\n                    onChange={value => handleChange('city', value)}\n                />\n            </Grid>\n            <Grid item xs={4}>\n                <TextInput\n                    label=\"Postal code\"\n                    value={postalCode}\n                    onChange={value => handleChange('postalCode', value)}\n                    onBlur={onBlur}\n                />\n            </Grid>\n            {showVenueName && (\n                <Grid item xs={12}>\n                    <TextInput\n                        label=\"Venue name\"\n                        value={venueName}\n                        onChange={value => handleChange('venueName', value)}\n                        onBlur={onBlur}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}\n\nexport default StreetAddressInput\n","import React from 'react'\nimport { FilterTypes, FilterValues } from '@hackjunction/shared'\n\nimport TextInput from 'components/inputs/TextInput'\nimport Select from 'components/inputs/SelectOld'\n\nconst MULTI_TYPES = [\n    FilterTypes.filterTypes.ONE_OF.id,\n    FilterTypes.filterTypes.NOT_ONE_OF.id,\n    FilterTypes.filterTypes.CONTAINS_ONE_OF.id,\n    FilterTypes.filterTypes.NOT_CONTAINS_ONE_OF.id,\n]\n\nconst FilterValueInput = ({\n    filterType,\n    valueType,\n    value,\n    onChange,\n    event,\n}) => {\n    const inputParams = { value, onChange }\n    switch (filterType) {\n        case FilterTypes.filterTypes.LESS_THAN.id:\n        case FilterTypes.filterTypes.NOT_LESS_THAN.id:\n        case FilterTypes.filterTypes.MORE_THAN.id:\n        case FilterTypes.filterTypes.NOT_MORE_THAN.id:\n            return (\n                <TextInput\n                    label=\"Enter a number\"\n                    helperText=\"If the field is a text field or a list of values, compares the length of the value\"\n                    {...inputParams}\n                />\n            )\n        case FilterTypes.filterTypes.CONTAINS.id:\n        case FilterTypes.filterTypes.NOT_CONTAINS.id:\n        case FilterTypes.filterTypes.EQUALS.id:\n        case FilterTypes.filterTypes.NOT_EQUALS.id:\n        case FilterTypes.filterTypes.ONE_OF.id:\n        case FilterTypes.filterTypes.NOT_ONE_OF.id:\n        case FilterTypes.filterTypes.CONTAINS_ONE_OF.id:\n        case FilterTypes.filterTypes.NOT_CONTAINS_ONE_OF.id:\n            const isMulti = MULTI_TYPES.indexOf(filterType) !== -1\n            switch (valueType) {\n                case FilterValues.STRING:\n                    if (isMulti) {\n                        return (\n                            <TextInput\n                                label=\"Enter values (comma-separated)\"\n                                formatValue={value =>\n                                    Array.isArray(value) ? value.join(',') : ''\n                                }\n                                formatOnChange={value => value.split(',')}\n                                {...inputParams}\n                            />\n                        )\n                    } else {\n                        return (\n                            <TextInput label=\"Enter value\" {...inputParams} />\n                        )\n                    }\n                case FilterValues.BOOLEAN:\n                    return <TextInput label=\"Boolean field\" {...inputParams} />\n                case FilterValues.DATE:\n                    return <TextInput label=\"Date field\" {...inputParams} />\n                case FilterValues.GENDER:\n                    return (\n                        <Select\n                            label=\"Select gender\"\n                            type=\"gender\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.NATIONALITY:\n                    return (\n                        <Select\n                            label=\"Select nationality\"\n                            type=\"nationality\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.COUNTRY:\n                    return (\n                        <Select\n                            label=\"Select country\"\n                            type=\"country\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.LANGUAGE:\n                    return (\n                        <Select\n                            label=\"Select language\"\n                            type=\"language\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.TAG:\n                    const options = event.tags.map(tag => ({\n                        value: tag.label,\n                        label: tag.label,\n                    }))\n                    return (\n                        <Select\n                            label=\"Select tag\"\n                            options={options}\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.STATUS:\n                    return (\n                        <Select\n                            label=\"Select status\"\n                            type=\"status\"\n                            multiple={isMulti}\n                            {...inputParams}\n                        />\n                    )\n                case FilterValues.NUMBER:\n                    return (\n                        <TextInput\n                            type=\"number\"\n                            label=\"Enter a number\"\n                            {...inputParams}\n                        />\n                    )\n                default:\n                    return null\n            }\n        case FilterTypes.filterTypes.IS_EMPTY:\n        case FilterTypes.filterTypes.NOT_EMPTY:\n        case FilterTypes.filterTypes.BOOLEAN_FALSE.id:\n        case FilterTypes.filterTypes.BOOLEAN_TRUE.id:\n            return null\n        default:\n            return null\n    }\n}\n\nexport default FilterValueInput\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { RegistrationFields, FilterTypes } from '@hackjunction/shared'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport {\n    Grid,\n    Button,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ExpansionPanelActions,\n    Typography,\n} from '@material-ui/core'\nimport { useTranslation } from 'react-i18next'\nimport Select from 'components/inputs/SelectOld'\nimport FilterValueInput from './FilterValueInput'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n    },\n    headingItem: {\n        marginRight: theme.spacing(1),\n    },\n    body: {\n        padding: theme.spacing(3),\n    },\n}))\n\nexport default ({ onSubmit }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n    const [filter, setFilter] = useState()\n    const [filterType, setFilterType] = useState()\n    const [filterValue, setFilterValue] = useState()\n    const { t } = useTranslation()\n    useEffect(() => {\n        setFilterType(undefined)\n    }, [filter])\n\n    useEffect(() => {\n        setFilterValue(undefined)\n    }, [filterType])\n\n    const toggleExpanded = useCallback(() => {\n        setExpanded(!expanded)\n    }, [expanded])\n\n    const handleClear = useCallback(() => {\n        setExpanded(false)\n        setFilter(undefined)\n        setFilterType(undefined)\n        setFilterValue(undefined)\n    }, [])\n\n    const filterParams = useMemo(() => {\n        return filter ? JSON.parse(filter) : null\n    }, [filter])\n\n    const submitValue = useMemo(() => {\n        if (!filterParams) return null\n        if (!filterType) return null\n\n        return {\n            label: filterParams.label,\n            path: filterParams.path,\n            type: filterType,\n            value: filterValue,\n        }\n    }, [filterParams, filterType, filterValue])\n\n    const handleSubmit = useCallback(() => {\n        onSubmit(submitValue)\n        handleClear()\n    }, [submitValue, onSubmit, handleClear])\n\n    const filterOptions = useMemo(() => {\n        return RegistrationFields.filters.map(filter => ({\n            value: JSON.stringify(filter),\n            label: filter.label,\n        }))\n    }, [])\n\n    const filterTypeOptions = useMemo(() => {\n        if (!filterParams) return []\n        const options = FilterTypes.filterTypesForType[filterParams.type]\n        if (!options) return []\n\n        return options.map(option => ({\n            value: option,\n            label: FilterTypes.filterTypes[option].label,\n            helper: FilterTypes.filterTypes[option].helper,\n        }))\n    }, [filterParams])\n\n    return (\n        <ExpansionPanel expanded={expanded} onChange={toggleExpanded}>\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div className={classes.headingItem}>\n                    <Typography color=\"textPrimary\">Add a filter</Typography>\n                </div>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.body}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Select\n                            label={t('Choose_field_')}\n                            placeholder={t('Choose_field_')}\n                            helperText={t('Choose_field_filter_')}\n                            value={filter}\n                            onChange={setFilter}\n                            options={filterOptions}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        {filterTypeOptions.length > 0 && (\n                            <Select\n                                label={t('How_to_filter_')}\n                                value={filterType}\n                                onChange={setFilterType}\n                                helperText={t('Choose_how_to_filter_')}\n                                options={filterTypeOptions}\n                            />\n                        )}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FilterValueInput\n                            filterType={filterType}\n                            valueType={\n                                filterParams ? filterParams.valueType : null\n                            }\n                            value={filterValue}\n                            onChange={setFilterValue}\n                            event={event}\n                        />\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n            <ExpansionPanelActions>\n                <Button onClick={handleClear}>Cancel</Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSubmit}\n                    disabled={!submitValue}\n                >\n                    Add\n                </Button>\n            </ExpansionPanelActions>\n        </ExpansionPanel>\n    )\n}\n","import React from 'react'\n\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Typography,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Chip,\n} from '@material-ui/core'\nimport { FilterTypes } from '@hackjunction/shared'\n\nconst useStyles = makeStyles(theme => ({\n    inline: {\n        display: 'inline',\n    },\n    chips: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n    chip: {\n        margin: 2,\n    },\n}))\n\nconst FilterListItem = ({ filter = {}, onRemove }) => {\n    const classes = useStyles()\n    const getType = () => {\n        const params = FilterTypes.filterTypes[filter.type]\n        return params ? params.label : filter.type\n    }\n\n    const renderValue = value => {\n        if (Array.isArray(value)) {\n            return (\n                <div className={classes.chips}>\n                    {value.map(item => (\n                        <Chip\n                            key={item}\n                            label={item}\n                            className={classes.chip}\n                        />\n                    ))}\n                </div>\n            )\n        }\n        return value\n    }\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={filter.label}\n                secondary={\n                    <>\n                        <Typography\n                            variant=\"body2\"\n                            className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {getType()}\n                        </Typography>{' '}\n                        {renderValue(filter.value)}\n                    </>\n                }\n            />\n            {typeof onRemove === 'function' && (\n                <ListItemSecondaryAction>\n                    <IconButton\n                        edge=\"end\"\n                        aria-label=\"delete\"\n                        onClick={onRemove}\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            )}\n        </ListItem>\n    )\n}\n\nexport default FilterListItem\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport {\n    List,\n    Divider,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Typography,\n    Badge,\n} from '@material-ui/core'\nimport FilterListItem from 'components/filters/FilterListItem'\nimport { useTranslation } from 'react-i18next'\n\nconst useStyles = makeStyles(theme => ({\n    headingItem: {\n        marginRight: theme.spacing(1),\n    },\n    badge: {\n        right: -1 * theme.spacing(2),\n        top: theme.spacing(1),\n    },\n    list: {\n        width: '100%',\n    },\n}))\nconst FilterList = ({ activeItemKey, filters = [], onChange = () => {} }) => {\n    const classes = useStyles()\n    const [expanded, setExpanded] = useState(false)\n    const toggleExpanded = useCallback(() => setExpanded(!expanded), [expanded])\n    const hasFilters = filters.length !== 0\n    const { t } = useTranslation()\n\n    useEffect(() => {\n        setExpanded(false)\n    }, [activeItemKey])\n\n    const handleRemove = useCallback(\n        index => {\n            const newFilters = filters.filter((filter, idx) => {\n                return idx !== index\n            })\n            onChange(newFilters)\n        },\n        [onChange, filters],\n    )\n\n    return (\n        <ExpansionPanel\n            disabled={!hasFilters}\n            expanded={expanded}\n            onChange={toggleExpanded}\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <Badge\n                    color=\"primary\"\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                    badgeContent={filters.length}\n                    classes={{ badge: classes.badge }}\n                    showZero={false}\n                >\n                    <Typography color=\"textPrimary\">\n                        {t('Active_filters_')}\n                    </Typography>\n                </Badge>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <List className={classes.list}>\n                    {filters.map((filter, index) => (\n                        <React.Fragment\n                            key={filter.path + filter.type + filter.value}\n                        >\n                            {index !== 0 && <Divider />}\n                            <FilterListItem\n                                filter={filter}\n                                onRemove={() => handleRemove(index)}\n                            />\n                        </React.Fragment>\n                    ))}\n                </List>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    )\n}\n\nexport default FilterList\n","import React, { useState, useEffect, useCallback } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ExpansionPanelActions,\n    Typography,\n    Button,\n    Grid,\n    CircularProgress,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport TextInput from 'components/inputs/TextInput'\nimport { useFormField } from 'hooks/formHooks'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nexport default ({ filters, activeItem, reservedLabels, onSave, onDelete }) => {\n    const dispatch = useDispatch()\n    const event = useSelector(OrganiserSelectors.event)\n    const isEdit = !activeItem.isDefault && !activeItem.isAdd\n    const [loading, setLoading] = useState(false)\n    const [expanded, setExpanded] = useState(false)\n    const label = useFormField(isEdit ? activeItem.label : '', value => {\n        if (value.length === 0) {\n            return 'Name is required'\n        }\n\n        if (value.length > 50) {\n            return 'Name must be under 50 characters'\n        }\n\n        if (!isEdit) {\n            if (reservedLabels.indexOf(value) !== -1) {\n                return 'Name is already taken'\n            }\n        }\n\n        return\n    })\n\n    const description = useFormField(\n        isEdit ? activeItem.description : '',\n        value => {\n            if (value.length > 100) {\n                return 'Description must be under 100 characters'\n            }\n\n            return\n        },\n    )\n\n    const toggleExpanded = useCallback(\n        (event, isExpanded) => {\n            setExpanded(isExpanded)\n            label.setValue(isEdit ? activeItem.label : '')\n            description.setValue(isEdit ? activeItem.description : '')\n        },\n        [label, isEdit, activeItem.label, activeItem.description, description],\n    )\n\n    useEffect(() => {\n        setExpanded(false)\n    }, [])\n\n    const handleSubmit = () => {\n        const errs = [label.validate(), description.validate()].filter(\n            err => err !== undefined,\n        )\n        if (errs.length > 0) {\n            return\n        }\n\n        if (isEdit) {\n            handleEdit(label.value, description.value)\n        } else {\n            handleCreate(label.value, description.value)\n        }\n    }\n\n    const handleEdit = useCallback(\n        (label, description) => {\n            setLoading(true)\n            dispatch(\n                OrganiserActions.editFilterGroup(\n                    event.slug,\n                    label,\n                    description,\n                    filters,\n                ),\n            )\n                .then(item => {\n                    dispatch(SnackbarActions.success('Edits saved!'))\n                    toggleExpanded(null, false)\n                    onSave(item)\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, event.slug, filters, onSave, toggleExpanded],\n    )\n\n    const handleCreate = useCallback(\n        (label, description) => {\n            setLoading(true)\n            dispatch(\n                OrganiserActions.createFilterGroup(\n                    event.slug,\n                    label,\n                    description,\n                    filters,\n                ),\n            )\n                .then(item => {\n                    dispatch(SnackbarActions.success('Filter group deleted'))\n                    toggleExpanded(null, false)\n                    onSave(item)\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, event.slug, filters, onSave, toggleExpanded],\n    )\n\n    const handleDelete = useCallback(() => {\n        setLoading(true)\n        dispatch(OrganiserActions.deleteFilterGroup(event.slug, label.value))\n            .then(() => {\n                dispatch(SnackbarActions.success('Filter group deleted'))\n                toggleExpanded(null, false)\n                onDelete()\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error('Something went wrong'))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [dispatch, event.slug, label.value, onDelete, toggleExpanded])\n\n    return (\n        <ExpansionPanel\n            expanded={expanded}\n            onChange={toggleExpanded}\n            disabled={filters.length === 0}\n        >\n            <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"save-filters\"\n                id=\"save-filters\"\n            >\n                <Typography>\n                    {isEdit ? 'Edit these filters' : 'Save these filters'}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container spacing={3}>\n                    {!isEdit && (\n                        <Grid item xs={12}>\n                            <Typography>\n                                You can save this filter group for later use.\n                                This allows you to easily view stats for the\n                                group, and do things like bulk edit their\n                                applications or send an email to everyone in the\n                                group.\n                            </Typography>\n                        </Grid>\n                    )}\n                    <Grid item xs={12}>\n                        <TextInput\n                            rawOnChange\n                            disabled={isEdit}\n                            label=\"Name\"\n                            helperText=\"Give a descriptive name to the filter group e.g. participants from Finland\"\n                            {...label}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextInput\n                            rawOnChange\n                            label=\"Description\"\n                            helperText=\"Add a short description, if needed\"\n                            {...description}\n                        />\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n            <ExpansionPanelActions>\n                {loading && <CircularProgress size={24} />}\n                {isEdit && (\n                    <Button\n                        disabled={loading}\n                        color=\"error\"\n                        variant=\"contained\"\n                        onClick={handleDelete}\n                    >\n                        Delete filter group\n                    </Button>\n                )}\n                <Button\n                    disabled={loading}\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={handleSubmit}\n                >\n                    {isEdit ? 'Save edits' : 'Create new filter group'}\n                </Button>\n            </ExpansionPanelActions>\n        </ExpansionPanel>\n    )\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useSelector } from 'react-redux'\nimport { sortBy } from 'lodash-es'\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Paper,\n    Box,\n    Divider,\n} from '@material-ui/core'\n\nimport FilterForm from './FilterForm'\nimport FilterList from './FilterList'\nimport FilterSaveForm from './FilterSaveForm'\nimport { useTranslation } from 'react-i18next'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n}))\n\nexport default ({\n    onChange = () => {},\n    onSelectedChange = () => {},\n    showEdit = true,\n}) => {\n    const filterGroups = useSelector(OrganiserSelectors.filterGroups)\n    const { t } = useTranslation()\n    const classes = useStyles()\n    const [anchorEl, setAnchorEl] = React.useState(null)\n\n    const [selected, setSelected] = useState()\n    const [filters, setFilters] = useState([])\n    // console.log('filters', filters)\n    useEffect(() => {\n        if (selected) {\n            setFilters(selected.filters)\n        } else {\n            setFilters([])\n        }\n    }, [selected])\n\n    useEffect(() => {\n        onSelectedChange(selected)\n    }, [selected, onSelectedChange])\n\n    useEffect(() => {\n        onChange(filters)\n    }, [filters, onChange])\n\n    const handleFilterAdd = useCallback(\n        filter => {\n            setFilters(filters.concat(filter))\n        },\n        [filters],\n    )\n\n    const handleClickListItem = event => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleMenuItemClick = option => {\n        if (option.isDefault) {\n            setSelected()\n        } else {\n            setSelected(option)\n        }\n        setAnchorEl(null)\n    }\n    const handleClose = () => {\n        setAnchorEl(null)\n    }\n\n    const options = useMemo(() => {\n        let items = [\n            {\n                label: t('All_participants_'),\n                description: t('No filters'),\n                filters: [],\n                isDefault: true,\n            },\n        ]\n\n        if (showEdit) {\n            items.push({\n                label: t('New_filters_'),\n                description: t('Apply_filter_'),\n                filters: [],\n                isAdd: true,\n            })\n        }\n\n        items = items.concat(sortBy(filterGroups, 'label'))\n\n        return items\n    }, [filterGroups, showEdit, t])\n\n    const activeItem = selected || options[0]\n    const reservedLabels = options.map(option => option.label)\n\n    return (\n        <Paper className={classes.root}>\n            <List component=\"nav\" aria-label=\"Selected filter group\">\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    aria-label=\"when device is locked\"\n                    onClick={handleClickListItem}\n                >\n                    <ListItemText\n                        primary={activeItem.label}\n                        secondary={activeItem.description}\n                    />\n                </ListItem>\n            </List>\n            <Menu\n                id=\"lock-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {options.map((option, index) => {\n                    let items = []\n                    if (index !== 0) {\n                        items.push(<Divider key={option.label + 'divider'} />)\n                    }\n                    items.push(\n                        <MenuItem\n                            key={option.label}\n                            selected={option.label === activeItem.label}\n                            onClick={() => handleMenuItemClick(option)}\n                        >\n                            <ListItemText\n                                primary={option.label}\n                                secondary={\n                                    option.isAdd || option.isDefault\n                                        ? option.description\n                                        : ''\n                                }\n                            />\n                        </MenuItem>,\n                    )\n                    return items\n                })}\n            </Menu>\n            {showEdit && !activeItem.isDefault && (\n                <Box p={2}>\n                    <FilterForm onSubmit={handleFilterAdd} />\n                    <FilterList\n                        activeItemKey={activeItem ? activeItem.label : null}\n                        filters={filters}\n                        onChange={setFilters}\n                    />\n                    <FilterSaveForm\n                        filters={filters}\n                        activeItem={activeItem}\n                        reservedLabels={reservedLabels}\n                        onSave={setSelected}\n                        onDelete={setSelected}\n                    />\n                </Box>\n            )}\n        </Paper>\n    )\n}\n","import React, { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Grid, Typography, Box } from '@material-ui/core'\nimport { Rating } from '@material-ui/lab'\n\nimport Button from 'components/generic/Button'\nimport EventTagsSelect from 'components/inputs/EventTagsSelect'\nimport OrganiserSelectModal from 'components/modals/OrganiserSelectModal'\nimport RegistrationStatusSelect from 'components/inputs/RegistrationStatusSelect'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport { useTranslation } from 'react-i18next'\nimport { useFormField } from 'hooks/formHooks'\n\nexport default ({ registration, onSubmit, onCancel }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const organisersMap = useSelector(OrganiserSelectors.organisersMap)\n    const [organiserModalOpen, setOrganiserModalOpen] = useState(false)\n    const rating = useFormField(registration.rating)\n    const assignedTo = useFormField(registration.assignedTo)\n    const tags = useFormField(registration.tags)\n    const status = useFormField(registration.status)\n    const travelGrant = useFormField(registration.travelGrant)\n    const { t } = useTranslation()\n    const formFields = [rating, assignedTo, tags, status, travelGrant]\n    const formValues = {\n        rating: rating.value,\n        assignedTo: assignedTo.value,\n        tags: tags.value,\n        status: status.value,\n        travelGrant: travelGrant.value,\n    }\n    const formDirty = formFields.map(field => field.dirty).indexOf(true) !== -1\n\n    const handleSubmit = useCallback(() => {\n        const errors = formFields\n            .map(field => {\n                return field.validate()\n            })\n            .filter(err => typeof err !== 'undefined')\n\n        if (errors.length > 0) {\n            return\n        }\n\n        onSubmit(formValues)\n    }, [formFields, formValues, onSubmit])\n\n    const renderAssignedTo = () => {\n        if (assignedTo.value) {\n            const user = organisersMap[assignedTo.value]\n            return user ? `${user.firstName} ${user.lastName}` : '???'\n        }\n        return 'No one'\n    }\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Box pt={3}>\n                    <Typography variant=\"h5\">{t('Edit_reg_')}</Typography>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Rating_')}</Typography>\n                <Rating\n                    name=\"disabled\"\n                    value={rating.value}\n                    onChange={(e, value) => rating.setValue(value)}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Assigned_to_')}</Typography>\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    alignItems=\"center\"\n                    flexWrap=\"wrap\"\n                >\n                    <Box\n                        pt={0.5}\n                        pb={0.5}\n                        pr={2}\n                        pl={2}\n                        mr={2}\n                        style={{ backgroundColor: 'lightgray' }}\n                    >\n                        <Typography variant=\"subtitle2\">\n                            {renderAssignedTo()}\n                        </Typography>\n                    </Box>\n                    <Button onClick={() => setOrganiserModalOpen(true)}>\n                        {t('Change_')}\n                    </Button>\n                </Box>\n                <OrganiserSelectModal\n                    open={organiserModalOpen}\n                    onClose={() => setOrganiserModalOpen(false)}\n                    onClear={() => assignedTo.setValue()}\n                    onSelect={({ userId }) => assignedTo.setValue(userId)}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Tags_')} </Typography>\n                <EventTagsSelect\n                    value={tags.value}\n                    onChange={v => {\n                        // Null tags causes problems, use empty array instead\n                        if (v === null) {\n                            tags.setValue([])\n                        } else {\n                            tags.setValue(v)\n                        }\n                    }}\n                    tags={event.tags}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"subtitle1\">{t('Status_')} </Typography>\n                <RegistrationStatusSelect\n                    allowRestricted\n                    value={status.value}\n                    onChange={status.setValue}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <TextInput\n                    label=\"Travel grant amount (EUR)\"\n                    helperText=\"Enter 0 to reject travel grant. If the participant previously had no travel grant value, entering a value will trigger an email notification.\"\n                    type=\"number\"\n                    value={travelGrant.value}\n                    onChange={travelGrant.setValue}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    justifyContent=\"flex-end\"\n                >\n                    <Button onClick={onCancel}>{t('Cancel_')}</Button>\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={handleSubmit}\n                        disabled={!formDirty}\n                    >\n                        {t('Save_changes_')}\n                    </Button>\n                </Box>\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\nimport { withStyles, lighten } from '@material-ui/core/styles'\nimport { Chip } from '@material-ui/core'\n\nexport const Yes = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#00ff00', 0.4),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"Yes\" />)\n\nexport const No = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#ff0000', 0.4),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"No\" />)\n\nexport const NotAvailable = withStyles(theme => ({\n    root: {\n        backgroundColor: lighten('#ffa500', 0.2),\n    },\n    label: {\n        ...theme.typography.overline,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n}))(({ classes }) => <Chip size=\"small\" classes={classes} label=\"N/A\" />)\n","import React from 'react'\n\nimport { isEmpty } from 'lodash-es'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Typography,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n} from '@material-ui/core'\nimport { Skills, Roles, Misc } from '@hackjunction/shared'\nimport { Yes, No, NotAvailable } from 'components/generic/Tag/Variants'\nimport moment from 'moment'\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        fontWeight: 'bold',\n    },\n}))\n\nconst DescriptionItem = ({ title, content, fieldName }) => {\n    const classes = useStyles()\n    const renderBoolean = bool => {\n        if (bool === true) {\n            return <Yes />\n        }\n        if (bool === false) {\n            return <No />\n        }\n        return <NotAvailable />\n    }\n\n    const renderObjectFields = (obj, labelMap = {}, valueMap = {}) => {\n        return (\n            <List>\n                {Object.keys(obj).map(key => (\n                    <ListItem key={key}>\n                        <ListItemText\n                            primaryTypographyProps={{\n                                variant: 'body2',\n                                classes: { root: classes.title },\n                            }}\n                            secondaryTypographyProps={{ variant: 'subtitle1' }}\n                            primary={labelMap[key] || key}\n                            secondary={\n                                valueMap[key]\n                                    ? valueMap[key](obj[key])\n                                    : obj[key] || 'N/A'\n                            }\n                        ></ListItemText>\n                    </ListItem>\n                ))}\n            </List>\n        )\n    }\n\n    const renderContent = (content, fieldName) => {\n        switch (fieldName) {\n            case 'roles':\n                return (\n                    <List>\n                        {content.map(item => (\n                            <ListItem key={item.role}>\n                                <ListItemText\n                                    primary={item.role}\n                                    secondary={Roles.getLabelForExperienceLevel(\n                                        item.years,\n                                    )}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                        classes: { root: classes.title },\n                                    }}\n                                    secondaryTypographyProps={{\n                                        variant: 'subtitle1',\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                )\n            case 'expertise':\n                return (\n                    <List>\n                        {content.map(item => {\n                            const label = Skills.getLabelForSkillLevel(\n                                item.level,\n                            )\n                            return (\n                                <ListItem\n                                    key={item}\n                                    style={{ textAlign: 'center' }}\n                                >\n                                    <ListItemText\n                                        primary={item}\n                                        secondary={label}\n                                        primaryTypographyProps={{\n                                            variant: 'body2',\n                                            classes: {},\n                                        }}\n                                    />\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                )\n            case 'education':\n                return renderObjectFields(content, {\n                    level: 'Level',\n                    university: 'University',\n                    degree: 'Degree',\n                    graduationYear: 'Graduation Year',\n                })\n            case 'teamOptions':\n                return renderObjectFields(\n                    content,\n                    {\n                        applyAsTeam: 'Applying as a team?',\n                        applyAlone: 'Applying also alone?',\n                    },\n                    {\n                        applyAsTeam: renderBoolean,\n                        applyAlone: renderBoolean,\n                    },\n                )\n            case 'dateOfBirth':\n                return moment(content).format('DD.MM.YYYY')\n            case 'numHackathons':\n                return Misc.numHackathonOptions.getLabelForValue(content)\n            case 'portfolio':\n            case 'github':\n            case 'linkedin':\n            case 'curriculumVitae':\n                return (\n                    <a href={content} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {content}\n                    </a>\n                )\n            case 'recruitmentOptions':\n                return renderObjectFields(\n                    content,\n                    {\n                        consent: 'Can share data with partners?',\n                        relocation: 'Willing to relocate?',\n                        status: 'Job-seeking status',\n                    },\n                    {\n                        consent: renderBoolean,\n                        relocation: value =>\n                            Misc.relocationOptions.getLabelForValue(value),\n                        status: value =>\n                            Misc.recruitmentStatuses.getLabelForValue(value),\n                    },\n                )\n            case 'dietaryRestrictions':\n            case 'spokenLanguages':\n                if (!content || !content.length) return 'None'\n                return content.join(', ')\n            case 'themesOfInterest':\n            case 'industriesOfInterest':\n                return (\n                    <List>\n                        {content.map(item => (\n                            <ListItem key={item}>\n                                <ListItemText\n                                    primary={item}\n                                    primaryTypographyProps={{\n                                        variant: 'body2',\n                                        classes: { root: classes.title },\n                                    }}\n                                    secondaryTypographyProps={{\n                                        variant: 'subtitle1',\n                                    }}\n                                />\n                            </ListItem>\n                        ))}\n                    </List>\n                )\n            case 'phoneNumber':\n                return `${content.countryCode} ${content.number}`\n            default:\n                if (!content) return <NotAvailable />\n                const contentType = typeof content\n\n                switch (contentType) {\n                    case 'string':\n                        return content\n                    case 'boolean':\n                        return renderBoolean(content)\n                    case 'array':\n                        if (isEmpty(content)) return 'None'\n                        return content.join(', ')\n                    case 'object':\n                        return renderObjectFields(content)\n                    default:\n                        return ''\n                }\n        }\n    }\n\n    return (\n        <Grid item xs={12}>\n            {/* {title ===\n            'What skills or expertise areas can you bring to the team?' ? (\n                ''\n            ) : ( */}\n            <Typography variant=\"body2\" classes={{ root: classes.title }}>\n                {title}\n            </Typography>\n            {/* )} */}\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                {renderContent(content, fieldName)}\n            </Typography>\n        </Grid>\n    )\n}\n\nexport default DescriptionItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RegistrationFields } from '@hackjunction/shared'\nimport { groupBy, sortBy, find } from 'lodash-es'\nimport {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Typography,\n    Grid,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport DescriptionItem from 'components/generic/DescriptionItem'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nexport default React.memo(({ registration }) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const fields = Object.keys(registration.answers)\n    const grouped = groupBy(fields, field =>\n        RegistrationFields.getCategory(field),\n    )\n    const sorted = sortBy(Object.keys(grouped), label =>\n        RegistrationFields.getCategoryOrderByLabel(label),\n    )\n    console.log('registration.answers', registration.answers)\n    const customAnswers = {}\n    if (registration.answers.CustomAnswers) {\n        registration.answers.CustomAnswers.forEach(element => {\n            if (!customAnswers[element.section]) {\n                customAnswers[element.section] = {}\n            }\n            customAnswers[element.section][element.key] = element.value\n        })\n    }\n    const categoryNames = sorted.filter(key => key !== '')\n    return (\n        <>\n            {categoryNames.map(name => (\n                <ExpansionPanel key={name}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls={`${name}-content`}\n                        id={`${name}-header`}\n                    >\n                        <Typography>{name}</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Grid container spacing={3}>\n                            {grouped[name].map(field => {\n                                console.log(\n                                    'registration-field',\n                                    registration.answers[field],\n                                )\n                                let label =\n                                    RegistrationFields.fieldToLabelMap[field]\n                                if (!label) {\n                                    const customField = find(\n                                        event.registrationQuestions,\n                                        f => f.name === field,\n                                    )\n                                    if (customField) {\n                                        label = customField.label\n                                    }\n                                }\n                                return (\n                                    <DescriptionItem\n                                        title={label}\n                                        content={registration.answers[field]}\n                                        fieldName={field}\n                                    />\n                                )\n                            })}\n                        </Grid>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            ))}\n            {console.log(event.customQuestions)}\n            {event.customQuestions.map(section => {\n                return (\n                    <ExpansionPanel key={section.name}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls={`${section.name}-content`}\n                            id={`${section.name}-header`}\n                        >\n                            <Typography>{section.label}</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Grid container spacing={3}>\n                                {section.questions.map(question => {\n                                    return (\n                                        <DescriptionItem\n                                            title={question.label}\n                                            content={\n                                                customAnswers[section.name]\n                                                    ? customAnswers[\n                                                          section.name\n                                                      ][question.name]\n                                                    : null\n                                            }\n                                        />\n                                    )\n                                })}\n                            </Grid>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            })}\n        </>\n    )\n})\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Dialog } from '@material-ui/core'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport RegistrationsService from 'services/registrations'\nimport MiscUtils from 'utils/misc'\n\nimport EditRegistrationActions from './EditRegistrationActions'\nimport EditRegistrationContent from './EditRegistrationContent'\n\nexport default ({\n    registrationId,\n    onClose = () => {},\n    onEdited = () => {},\n}) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const event = useSelector(OrganiserSelectors.event)\n    const teamsMap = useSelector(OrganiserSelectors.teamsMap)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [registration, setRegistration] = useState()\n    const { slug } = event\n\n    useEffect(() => {\n        if (registrationId) {\n            setLoading(true)\n            RegistrationsService.getFullRegistration(\n                idToken,\n                slug,\n                registrationId,\n            )\n                .then(data => {\n                    setRegistration(data)\n                })\n                .catch(err => {\n                    setError(true)\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        }\n    }, [idToken, registrationId, slug])\n\n    const participantName = useMemo(() => {\n        if (!registration) return ''\n        const { firstName, lastName } = registration.answers\n        return `${firstName} ${lastName}`\n    }, [registration])\n\n    const participantSubheading = useMemo(() => {\n        if (!registration) return ''\n        const team = teamsMap[registration.user]\n        const countryText = registration?.answers?.countryOfResidence\n        const teamText = `Team: ${team?.code ?? 'No team'}`\n\n        return [countryText, teamText].filter(value => !!value).join(' // ')\n    }, [registration, teamsMap])\n\n    const handleEdit = useCallback(\n        async data => {\n            setLoading(true)\n            await MiscUtils.sleep(1000)\n            dispatch(\n                OrganiserActions.editRegistration(registrationId, data, slug),\n            )\n                .then(data => {\n                    dispatch(SnackbarActions.success('Changes saved!'))\n                    onEdited(data)\n                    onClose()\n                })\n                .catch(err => {\n                    dispatch(SnackbarActions.error('Something went wrong...'))\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, registrationId, slug, onEdited, onClose],\n    )\n\n    return (\n        <Dialog open={!!registrationId} onClose={onClose} fullScreen>\n            <PageWrapper loading={loading || !registration} error={error}>\n                <Container center>\n                    <PageHeader\n                        heading={participantName}\n                        subheading={participantSubheading}\n                    />\n                    <EditRegistrationContent registration={registration} />\n                    <EditRegistrationActions\n                        registration={registration}\n                        onSubmit={handleEdit}\n                        onCancel={onClose}\n                    />\n                </Container>\n            </PageWrapper>\n        </Dialog>\n    )\n}\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { push } from 'connected-react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Grid, Box, Typography } from '@material-ui/core'\n\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nimport EventsService from 'services/events'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useTranslation } from 'react-i18next'\nexport default () => {\n    const { t } = useTranslation()\n    const [name, setName] = useState('')\n    const [error, setError] = useState()\n    const [loading, setLoading] = useState(false)\n    const hasError = Boolean(error)\n\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    useEffect(() => {\n        if (hasError) {\n            if (name.length < 5) {\n                setError(t('Name_must_five_'))\n            } else if (name.length >= 50) {\n                setError(t('Name_must_under_'))\n            } else {\n                setError()\n            }\n        }\n    }, [name, hasError, t])\n\n    const checkName = useCallback(() => {\n        if (name.length < 5) {\n            setError(t('Name_must_five_'))\n            return false\n        } else if (name.length >= 50) {\n            setError(t('Name_must_under_'))\n            return false\n        }\n        return true\n    }, [name.length, t])\n\n    const handleCreate = useCallback(() => {\n        if (!checkName()) return\n        setLoading(true)\n        EventsService.createEvent(idToken, { name })\n            .then(data => {\n                dispatch(push(`/organise/${data.slug}`))\n                dispatch(SnackbarActions.success(`Created ${data.name}`))\n            })\n            .catch(e => {\n                dispatch(SnackbarActions.error(t('Unable_to_create_')))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [checkName, idToken, name, dispatch, t])\n\n    return (\n        <Box mt={3}>\n            <Typography variant=\"h6\" gutterBottom>\n                {t('Create_new_event_')}\n            </Typography>\n            <Grid container spacing={2} direction=\"row\" alignItems=\"flex-end\">\n                <Grid item xs={12}>\n                    <Typography variant=\"caption\" color=\"error\">\n                        {error}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} sm={9}>\n                    <TextInput\n                        label={t('Event_name_')}\n                        placeholder={t('Enter_event_name_')}\n                        value={name}\n                        onChange={setName}\n                        disabled={loading}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={3}>\n                    <Button\n                        disabled={hasError}\n                        onClick={handleCreate}\n                        loading={loading}\n                        fullWidth\n                        color=\"primary\"\n                        variant=\"contained\"\n                    >\n                        {t('Create_')}\n                    </Button>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport { push } from 'connected-react-router'\nimport { useDispatch } from 'react-redux'\nimport { Grid, Box, Typography, makeStyles } from '@material-ui/core'\nimport EventCard from 'components/events/EventCard'\nimport Button from 'components/generic/Button'\nimport { useTranslation } from 'react-i18next'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\n\nimport SearchIcon from '@material-ui/icons/Search'\nimport TextInput from '../../../components/inputs/TextInput'\n\n/*\ntextShadow:\n    '-1px -1px 0 green, 1px -1px 0 green, -1px 1px 0 green, 1px 1px 0 green',\n*/\nconst useStyles = makeStyles({\n    statusText: {\n        fontSize: '28px',\n        transform: 'rotate(-10deg)',\n        top: '20%',\n        position: 'relative',\n        zIndex: '10',\n    },\n    green: {\n        color: 'green',\n        fontWeight: 'bold',\n        background: 'lightgreen',\n        padding: '0 0 0 5px',\n        opacity: '70%',\n    },\n    yellow: {\n        color: 'yellow',\n        fontWeight: 'bold',\n        background: 'lightyellow',\n        padding: '0 0 0 5px',\n        opacity: '70%',\n    },\n    orange: {\n        color: 'orange',\n        fontWeight: 'bold',\n        background: 'lightgoldenrodyellow',\n        padding: '0 0 0 5px',\n        opacity: '70%',\n    },\n})\n\nexport default ({ events = [] }) => {\n    const [searchTerm, setSearchTerm] = React.useState('')\n    const [searchResults, setSearchResults] = useState(events)\n\n    // const handleChange = event => {\n    //     setSearchTerm(event.target.value)\n    // }\n\n    useEffect(() => {\n        const results = events.filter(\n            event =>\n                event.name.toLowerCase().indexOf(searchTerm.toLowerCase()) !==\n                -1,\n        )\n        setSearchResults(results)\n    }, [events, searchTerm])\n\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n    const classes = useStyles()\n    return (\n        <Box mt={3}>\n            <Typography variant=\"h6\" gutterBottom>\n                {t('Your_events_')}\n            </Typography>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"center\"\n                spacing={1}\n            >\n                <Grid item>\n                    <SearchIcon />\n                </Grid>\n                <Grid item xs>\n                    <TextInput\n                        value={searchTerm}\n                        onChange={setSearchTerm}\n                        placeholder={t('Search_')}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={3}>\n                {searchResults.map(event => (\n                    <Grid item xs={12} md={6} lg={4} key={event._id}>\n                        <div className={classes.statusText}>\n                            {event.published && event.approved ? (\n                                <span className={classes.green}>\n                                    Published!\n                                </span>\n                            ) : null}\n                            {event.published && !event.approved ? (\n                                <span className={classes.yellow}>\n                                    Waiting approval\n                                </span>\n                            ) : null}\n                            {!event.published ? (\n                                <span className={classes.orange}>\n                                    Not published\n                                </span>\n                            ) : null}\n                        </div>\n                        <EventCard\n                            event={event}\n                            buttons={[\n                                <Button\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    onClick={() =>\n                                        dispatch(\n                                            push(`/organise/${event.slug}`),\n                                        )\n                                    }\n                                >\n                                    {t('Manage_')}\n                                </Button>,\n                            ]}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n","import React from 'react'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport GlobalNavBar from 'components/navbars/GlobalNavBar'\nimport Footer from 'components/layouts/Footer'\n\nimport Container from 'components/generic/Container'\n\nimport NewEventForm from './NewEventForm'\nimport EventsList from './EventsList'\n\nimport { useMyEvents } from 'graphql/queries/events'\n\nexport default () => {\n    const [events, loading] = useMyEvents()\n\n    return (\n        <PageWrapper\n            loading={loading}\n            header={() => <GlobalNavBar />}\n            footer={() => <Footer />}\n            render={() => (\n                <Container center>\n                    <NewEventForm />\n                    <EventsList events={events} />\n                </Container>\n            )}\n        />\n    )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { Dialog } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport LoadingSpinner from 'components/loadingCircle'\nimport ProjectDetail from 'components/projects/ProjectDetail'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport RenderContent from 'components/renderRatingContent'\n// import ProjectsService from 'services/projects'\n// import Scoring from './Scoring'\nimport PageHeader from 'components/generic/PageHeader'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n    const team = useSelector(DashboardSelectors.team)\n    const event = useSelector(OrganiserSelectors.event)\n    const rankedProjects = useSelector(OrganiserSelectors.rankedProjects)\n    // const annotator = useSelector(DashboardSelectors.annotator)\n    // const annotatorError = useSelector(DashboardSelectors.annotatorError)\n    // const annotatorLoading = useSelector(DashboardSelectors.annotatorLoading)\n    const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const [selected, setSelected] = useState(false)\n    const [scores, setScores] = useState([])\n\n    const callUnrankedProjects = () => {\n        let unrankedProjects = []\n        if (projectsByRating) {\n            if (rankedProjects) {\n                // if (rankedProjects == 'none') {\n                // } else {\n                unrankedProjects = projectsByRating.filter(project => {\n                    if (project.isWinner) {\n                        let found = false\n                        rankedProjects.forEach(rankedProject => {\n                            if (rankedProject._id === project._id) {\n                                found = true\n                            }\n                        })\n                        if (!found) {\n                            return true\n                        }\n                    }\n                    return false\n                })\n                // }\n            }\n        }\n\n        return unrankedProjects\n    }\n    const unrankedProjects = callUnrankedProjects()\n\n    const handleScoring = (projectId, score, feedback) => {\n        console.log(score)\n        dispatch(DashboardActions.giveScore(projectId, score, event.slug))\n        dispatch(DashboardActions.giveFeedback(projectId, feedback, event.slug))\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        // const noOfScores =\n        //     projectsByRating[projectId].usersThatScored.length + 1\n        // setScores(\n        //     scores.map(item => {\n        //         if (Object.keys(item)[0] === projectId) {\n        //             return {\n        //                 [projectId]:\n        //                     (score +\n        //                         projectsByRating.score * (noOfScores - 1)) /\n        //                     noOfScores,\n        //             }\n        //         }\n        //         return item\n        //     }),\n        // )\n    }\n\n    let staredProjects = []\n\n    useEffect(() => {\n        if (projectsByRating && user) {\n            projectsByRating.map(project => {\n                // @ts-ignore\n                if (user.sub) {\n                    // @ts-ignore\n                    if (project.usersThatRated.includes(user.sub)) {\n                        staredProjects.push(project)\n                    }\n                }\n            })\n        }\n    }, [projectsByRating, staredProjects, user])\n\n    useEffect(() => {\n        console.log('from here', event.slug)\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        dispatch(OrganiserActions.getRankedProjects(event.slug))\n        dispatch(DashboardActions.updateAnnotator(event.slug))\n    }, [event.slug, dispatch])\n\n    if (!rankedProjects || !projectsByRating) {\n        return <LoadingSpinner />\n    }\n\n    return (\n        <PageWrapper>\n            <PageHeader heading=\"Winners\" />\n            <RenderContent\n                ranked={true}\n                event={event}\n                projectsByRating={rankedProjects}\n                scores={scores}\n                setSelected={setSelected}\n                user={user}\n            />\n            {/* <h1 className=\"text-xl mt-6\">Unranked Projects</h1>\n            <RenderContent\n                ranked={false}\n                event={event}\n                projectsByRating={unrankedProjects}\n                scores={scores}\n                setSelected={setSelected}\n                user={user}\n            /> */}\n            <Dialog\n                transitionDuration={0}\n                fullScreen\n                open={Boolean(selected)}\n                onClose={() => setSelected(false)}\n            >\n                <ProjectDetail\n                    showFullTeam={true}\n                    project={selected}\n                    event={event}\n                    onBack={() => setSelected(false)}\n                    showTableLocation={false}\n                    handleScoring={handleScoring}\n                    scores={scores}\n                />\n            </Dialog>\n        </PageWrapper>\n    )\n}\n","import StarSvg from 'components/starSvg'\nimport React, { useEffect } from 'react'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { EventHelpers } from '@hackjunction/shared'\nimport moment from 'moment'\n\nconst Scoring = ({ project, user, scores, slug, event }) => {\n    const dispatch = useDispatch()\n    const [staredProject, setStaredProject] = React.useState(false)\n    const [rating, setRating] = React.useState(0)\n\n    useEffect(() => {\n        // dispatch(DashboardActions.getProjectsByRating(event.slug))\n        if (project && user) {\n            // @ts-ignore\n            if (project.usersThatRated.includes(user.sub)) {\n                setStaredProject(true)\n            }\n        }\n        if (project) {\n            if (project.usersThatRated.includes(user.sub)) {\n                setStaredProject(true)\n            }\n            setRating(project.rating)\n        }\n    }, [project, user])\n\n    const renderScore = () => {\n        const score = scores.map(item => {\n            if (Object.keys(item)[0] === project._id) {\n                console.log('from state score', Object.values(item)[0])\n                return Object.values(item)[0]\n            }\n        })\n        if (score.length > 0) {\n            return score[0]\n        }\n        return 0\n    }\n\n    return (\n        <div className=\"flex flex-col items-end\">\n            <div className=\"flex items-center mb-2\">\n                <button\n                    onClick={e => {\n                        e.stopPropagation()\n                        if (staredProject) {\n                            dispatch(\n                                DashboardActions.unrateProject(\n                                    project._id,\n                                    // @ts-ignore\n                                    user.sub,\n                                    slug,\n                                ),\n                            )\n                            setStaredProject(false)\n                            const newRating = rating - 1\n                            setRating(newRating)\n                        } else {\n                            dispatch(\n                                DashboardActions.rateProject(\n                                    project._id,\n                                    // @ts-ignore\n                                    user.sub,\n                                    slug,\n                                ),\n                                // @ts-ignore\n                            )\n                            setStaredProject(true)\n                            const newRating = rating + 1\n                            setRating(newRating)\n                        }\n                    }}\n                    disabled={!user}\n                >\n                    {staredProject ? (\n                        <StarSvg on={true} />\n                    ) : (\n                        <StarSvg on={false} />\n                    )}\n                </button>\n\n                {\n                    // rating of the project\n                }\n                <div className=\"ml-2\">{rating}</div>\n            </div>\n            {EventHelpers.isEventOver(event, moment) && (\n                <div className=\"flex items-center\">\n                    <div>Global Score:</div>\n\n                    {\n                        // rating of the project\n                    }\n                    <div className=\"ml-2\">\n                        {parseFloat(project.globalScore).toFixed(2)}\n                    </div>\n                </div>\n            )}\n            <div className=\"flex items-center\">\n                <div>Regional Score:</div>\n\n                {\n                    // rating of the project\n                }\n                <div className=\"ml-2\">\n                    {parseFloat(project.score).toFixed(2)}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Scoring\n","import React, { useEffect, useState } from 'react'\n\nimport { Dialog, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport LoadingSpinner from 'components/loadingCircle'\nimport ProjectDetail from 'components/projects/ProjectDetail'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport RenderContent from 'components/renderRatingContent'\nimport ProjectsService from 'services/projects'\nimport Scoring from './Scoring'\nimport PageHeader from 'components/generic/PageHeader'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const user = useSelector(AuthSelectors.idTokenData)\n    const team = useSelector(DashboardSelectors.team)\n    const event = useSelector(OrganiserSelectors.event)\n    // const annotator = useSelector(DashboardSelectors.annotator)\n    // const annotatorError = useSelector(DashboardSelectors.annotatorError)\n    // const annotatorLoading = useSelector(DashboardSelectors.annotatorLoading)\n    const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const [selected, setSelected] = useState(false)\n    const [scores, setScores] = useState([])\n\n    const handleScoring = (projectId, score, feedback) => {\n        console.log(score)\n        dispatch(DashboardActions.giveScore(projectId, score, event.slug))\n        dispatch(DashboardActions.giveFeedback(projectId, feedback, event.slug))\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        // const noOfScores =\n        //     projectsByRating[projectId].usersThatScored.length + 1\n        // setScores(\n        //     scores.map(item => {\n        //         if (Object.keys(item)[0] === projectId) {\n        //             return {\n        //                 [projectId]:\n        //                     (score +\n        //                         projectsByRating.score * (noOfScores - 1)) /\n        //                     noOfScores,\n        //             }\n        //         }\n        //         return item\n        //     }),\n        // )\n    }\n\n    let staredProjects = []\n\n    useEffect(() => {\n        if (projectsByRating && user) {\n            projectsByRating.map(project => {\n                // @ts-ignore\n                if (user.sub) {\n                    // @ts-ignore\n                    if (project.usersThatRated.includes(user.sub)) {\n                        staredProjects.push(project)\n                    }\n                }\n            })\n        }\n        // if (projectsByRating) {\n        //     if (projectsByRating.length > 0) {\n        //         setScores(\n        //             projectsByRating.map(project => {\n        //                 return {\n        //                     [project._id]: project.score,\n        //                 }\n        //             }),\n        //         )\n        //     }\n        // }\n    }, [projectsByRating, staredProjects, user])\n\n    console.log('project rating', projectsByRating, user)\n\n    useEffect(() => {\n        console.log('from here', event.slug)\n        dispatch(DashboardActions.getProjectsByRating(event.slug))\n        dispatch(DashboardActions.updateAnnotator(event.slug))\n    }, [event.slug, dispatch])\n\n    return (\n        <PageWrapper>\n            <PageHeader heading=\"Rating\" />\n            <RenderContent\n                event={event}\n                projectsByRating={projectsByRating}\n                scores={scores}\n                setSelected={setSelected}\n                user={user}\n            />\n            <Dialog\n                transitionDuration={0}\n                fullScreen\n                open={Boolean(selected)}\n                onClose={() => setSelected(false)}\n            >\n                <ProjectDetail\n                    showFullTeam={true}\n                    project={selected}\n                    event={event}\n                    onBack={() => setSelected(false)}\n                    showTableLocation={false}\n                    handleScoring={handleScoring}\n                    scores={scores}\n                />\n            </Dialog>\n        </PageWrapper>\n    )\n}\n","import * as yup from 'yup'\n\nconst cloudinaryImage = yup\n    .object()\n    .shape({\n        url: yup.string().required(),\n        publicId: yup.string().required(),\n    })\n    .default(null)\n    .nullable()\n\nconst address = yup\n    .object()\n    .shape({\n        country: yup.string().required(),\n        addressLine: yup.string().required(),\n        addressLine2: yup.string(),\n        city: yup.string().required(),\n        postalCode: yup\n            .string()\n            .matches(/^[0-9]+$/, 'Invalid zipcode')\n            .min(5, 'Invalid zipcode')\n            .max(5, 'Invalid zipcode')\n            .required(),\n        venueName: yup.string(),\n    })\n    .default(null)\n\nconst track = yup.object().shape({\n    name: yup.string().required(),\n    slug: yup.string().required(),\n    winner: yup.string(),\n})\n\nconst challenge = yup.object().shape({\n    name: yup.string().required(),\n    partner: yup.string(),\n    slug: yup.string().required(),\n    title: yup.string(),\n    subtitle: yup.string(),\n    description: yup.string(),\n    insights: yup.string(),\n    resources: yup.string(),\n    prizes: yup.string(),\n    criteria: yup.string(),\n    companyInfo: yup.string(),\n    logo: cloudinaryImage,\n})\n\n// const travelGrantConfig = yup.object().shape({\n//     enabled: yup.boolean().required(),\n//     budget: yup.number().integer().required(),\n//     currency: yup.string(),\n// })\n\nconst travelGrantConfig = yup.mixed().nullable()\n\nconst registrationQuestionSettings = yup.object().shape({\n    options: yup.array().of(yup.string()),\n    default: yup.boolean(),\n})\n\nconst registrationQuestion = yup.object().shape({\n    label: yup.string().required(),\n    name: yup.string().required(),\n    hint: yup.string(),\n    placeholder: yup.string(),\n    fieldType: yup.string().required(),\n    fieldRequired: yup.boolean(),\n    settings: registrationQuestionSettings,\n})\n\nconst registrationSection = yup.object().shape({\n    label: yup.string().required(),\n    name: yup.string().required(),\n    description: yup.string(),\n    conditional: yup.string(),\n    questions: yup.array().of(registrationQuestion),\n})\n\nconst registrationConfig = yup.object().shape({\n    optionalFields: yup.array().of(yup.string()),\n    requiredFields: yup.array().of(yup.string()),\n})\n\nconst eventTimeline = yup.object().shape({\n    items: yup.array().of(\n        yup.object().shape({\n            title: yup.string().min(2).required(),\n            startTime: yup.date().required(),\n        }),\n    ),\n})\n\nconst eventTheme = yup.object().shape({\n    headerBackgroundColor: yup.string().required(),\n    headerTextColor: yup.string().required(),\n    bodyBackgroundColor: yup.string().required(),\n    detailsBackgroundColor: yup.string().required(),\n    detailsTextColor: yup.string().required(),\n    sidebarBackgroundColor: yup.string().required(),\n    sidebarTextColor: yup.string().required(),\n    accentColor: yup.string().required(),\n    linkColor: yup.string().required(),\n})\n\nexport default yup.object().shape({\n    name: yup.string().required('Event name is required'),\n    slug: yup.string().required('Event must have a unique slug'),\n\n    coverImage: cloudinaryImage,\n    eventType: yup.string(),\n    description: yup.string(),\n    timezone: yup.string(),\n    registrationStartTime: yup.date(),\n    registrationEndTime: yup.date(),\n    reviewingStartTime: yup.date(),\n    reviewingEndTime: yup.date(),\n    emcaTimezone: yup.string(),\n    emcaRegistrationStartTime: yup.date(),\n    emcaRegistrationEndTime: yup.date(),\n    emcaReviewingStartTime: yup.date(),\n    emcaReviewingEndTime: yup.date(),\n    asiaTimezone: yup.string(),\n    asiaRegistrationStartTime: yup.date(),\n    asiaRegistrationEndTime: yup.date(),\n    asiaReviewingStartTime: yup.date(),\n    asiaReviewingEndTime: yup.date(),\n    finalsActive: yup.boolean(),\n    eventLocation: address.notRequired().nullable(true),\n    tracksEnabled: yup.boolean(),\n    tracks: yup.array().of(track),\n    challengesEnabled: yup.boolean(),\n    challenges: yup.array().of(challenge).min(0),\n    travelGrantConfig,\n    reviewMethod: yup.string(),\n    overallReviewMethod: yup.string(),\n    customQuestions: yup.array().of(registrationSection),\n    tags: yup.array().of(\n        yup.object().shape({\n            label: yup.string(),\n            color: yup.string(),\n            description: yup.string(),\n        }),\n    ),\n    published: yup.boolean().required(),\n    galleryOpen: yup.boolean(),\n    owner: yup.string(),\n    organisers: yup.array().of(yup.string()),\n    organizations: yup.array().of(yup.string()),\n    registrationConfig,\n    demoLabel: yup.string(),\n    demoHint: yup.string(),\n    eventPrivacy: yup.string(),\n    eventTerms: yup.string(),\n    eventTimeline,\n    demoPlaceholder: yup.string(),\n    metaDescription: yup.string(),\n    finalists: yup.array().of(yup.string()),\n    frontPagePriority: yup.number().integer(),\n    approved: yup.boolean(),\n    theme: eventTheme,\n})\n","import { gql, useQuery } from '@apollo/client'\n\nexport const GET_ORGANIZATION = gql`\n    query Organization($userId: ID!) {\n        organization(userId: $userId) {\n            _id\n            slug\n            name\n            about\n            icon\n            link\n        }\n    }\n`\n\nexport const useOrganization = _id => {\n    const { data, loading, error } = useQuery(GET_ORGANIZATION, {\n        variables: {\n            _id,\n        },\n    })\n\n    return [data?.organizationById, loading, error]\n}\n\nexport const GET_ORGANIZATIONS = gql`\n    query Organizations {\n        organizations {\n            _id\n            slug\n            name\n            about\n            icon\n            link\n        }\n    }\n`\n\nexport const useAllOrganizations = () => {\n    const { data, loading, error } = useQuery(GET_ORGANIZATIONS)\n    return [data?.organizations, loading, error]\n}\n","import { makeStyles } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { CompactPicker } from 'react-color'\n\nconst useStyles = makeStyles({\n    wrapper: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    previewCircle: {\n        height: 30,\n        width: 30,\n        border: '1px solid lightgray',\n        borderRadius: '50%',\n        background: props => props.backgroundColor,\n        display: 'inline-block',\n        marginRight: 8,\n        cursor: 'pointer',\n    },\n    previewText: {\n        padding: '8px 16px',\n        background: 'lightgray',\n        borderRadius: 6,\n        cursor: 'pointer',\n    },\n    picker: {\n        position: 'absolute',\n        zIndex: 501,\n\n        '& .compact-picker': {\n            boxShadow: 'rgba(0, 0, 0, 0.3) 0px 0px 8px !important',\n        },\n    },\n    pageCover: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n    },\n})\n\nconst ColorSelect = ({ onChange = color => {}, value = '' }) => {\n    const [isOpen, setIsOpen] = useState(false)\n    const classes = useStyles({ backgroundColor: value })\n\n    const togglePicker = () => {\n        setIsOpen(!isOpen)\n    }\n\n    const onColorChange = color => {\n        onChange(color.hex)\n        togglePicker()\n    }\n\n    return (\n        <div>\n            <div className={classes.wrapper}>\n                <span\n                    className={classes.previewCircle}\n                    onClick={togglePicker}\n                />\n                <span className={classes.previewText} onClick={togglePicker}>\n                    {value}\n                </span>\n            </div>\n            {isOpen && (\n                <div className={classes.picker}>\n                    <div className={classes.pageCover} onClick={togglePicker} />\n                    <CompactPicker\n                        color={value}\n                        onChangeComplete={onColorChange}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default ColorSelect\n","export const defaultEventStyles = {\n    headerBackgroundColor: '#ffffff',\n    headerTextColor: '#000000',\n    bodyBackgroundColor: '#ffffff',\n    detailsBackgroundColor: '#ffffff',\n    detailsTextColor: '#000000',\n    sidebarBackgroundColor: '#ffffff',\n    sidebarTextColor: '#000000',\n    accentColor: '#0278D5',\n    linkColor: '#52d7af',\n}\n","import React from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Grid, Box, Typography, TextField } from '@material-ui/core'\nimport { FastField } from 'formik'\n\nimport MarkdownInput from 'components/inputs/MarkdownInput'\nimport FormControl from 'components/inputs/FormControl'\nimport TextInput from 'components/inputs/TextInput'\nimport ImageUpload from 'components/inputs/ImageUpload'\nimport Select from 'components/inputs/Select'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport { useAllOrganizations } from 'graphql/queries/organization'\nimport ColorSelect from 'components/inputs/Color'\nimport Button from 'components/generic/Button'\nimport { push } from 'connected-react-router'\nimport { defaultEventStyles } from './const'\n\nconst themeFields = [\n    {\n        field: 'headerBackgroundColor',\n        label: 'Header background',\n        hint: 'Background color of the header section',\n    },\n    {\n        field: 'headerTextColor',\n        label: 'Header text',\n        hint: 'Text color of the header section',\n    },\n    {\n        field: 'bodyBackgroundColor',\n        label: 'Page background',\n        hint: 'Background color of the main body of the page (visible on wide screens)',\n    },\n    {\n        field: 'detailsBackgroundColor',\n        label: 'Event details background',\n        hint: 'Background color of the event details section',\n    },\n    {\n        field: 'detailsTextColor',\n        label: 'Event details text',\n        hint: 'Text color of the event details section',\n    },\n    {\n        field: 'sidebarBackgroundColor',\n        label: 'Sidebar background',\n        hint: 'Background color of the sidebar section',\n    },\n    {\n        field: 'sidebarTextColor',\n        label: 'Sidebar text',\n        hint: 'Text color of the sidebar section',\n    },\n    {\n        field: 'accentColor',\n        label: 'Accent color',\n        hint: 'Accent color used on buttons and timeline',\n    },\n    {\n        field: 'linkColor',\n        label: 'Link color',\n        hint: 'Text color of links in the event details',\n    },\n]\n\nexport default () => {\n    const event = useSelector(OrganiserSelectors.event)\n    const [organizations] = useAllOrganizations()\n    const dispatch = useDispatch()\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"coverImage\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Cover image\"\n                            hint=\"A cool cover image for your event. Max dimensions 1920x1080 (2MB), will be scaled down if larger.\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Box width=\"100%\" pt=\"56.25%\" position=\"relative\">\n                                <ImageUpload\n                                    value={field.value}\n                                    onChange={value => {\n                                        form.setFieldValue(field.name, value)\n                                        form.setFieldTouched(field.name)\n                                    }}\n                                    uploadUrl={`/api/upload/events/${event.slug}/cover-image`}\n                                    resizeMode=\"cover\"\n                                />\n                            </Box>\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"logo\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event logo\"\n                            hint=\"A logo for your event. Max dimensions 640x640 (2MB), will be scaled down if larger.\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Box width=\"100%\" pt=\"33.33%\" position=\"relative\">\n                                <ImageUpload\n                                    value={field.value}\n                                    onChange={value => {\n                                        form.setFieldValue(field.name, value)\n                                        form.setFieldTouched(field.name)\n                                    }}\n                                    uploadUrl={`/api/upload/events/${event.slug}/logo`}\n                                    resizeMode=\"contain\"\n                                />\n                            </Box>\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"name\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event name\"\n                            hint=\"The name of your event\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"name\"\n                                placeholder=\"Big Hackathon 2020\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"description\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Description\"\n                            hint=\"A hype description for your event.\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <MarkdownInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                placeholder=\"Description goes here\"\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <FastField\n                    name=\"organizations\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label={'Organizations organizing the event'}\n                            hint={'Specify the parties behind this event'}\n                            touched={form.touched[field.name]}\n                            error={form.errors[field.name]}\n                        >\n                            <Select\n                                label=\"Specify the parties behind this event?\"\n                                value={field.value}\n                                onChange={items => {\n                                    if (items === null) {\n                                        form.setFieldValue(field.name, [])\n                                    } else {\n                                        form.setFieldValue(field.name, items)\n                                    }\n                                }}\n                                onBlur={() => form.setFieldTouched(field.name)}\n                                options={organizations?.map(org => {\n                                    return {\n                                        label: org.name,\n                                        value: org._id,\n                                        icon: org.icon,\n                                    }\n                                })}\n                                isMulti={true}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid> */}\n            {/* <Grid item xs={12}>\n                <FastField\n                    name=\"challenge_instructions\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Link to challenge descriptions\"\n                            hint=\"https://hackjunction.com/challenges\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"challenge_instructions\"\n                                placeholder=\"https://hackjunction.com/challenges\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"faq\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"FAQ link\"\n                            hint=\"https://hackjunction.com/faq\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"faq\"\n                                placeholder=\"https://hackjunction.com/faq\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"demoInstructions\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Demo instruction link\"\n                            hint=\"https://hackjunction.com/demo\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"demoInstructions\"\n                                placeholder=\"https://hackjunction.com/demo\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <FastField\n                    name=\"eventPrivacy\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Privacy Policy for this event\"\n                            hint=\"https://www.harness.io/legal/privacy\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"eventPrivacy\"\n                                placeholder=\"https://www.harness.io/legal/privacy\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"eventTerms\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Terms and Conditions for this event\"\n                            hint=\"https://www.harness.io/legal/website-terms-of-use\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"eventTerms\"\n                                placeholder=\"https://www.harness.io/legal/website-terms-of-use\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Typography variant=\"h5\">Event page customization</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container spacing={5}>\n                    {themeFields.map(themeField => (\n                        <Grid\n                            item\n                            xs={12}\n                            md={6}\n                            lg={4}\n                            key={themeField.field}\n                            id={themeField.field}\n                        >\n                            <FastField\n                                name={`theme.${themeField.field}`}\n                                render={({ field, form }) => (\n                                    <FormControl\n                                        label={themeField.label}\n                                        hint={themeField.hint}\n                                        error={form.errors[field.name]}\n                                        touched={form.touched[field.name]}\n                                    >\n                                        <ColorSelect\n                                            value={field.value}\n                                            onChange={value =>\n                                                form.setFieldValue(\n                                                    field.name,\n                                                    value,\n                                                )\n                                            }\n                                        />\n                                    </FormControl>\n                                )}\n                            />\n                        </Grid>\n                    ))}\n                    <Grid item xs={12}>\n                        <Button\n                            variant=\"contained\"\n                            onClick={() =>\n                                dispatch(push('/events/' + event.slug))\n                            }\n                        >\n                            Preview\n                        </Button>\n                        <FastField\n                            name=\"theme\"\n                            render={({ form }) => (\n                                <Button\n                                    onClick={() =>\n                                        form.setFieldValue(\n                                            'theme',\n                                            defaultEventStyles,\n                                        )\n                                    }\n                                >\n                                    Reset defaults\n                                </Button>\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { Grid } from '@material-ui/core'\n\nimport BooleanInput from 'components/inputs/BooleanInput'\nimport TextInput from 'components/inputs/TextInput'\nimport FormControl from 'components/inputs/FormControl'\nimport Select from 'components/inputs/Select'\n\nexport default ({ value = {}, onChange }) => {\n    const { enabled, budget, currency } = value\n\n    const handleChange = useCallback(\n        (fieldName, fieldValue) => {\n            onChange({\n                ...value,\n                [fieldName]: fieldValue,\n            })\n        },\n        [value, onChange],\n    )\n\n    return (\n        <>\n            <FormControl\n                label=\"Travel grants\"\n                hint=\"Will you be offering travel grants for participants?\"\n            >\n                <BooleanInput\n                    value={enabled || false}\n                    onChange={value => handleChange('enabled', value)}\n                />\n            </FormControl>\n            {enabled && (\n                <FormControl hint=\"What's your total travel grant budget?\">\n                    <Grid container spacing={3}>\n                        <Grid item xs={8}>\n                            <TextInput\n                                label=\"Amount\"\n                                value={budget}\n                                type=\"number\"\n                                onChange={value => {\n                                    handleChange('budget', Number(value))\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Select\n                                options=\"currency\"\n                                label=\"Currency\"\n                                value={currency}\n                                onChange={value =>\n                                    handleChange('currency', value)\n                                }\n                            />\n                        </Grid>\n                    </Grid>\n                </FormControl>\n            )}\n        </>\n    )\n}\n","import React, { useState, useCallback, useMemo } from 'react'\n\nimport {\n    Paper,\n    Grid,\n    Box,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Tooltip,\n    Typography,\n} from '@material-ui/core'\nimport getSlug from 'speakingurl'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nexport default ({ value, onChange }) => {\n    const [inputValue, setInputValue] = useState()\n    const [slugValue, setSlugValue] = useState()\n    const [editIndex, setEditIndex] = useState(-1)\n    const [editValue, setEditValue] = useState()\n\n    const handleNameChange = useCallback(name => {\n        setInputValue(name)\n        setSlugValue(getSlug(name))\n    }, [])\n\n    const handleAdd = useCallback(() => {\n        onChange(\n            value.concat({\n                name: inputValue,\n                slug: slugValue,\n            }),\n        )\n        setInputValue()\n        setSlugValue()\n    }, [value, inputValue, slugValue, onChange])\n\n    const handleRemove = useCallback(\n        index => {\n            onChange(\n                value.filter((item, idx) => {\n                    return idx !== index\n                }),\n            )\n        },\n        [value, onChange],\n    )\n\n    const handleEditStart = useCallback(\n        index => {\n            setEditIndex(index)\n            setEditValue(value[index].name)\n        },\n        [value],\n    )\n\n    const handleEditCancel = useCallback(() => {\n        setEditIndex(-1)\n        setEditValue()\n    }, [])\n\n    const handleEditSave = useCallback(() => {\n        onChange(\n            value.map((item, index) => {\n                if (index === editIndex) {\n                    return {\n                        ...item,\n                        name: editValue,\n                    }\n                }\n                return item\n            }),\n        )\n        handleEditCancel()\n    }, [value, editIndex, editValue, onChange, handleEditCancel])\n\n    const isValid = useMemo(() => {\n        return (\n            inputValue &&\n            slugValue &&\n            value.filter(track => {\n                return track.name === inputValue || track.slug === slugValue\n            }).length === 0\n        )\n    }, [value, inputValue, slugValue])\n\n    const renderListItem = (track, index) => {\n        if (index === editIndex) {\n            return (\n                <ListItem key={track.slug || track.name} divider>\n                    <TextInput\n                        value={editValue}\n                        onChange={setEditValue}\n                        label={'Edit ' + track.name}\n                    />\n                    <Tooltip title=\"Cancel\">\n                        <IconButton onClick={handleEditCancel}>\n                            <CloseIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Save\">\n                        <IconButton\n                            disabled={!editValue || editValue.length === 0}\n                            onClick={handleEditSave}\n                        >\n                            <SaveIcon />\n                        </IconButton>\n                    </Tooltip>\n                </ListItem>\n            )\n        }\n\n        return (\n            <ListItem key={track.slug || track.name} divider>\n                <ListItemText primary={track.name} secondary={track.slug} />\n                <ListItemSecondaryAction>\n                    <Tooltip title=\"Edit track name\">\n                        <IconButton onClick={() => handleEditStart(index)}>\n                            <EditIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Remove track\">\n                        <IconButton onClick={() => handleRemove(index)}>\n                            <HighlightOffIcon />\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n        )\n    }\n\n    return (\n        <Paper>\n            <Box p={3}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <TextInput\n                            label=\"Category name\"\n                            value={inputValue}\n                            onChange={handleNameChange}\n                        />\n                        <Typography variant=\"caption\">\n                            The unique publicly visible name of the category.\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextInput\n                            label=\"Unique slug\"\n                            value={slugValue}\n                            onChange={setSlugValue}\n                        />\n                        <Typography variant=\"caption\">\n                            A unique slug for the category. This will be used in\n                            e.g. url paths related to this category.\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            flexDirection=\"row\"\n                            justifyContent=\"flex-end\"\n                        >\n                            <Button\n                                disabled={!isValid}\n                                onClick={handleAdd}\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                            >\n                                Add category\n                            </Button>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <List>{value.map(renderListItem)}</List>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    )\n}\n","import React from 'react'\n\nimport {\n    ReviewingMethods,\n    OverallReviewingMethods,\n    EventTypes,\n} from '@hackjunction/shared'\nimport { Grid, Box } from '@material-ui/core'\nimport { FastField, Field } from 'formik'\n\nimport FormControl from 'components/inputs/FormControl'\nimport Select from 'components/inputs/Select'\nimport BooleanInput from 'components/inputs/BooleanInput'\nimport StreetAddressForm from 'components/inputs/StreetAddressForm'\n\nimport TravelGrantConfig from './TravelGrantConfig'\nimport TracksForm from './TracksForm'\n\nexport default () => {\n    return (\n        <Grid spacing={3} container>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"published\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Published\"\n                            hint=\"Is this event visible to the public?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <BooleanInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"galleryOpen\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Project Gallery open\"\n                            hint=\"Are the projects submitted to this event visible to the public?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <BooleanInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <FastField\n                    name=\"allowProjectSubmissionsPerChallenge\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Projects submitted per challenge\"\n                            hint=\"Does this event allow project submissions for each challenge individually?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <BooleanInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid> */}\n            <Grid item xs={12}>\n                <FastField\n                    name=\"eventType\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event type\"\n                            hint=\"Is this a physical or online event?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                value={field.value}\n                                onChange={async value => {\n                                    if (value === 'online') {\n                                        await form.setFieldValue(\n                                            'eventLocation',\n                                            null,\n                                        )\n                                    }\n                                    if (value === 'physical') {\n                                        await form.setFieldValue(\n                                            'eventLocation',\n                                            form.values.eventLocation ?? {},\n                                        )\n                                    }\n                                    form.setFieldValue(field.name, value)\n                                }}\n                                options={Object.keys(EventTypes).map(key => ({\n                                    label: EventTypes[key].label,\n                                    value: key,\n                                }))}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"eventLocation\"\n                    render={({ field, form }) => {\n                        if (\n                            form.values.eventType === 'physical' &&\n                            field.value\n                        ) {\n                            return (\n                                <FormControl\n                                    label=\"Event location\"\n                                    hint=\"Where does this event take place?\"\n                                >\n                                    <StreetAddressForm\n                                        value={field.value}\n                                        onChange={value =>\n                                            form.setFieldValue(\n                                                field.name,\n                                                value,\n                                            )\n                                        }\n                                        showVenueName\n                                    />\n                                </FormControl>\n                            )\n                        }\n                        return null\n                    }}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"travelGrantConfig\"\n                    render={({ field, form }) => {\n                        if (form.values.eventType === 'physical') {\n                            return (\n                                <TravelGrantConfig\n                                    value={field.value}\n                                    onChange={value =>\n                                        form.setFieldValue(field.name, value)\n                                    }\n                                />\n                            )\n                        }\n                        return null\n                    }}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"tracksEnabled\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Does this event have multiple categories?\"\n                            hint={\n                                'If you are organising a large event, it might be a good idea to ' +\n                                'separate it into multiple different categories. A category is essentially a mini-hackathon ' +\n                                \"within your event, and will have it's own winner. Each team must participate on a single \" +\n                                'category, which they will select when making their submission. The winning project on each category ' +\n                                'advances to the finals, where the overall winner is then decided. As a rule of thumb, ' +\n                                \"if your event has more than 500 participants, it's probably a good idea to use categories. \" +\n                                \"If you don't use categories, there will essentially be a single category, the winner of which \" +\n                                'is also the overall winner.'\n                            }\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <BooleanInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"tracks\"\n                    render={({ field, form }) =>\n                        form.values.tracksEnabled ? (\n                            <FormControl\n                                label=\"Categories\"\n                                hint=\"Enter your different categories here\"\n                                error={form.errors[field.name]}\n                                touched={form.touched[field.name]}\n                            >\n                                <TracksForm\n                                    value={field.value}\n                                    onChange={value =>\n                                        form.setFieldValue(field.name, value)\n                                    }\n                                />\n                            </FormControl>\n                        ) : null\n                    }\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"reviewMethod\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing method\"\n                            hint={\n                                form.values.tracksEnabled\n                                    ? 'Which method should be used to determine the ranking of projects within categories?'\n                                    : 'Which method should be used to determine the ranking of projects?'\n                            }\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                options={Object.keys(ReviewingMethods).map(\n                                    key => ({\n                                        label: ReviewingMethods[key].label,\n                                        value: key,\n                                    }),\n                                )}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"overallReviewMethod\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Overall winner method\"\n                            hint=\"Which method should be used to determine the overall winner?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                options={Object.keys(\n                                    OverallReviewingMethods,\n                                ).map(key => ({\n                                    label: OverallReviewingMethods[key].label,\n                                    value: key,\n                                }))}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <Field\n                    name=\"allowVoteOnOwnProject\"\n                    render={({ field, form }) =>\n                        form.values.reviewMethod ===\n                        ReviewingMethods.gavelPeerReview.id ? (\n                            <FormControl\n                                label=\"Allow vote on own projects\"\n                                hint=\"Can user vote on their own projects (consider this for events with few participants and multiple submissions per team)\"\n                                error={form.errors[field.name]}\n                                touched={form.touched[field.name]}\n                            >\n                                <BooleanInput\n                                    value={field.value}\n                                    onChange={value =>\n                                        form.setFieldValue(field.name, value)\n                                    }\n                                />\n                            </FormControl>\n                        ) : null\n                    }\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"finalsActive\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Is finalist voting open\"\n                            hint=\"Check this to allow the finalist voting to open (after the gavel review has been completed)\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <BooleanInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid> */}\n\n            <Grid item xs={12}>\n                <Box height=\"300px\" />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport Select from 'components/inputs/Select'\n\nconst HOURS = Array.apply(null, Array(24)).map((value, index) => {\n    if (index < 10) {\n        return {\n            value: index,\n            label: '0' + index,\n        }\n    } else {\n        return {\n            value: index,\n            label: index.toString(),\n        }\n    }\n})\n\nconst MINUTES = Array.apply(null, Array(12)).map((value, index) => {\n    if (index < 2) {\n        return {\n            value: index * 5,\n            label: '0' + index * 5,\n        }\n    } else {\n        return {\n            value: index * 5,\n            label: (index * 5).toString(),\n        }\n    }\n})\n\nconst DEFAULT_VALUE = {\n    hours: HOURS[0].value,\n    minutes: MINUTES[0].value,\n}\n\nconst TimeInput = ({ value = DEFAULT_VALUE, onChange }) => {\n    const handleHoursChange = useCallback(\n        hours => {\n            const newValue = {\n                ...value,\n                hours,\n            }\n            onChange(newValue)\n        },\n        [onChange, value],\n    )\n\n    const handleMinutesChange = useCallback(\n        minutes => {\n            const newValue = {\n                ...value,\n                minutes,\n            }\n            onChange(newValue)\n        },\n        [onChange, value],\n    )\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={6}>\n                <Select\n                    label=\"HH\"\n                    options={HOURS}\n                    value={value.hours}\n                    onChange={handleHoursChange}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <Select\n                    label=\"mm\"\n                    options={MINUTES}\n                    value={value.minutes}\n                    onChange={handleMinutesChange}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default TimeInput\n","import React, { useCallback } from 'react'\nimport moment from 'moment-timezone'\n\nimport { Grid } from '@material-ui/core'\nimport DateInput from '../DateInput'\nimport TimeInput from '../TimeInput'\n\nconst DateTimeInput = React.memo(\n    ({ value, onChange, onBlur, timezone = 'UTC' }) => {\n        const momentValue =\n            value && timezone\n                ? moment(value).tz(timezone)\n                : moment().tz(timezone).startOf('day')\n\n        const handleDateChange = useCallback(\n            date => {\n                if (!date) {\n                    onChange(undefined)\n                } else {\n                    const newValue = momentValue.clone()\n                    const dateAsMoment = moment(date)\n                    newValue.year(dateAsMoment.year())\n                    newValue.month(dateAsMoment.month())\n                    newValue.date(dateAsMoment.date())\n                    onChange(newValue.startOf('minute').format())\n                }\n            },\n            [onChange, momentValue],\n        )\n\n        const handleTimeChange = useCallback(\n            ({ hours, minutes }) => {\n                const newValue = momentValue.clone()\n                newValue.hour(hours)\n                newValue.minute(minutes)\n                onChange(newValue.startOf('minute').format())\n            },\n            [momentValue, onChange],\n        )\n\n        return (\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={8}>\n                    <DateInput value={value} onChange={handleDateChange} />\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <TimeInput\n                        value={{\n                            hours: momentValue.hours(),\n                            minutes: momentValue.minutes(),\n                        }}\n                        onChange={handleTimeChange}\n                    />\n                </Grid>\n            </Grid>\n        )\n    },\n)\n\nexport default DateTimeInput\n","import React, { useState } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport { FastField, Field } from 'formik'\nimport Select from 'components/inputs/Select'\nimport FormControl from 'components/inputs/FormControl'\nimport DateTimeInput from 'components/inputs/DateTimeInput'\n\nexport default () => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"timezone\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Timezone\"\n                            hint=\"Which timezone is your event happening in?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                placeholder=\"Choose a timezone\"\n                                value={field.value}\n                                options=\"timezone\"\n                                onChange={timezone => {\n                                    form.setFieldValue(field.name, timezone)\n                                }}\n                                onBlur={() => form.setFieldTouched}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"registrationStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration opens\"\n                            hint=\"\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"registrationEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration closes\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"startTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"submissionsStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions open\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"submissionsEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions close\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"reviewingStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"reviewingEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"endTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport { FastField, Field } from 'formik'\nimport Select from 'components/inputs/Select'\nimport FormControl from 'components/inputs/FormControl'\nimport DateTimeInput from 'components/inputs/DateTimeInput'\n\nexport default () => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"emcaTimezone\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Timezone\"\n                            hint=\"Which timezone is your event happening in?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                placeholder=\"Choose a timezone\"\n                                value={field.value}\n                                options=\"timezone\"\n                                onChange={timezone => {\n                                    form.setFieldValue(field.name, timezone)\n                                }}\n                                onBlur={() => form.setFieldTouched}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaRegistrationStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration opens\"\n                            hint=\"\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaRegistrationEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration closes\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaSubmissionsStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions open\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaSubmissionsEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions close\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaReviewingStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaReviewingEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"emcaEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState } from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport { FastField, Field } from 'formik'\nimport Select from 'components/inputs/Select'\nimport FormControl from 'components/inputs/FormControl'\nimport DateTimeInput from 'components/inputs/DateTimeInput'\n\nexport default () => {\n    const [timezones, setTimezones] = useState({\n        america: null,\n        emca: null,\n        asia: null,\n    })\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"asiaTimezone\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Timezone\"\n                            hint=\"Which timezone is your event happening in?\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <Select\n                                placeholder=\"Choose a timezone\"\n                                value={field.value}\n                                options=\"timezone\"\n                                onChange={timezone => {\n                                    form.setFieldValue(field.name, timezone)\n                                }}\n                                onBlur={() => form.setFieldTouched}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaRegistrationStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration opens\"\n                            hint=\"\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaRegistrationEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Registration closes\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaSubmissionsStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions open\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaSubmissionsEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Submissions close\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaReviewingStartTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period begins\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaReviewingEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Reviewing period ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <Field\n                    name=\"asiaEndTime\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Event ends\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <DateTimeInput\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                timezone={form.values.timezone}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport {\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    FormControlLabel,\n    Switch,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MarkdownInput from 'components/inputs/MarkdownInput'\nimport Button from 'components/generic/Button'\nimport TextInput from 'components/inputs/TextInput'\n\nconst useStyles = makeStyles(theme => ({\n    label: {\n        fontWeight: 'bold',\n    },\n}))\n\nexport default ({\n    visible,\n    onVisibleChange,\n    onSubmit,\n    onEditDone,\n    onEditCancel,\n    editing,\n    reservedNames,\n}) => {\n    const classes = useStyles()\n    const [data, setData] = useState({})\n    const [isConditional, setIsConditional] = useState(false)\n\n    useEffect(() => {\n        if (editing) {\n            setData(editing)\n            setIsConditional(typeof editing.conditional !== undefined)\n        }\n    }, [editing])\n\n    const reset = () => {\n        setData({})\n        setIsConditional(false)\n    }\n\n    const validate = () => {\n        if (!data.label) {\n            return 'Please give your section a title'\n        }\n\n        if (!data.name) {\n            return 'Please give your section a machine name'\n        }\n\n        if (!/^[a-z-]*$/.test(data.name)) {\n            return 'Machine name can only contain lowercase characters and dashes (-)'\n        }\n\n        if (!editing) {\n            if (reservedNames.indexOf(data.name) !== -1) {\n                return `The machine-name ${data.name} is already taken, please use something else`\n            }\n        }\n\n        if (isConditional && !data.conditional) {\n            return 'Please give your section a conditional question, or set it to always visible'\n        }\n    }\n\n    const handleAdd = () => {\n        const error = validate()\n        if (error) {\n            window.alert(error)\n        } else {\n            onSubmit({\n                ...data,\n                conditional: isConditional ? data.conditional : undefined,\n            })\n            onVisibleChange(false)\n            reset()\n        }\n    }\n\n    const handleEdit = () => {\n        const error = validate()\n        if (error) {\n            window.alert(error)\n        } else {\n            onEditDone({\n                ...data,\n                conditional: isConditional ? data.conditional : undefined,\n            })\n            reset()\n        }\n    }\n\n    const handleCancel = () => {\n        if (editing) {\n            onEditCancel()\n        } else {\n            onVisibleChange(false)\n        }\n    }\n\n    const handleChange = useCallback(\n        (field, value) => {\n            setData({\n                ...data,\n                [field]: value,\n            })\n        },\n        [data],\n    )\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"md\"\n            open={visible || editing}\n            onClose={handleCancel}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\">\n                {editing ? `Edit ${editing.label}` : 'Add a new section'}\n            </DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Section title\n                </Typography>\n                <TextInput\n                    placeholder=\"My custom section\"\n                    value={data.label}\n                    onChange={value => handleChange('label', value)}\n                />\n                <Typography variant=\"caption\" gutterBottom>\n                    The displayed name of your section\n                </Typography>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Machine name\n                </Typography>\n                <TextInput\n                    placeholder=\"my-custom-section\"\n                    value={data.name}\n                    onChange={value => handleChange('name', value)}\n                />\n                <Typography variant=\"caption\" gutterBottom>\n                    A machine-readable name for the section\n                </Typography>\n                <Box p={1} />\n                <Typography variant=\"body1\" className={classes.label}>\n                    Description\n                </Typography>\n                <MarkdownInput\n                    value={data.description}\n                    onChange={value => handleChange('description', value)}\n                />\n                <Box p={1} />\n                <Typography variant=\"body1\" className={classes.label}>\n                    Visibility\n                </Typography>\n                <Typography variant=\"caption\" width=\"100%\" gutterBottom>\n                    Do you want this section to be visible always, or have the\n                    user answer a yes/no question to expand it?\n                </Typography>\n                <Box width=\"100%\">\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                checked={isConditional}\n                                onChange={(e, value) => setIsConditional(value)}\n                                color=\"primary\"\n                            />\n                        }\n                        label=\"Is this a conditional field?\"\n                    />\n                </Box>\n                {isConditional && (\n                    <>\n                        <Box p={1} />\n                        <Typography variant=\"body1\" className={classes.label}>\n                            Conditional question\n                        </Typography>\n                        <Typography width=\"100%\" variant=\"caption\" gutterBottom>\n                            What is the yes/no question you want to ask? When\n                            choosing yes, the questions in this section will be\n                            shown\n                        </Typography>\n                        <TextInput\n                            placeholder=\"Do you want to also apply to My Awesome Side Event?\"\n                            value={data.conditional}\n                            onChange={value =>\n                                handleChange('conditional', value)\n                            }\n                        />\n                    </>\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={handleCancel}\n                    color=\"theme_lightgray\"\n                    variant=\"contained\"\n                >\n                    Cancel\n                </Button>\n                <Box p={1} />\n                <Button\n                    onClick={editing ? handleEdit : handleAdd}\n                    color=\"primary\"\n                    variant=\"contained\"\n                >\n                    {editing ? 'Save edits' : 'Add'}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React, { useState, useCallback, useEffect } from 'react'\n\nimport { isEmpty } from 'lodash-es'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Box,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\n\nimport Select from 'components/inputs/Select'\nimport BooleanInput from 'components/inputs/BooleanInput'\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nconst initialData = {\n    label: '',\n    hint: '',\n    settings: {},\n    fieldRequired: false,\n    fieldType: 'text',\n}\n\nconst useStyles = makeStyles(theme => ({\n    label: {\n        fontWeight: 'bold',\n    },\n}))\n\nexport default ({\n    initialValue = initialData,\n    sectionName,\n    visible,\n    onVisibleChange,\n    reservedNames,\n    onSubmit,\n    onEditDone,\n    onEditCancel,\n    editing,\n}) => {\n    const classes = useStyles()\n    const [data, setData] = useState(initialValue)\n\n    useEffect(() => {\n        if (editing) {\n            setData(editing)\n        }\n    }, [editing])\n\n    const reset = () => {\n        setData(initialData)\n    }\n\n    const validate = () => {\n        if (isEmpty(data.label)) {\n            return 'Label is required'\n        }\n\n        if (data.label.length > 100) {\n            return 'Label can be at most 100 characters'\n        }\n\n        if (isEmpty(data.fieldType)) {\n            return 'Please choose a question type'\n        }\n\n        if (!/^[a-z-]*$/.test(data.name)) {\n            return 'Machine name can only contain lowercase characters and dashes (-)'\n        }\n\n        if (!editing) {\n            if (reservedNames.indexOf(data.name) !== -1) {\n                return `This section already contains a question with the machine name ${data.name}, please use something else`\n            }\n        }\n\n        return\n    }\n\n    const handleAdd = () => {\n        const error = validate()\n        if (error) {\n            window.alert(error)\n        } else {\n            onSubmit(data)\n            onVisibleChange(false)\n        }\n        reset()\n    }\n\n    const handleEdit = () => {\n        const error = validate()\n        if (error) {\n            window.alert(error)\n        } else {\n            onEditDone(data)\n        }\n    }\n\n    const handleCancel = () => {\n        if (editing) {\n            onEditCancel()\n        } else {\n            onVisibleChange(false)\n        }\n        reset()\n    }\n\n    const handleChange = useCallback(\n        (field, value) => {\n            setData({\n                ...data,\n                [field]: value,\n            })\n        },\n        [data],\n    )\n\n    const renderPlaceholderInput = () => {\n        return (\n            <>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Placeholder\n                </Typography>\n                <TextInput\n                    placeholder=\"Your favorite animal here\"\n                    value={data.placeholder}\n                    onChange={value => handleChange('placeholder', value)}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    Text to show in the field if it's empty\n                </Typography>\n            </>\n        )\n    }\n\n    const renderFieldTypeOptions = () => {\n        switch (data.fieldType) {\n            case 'multiple-choice':\n            case 'single-choice': {\n                return (\n                    <>\n                        <Typography variant=\"body1\" className={classes.label}>\n                            Options to choose from\n                        </Typography>\n                        <TextInput\n                            placeholder=\"Zebra,Hippopotamus,Giraffe\"\n                            value={\n                                data.settings.options\n                                    ? data.settings.options.join(',')\n                                    : ''\n                            }\n                            onChange={value =>\n                                handleChange('settings', {\n                                    ...data.settings,\n                                    options: value\n                                        .split(',')\n                                        .map(item => item.trim()),\n                                })\n                            }\n                        />\n                        <Typography variant=\"caption\" paragraph>\n                            Enter options to choose from, separated by a comma\n                        </Typography>\n                        {renderPlaceholderInput()}\n                    </>\n                )\n            }\n            case 'checkbox':\n            case 'boolean': {\n                return (\n                    <>\n                        <Typography variant=\"body1\" className={classes.label}>\n                            Default value\n                        </Typography>\n                        <BooleanInput\n                            value={data.settings.default || false}\n                            onChange={value =>\n                                handleChange('settings', {\n                                    ...data.settings,\n                                    default: value,\n                                })\n                            }\n                        />\n                        <Typography variant=\"caption\" paragraph>\n                            Is this field checked/yes by default?\n                        </Typography>\n                    </>\n                )\n            }\n            default:\n                return renderPlaceholderInput()\n        }\n    }\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"md\"\n            open={visible || editing}\n            onClose={handleCancel}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"form-dialog-title\">\n                {editing\n                    ? `Edit ${data.label}`\n                    : `Add a new question under ${sectionName}`}\n            </DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Label\n                </Typography>\n                <TextInput\n                    placeholder=\"What's your favorite animal?\"\n                    value={data.label}\n                    onChange={value => handleChange('label', value)}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    The name of your question\n                </Typography>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Machine name\n                </Typography>\n                <TextInput\n                    placeholder=\"favoriteAnimal\"\n                    disabled={editing}\n                    value={data.name}\n                    onChange={value => handleChange('name', value)}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    A unique machine-readable name. This should be only letters,\n                    and be written in camelCase: e.g. letterOfMotivation. This\n                    field will not be visible to the end-user.\n                </Typography>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Question type\n                </Typography>\n                <Select\n                    value={data.fieldType}\n                    onChange={value => handleChange('fieldType', value)}\n                    placeholder=\"Choose one\"\n                    options={[\n                        {\n                            value: 'text',\n                            label: 'Short text',\n                        },\n                        {\n                            value: 'textarea',\n                            label: 'Long text',\n                        },\n                        {\n                            value: 'boolean',\n                            label: 'Yes / No',\n                        },\n                        {\n                            value: 'single-choice',\n                            label: 'Single choice',\n                        },\n                        {\n                            value: 'multiple-choice',\n                            label: 'Multiple choice',\n                        },\n                    ]}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    Which kind of answer do you want? Choose a type and you will\n                    be presented with any available additional options\n                </Typography>\n                {renderFieldTypeOptions()}\n                <Typography variant=\"body1\" className={classes.label}>\n                    Hint\n                </Typography>\n                <TextInput\n                    placeholder=\"Enter the name of your favorite animal in ALL CAPS for added effect\"\n                    value={data.hint}\n                    onChange={value => handleChange('hint', value)}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    Add an optional help text to show under the question label -\n                    just like the one you're reading right now\n                </Typography>\n                <Typography variant=\"body1\" className={classes.label}>\n                    Is this question required?\n                </Typography>\n                <BooleanInput\n                    value={data.fieldRequired}\n                    onChange={value => handleChange('fieldRequired', value)}\n                />\n                <Typography variant=\"caption\" paragraph>\n                    Users will not be able to submit the form without answering\n                    this question, if it is required.\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={handleCancel}\n                    color=\"theme_lightgray\"\n                    variant=\"contained\"\n                >\n                    Cancel\n                </Button>\n                <Box p={1} />\n                <Button\n                    onClick={editing ? handleEdit : handleAdd}\n                    color=\"primary\"\n                    variant=\"contained\"\n                >\n                    {editing ? 'Save edits' : 'Add question'}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Box,\n    Typography,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ExpansionPanelActions,\n    Divider,\n    ListItemText,\n    ListItem,\n    List,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport Button from 'components/generic/Button'\nimport Markdown from 'components/generic/Markdown'\nimport AddQuestionModal from './AddQuestionModal'\n\nconst useStyles = makeStyles(theme => ({\n    wrapper: {\n        padding: theme.spacing(2),\n        background: 'white',\n        boxShadow: '2px 7px 30px rgba(0, 0, 0, 0.12)',\n        borderRadius: '7px',\n        marginBottom: theme.spacing(2),\n    },\n    descriptionWrapper: {\n        marginTop: theme.spacing(2),\n    },\n}))\n\nexport default ({\n    section,\n    onChange,\n    onRemove,\n    onEdit,\n    onMoveDown,\n    onMoveUp,\n    isFirst,\n    isLast,\n}) => {\n    const classes = useStyles()\n    const [modalOpen, setModalOpen] = useState(false)\n    const [editing, setEditing] = useState(undefined)\n    const questions = section.questions || []\n    const reservedNames = questions.map(q => q.name)\n\n    const handleAdd = useCallback(\n        question => {\n            const newQuestions = questions.concat(question)\n            onChange({\n                ...section,\n                questions: newQuestions,\n            })\n        },\n        [onChange, questions, section],\n    )\n\n    const handleEdit = useCallback(\n        question => {\n            const newQuestions = questions.map(q => {\n                if (q.name === question.name) {\n                    return question\n                }\n                return q\n            })\n\n            onChange({\n                ...section,\n                questions: newQuestions,\n            })\n            setEditing(undefined)\n        },\n        [onChange, questions, section],\n    )\n\n    const handleQuestionUp = useCallback(\n        (question, index) => {\n            if (index === 0) return\n            const newItems = questions.slice()\n            newItems[index] = newItems[index - 1]\n            newItems[index - 1] = question\n            onChange({\n                ...section,\n                questions: newItems,\n            })\n        },\n        [onChange, questions, section],\n    )\n\n    const handleQuestionDown = useCallback(\n        (question, index) => {\n            if (index === questions.length - 1) return\n            const newItems = questions.slice()\n            newItems[index] = newItems[index + 1]\n            newItems[index + 1] = question\n            onChange({\n                ...section,\n                questions: newItems,\n            })\n        },\n        [onChange, questions, section],\n    )\n\n    const handleQuestionRemove = useCallback(\n        (question, index) => {\n            const newItems = questions.slice()\n            newItems.splice(index, 1)\n            onChange({\n                ...section,\n                questions: newItems,\n            })\n        },\n        [onChange, questions, section],\n    )\n\n    return (\n        <>\n            <Box className={classes.wrapper}>\n                <Typography variant=\"h6\">{section.label}</Typography>\n                <List>\n                    <ListItem>\n                        <ListItemText\n                            secondary={\n                                <Box className={classes.descriptionWrapper}>\n                                    <Markdown source={section.description} />\n                                </Box>\n                            }\n                        />\n                    </ListItem>\n                    <ListItem>\n                        <ListItemText\n                            primary=\"Always shown?\"\n                            secondary={\n                                !section.conditional\n                                    ? `Yes`\n                                    : `No (${section.conditional})`\n                            }\n                        />\n                    </ListItem>\n                </List>\n                <Box p={1}>\n                    {questions.map((question, index) => (\n                        <ExpansionPanel key={question.name}>\n                            <ExpansionPanelSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1c-content\"\n                                id=\"panel1c-header\"\n                            >\n                                <ListItemText\n                                    primary={question.label}\n                                    secondary={question.fieldType}\n                                />\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails className={classes.details}>\n                                <List>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary=\"Field type\"\n                                            secondary={question.fieldType}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary=\"Machine name\"\n                                            secondary={question.name}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary=\"Placeholder\"\n                                            secondary={question.placeholder}\n                                        />\n                                    </ListItem>\n                                    <ListItem>\n                                        <ListItemText\n                                            primary=\"Settings\"\n                                            secondary={\n                                                <ul>\n                                                    {question.settings\n                                                        .default && (\n                                                        <li>\n                                                            <strong>\n                                                                Default:{' '}\n                                                            </strong>\n                                                            {\n                                                                question\n                                                                    .settings\n                                                                    .default\n                                                            }\n                                                        </li>\n                                                    )}\n                                                    {question.settings\n                                                        .options &&\n                                                        question.settings\n                                                            .options.length >\n                                                            0 && (\n                                                            <li>\n                                                                <strong>\n                                                                    Options:{' '}\n                                                                </strong>\n                                                                {question.settings.options.join(\n                                                                    ', ',\n                                                                )}\n                                                            </li>\n                                                        )}\n                                                </ul>\n                                            }\n                                        />\n                                    </ListItem>\n                                </List>\n                            </ExpansionPanelDetails>\n                            <Divider />\n                            <ExpansionPanelActions>\n                                <Button\n                                    color=\"error\"\n                                    onClick={() =>\n                                        handleQuestionRemove(question, index)\n                                    }\n                                >\n                                    Remove question\n                                </Button>\n                                <Button\n                                    color=\"theme_turquoise\"\n                                    onClick={() => setEditing(question)}\n                                >\n                                    Edit question\n                                </Button>\n                                <Button\n                                    color=\"theme_turquoise\"\n                                    disabled={index === 0}\n                                    onClick={() =>\n                                        handleQuestionUp(question, index)\n                                    }\n                                >\n                                    Move up\n                                </Button>\n                                <Button\n                                    color=\"theme_turquoise\"\n                                    disabled={index === questions.length - 1}\n                                    onClick={() =>\n                                        handleQuestionDown(question, index)\n                                    }\n                                >\n                                    Move down\n                                </Button>\n                            </ExpansionPanelActions>\n                        </ExpansionPanel>\n                    ))}\n                </Box>\n                <Box\n                    p={1}\n                    display=\"flex\"\n                    flexDirection=\"row\"\n                    flexWrap=\"wrap\"\n                    justifyContent=\"flex-end\"\n                >\n                    <Button color=\"error\" onClick={onRemove}>\n                        Remove section\n                    </Button>\n                    <Button\n                        color=\"theme_turquoise\"\n                        onClick={() => setModalOpen(true)}\n                    >\n                        Add a question\n                    </Button>\n                    <Button color=\"theme_turquoise\" onClick={onEdit}>\n                        Edit section\n                    </Button>\n                    <Button color=\"theme_turquoise\" onClick={onMoveUp}>\n                        Move up\n                    </Button>\n                    <Button color=\"theme_turquoise\" onClick={onMoveDown}>\n                        Move down\n                    </Button>\n                </Box>\n                <AddQuestionModal\n                    sectionName={section.label}\n                    visible={modalOpen}\n                    onVisibleChange={setModalOpen}\n                    reservedNames={reservedNames}\n                    onSubmit={handleAdd}\n                    onEditDone={question => handleEdit(question)}\n                    onEditCancel={() => setEditing(undefined)}\n                    editing={editing}\n                />\n            </Box>\n        </>\n    )\n}\n","import React, { useState, useCallback, useMemo } from 'react'\n\nimport { RegistrationFields } from '@hackjunction/shared'\nimport { Box } from '@material-ui/core'\n\nimport Empty from 'components/generic/Empty'\nimport Button from 'components/generic/Button'\nimport AddSectionModal from './AddSectionModal'\nimport CustomSectionListItem from './CustomSectionListItem'\n\nexport default ({ sections = [], onChange }) => {\n    const [modalOpen, setModalOpen] = useState(false)\n    const [editing, setEditing] = useState()\n    const reservedNames = useMemo(() => {\n        const sectionNames = sections.map(s => s.name)\n        const questionNames = Object.keys(RegistrationFields.getFields())\n        return sectionNames.concat(questionNames)\n    }, [sections])\n\n    const handleAdd = useCallback(\n        section => {\n            const newValue = sections.concat(section)\n            onChange(newValue)\n        },\n        [onChange, sections],\n    )\n\n    const handleChange = useCallback(\n        (updatedSection, updatedIndex) => {\n            const newValue = sections.map((section, index) => {\n                if (updatedIndex === index) {\n                    return updatedSection\n                }\n                return section\n            })\n            onChange(newValue)\n        },\n        [onChange, sections],\n    )\n\n    const handleRemove = useCallback(\n        (section, index) => {\n            const newValue = sections.slice()\n            newValue.splice(index, 1)\n            onChange(newValue)\n        },\n        [onChange, sections],\n    )\n\n    const handleMoveUp = useCallback(\n        (section, index) => {\n            if (index === 0) return\n            const newValue = sections.slice()\n            newValue[index] = newValue[index - 1]\n            newValue[index - 1] = section\n            onChange(newValue)\n        },\n        [onChange, sections],\n    )\n\n    const handleMoveDown = useCallback(\n        (section, index) => {\n            if (index === sections.length - 1) return\n            const newValue = sections.slice()\n            newValue[index] = newValue[index + 1]\n            newValue[index + 1] = section\n            onChange(newValue)\n        },\n        [onChange, sections],\n    )\n\n    const handleEditDone = useCallback(\n        section => {\n            const newValue = sections.map(s => {\n                if (s.name === section.name) {\n                    return section\n                }\n                return s\n            })\n            onChange(newValue)\n            setEditing(undefined)\n        },\n        [onChange, sections],\n    )\n\n    const renderAdd = () => (\n        <Button\n            onClick={() => setModalOpen(true)}\n            fullWidth\n            color=\"primary\"\n            variant=\"contained\"\n        >\n            Add section\n        </Button>\n    )\n\n    const renderEmpty = () => {\n        return <Empty isEmpty emptyText=\"No custom questions\" />\n    }\n\n    const renderList = () => {\n        return sections.map((section, index) => (\n            <CustomSectionListItem\n                key={section.label}\n                section={section}\n                onChange={section => handleChange(section, index)}\n                onRemove={() => handleRemove(section, index)}\n                onMoveUp={() => handleMoveUp(section, index)}\n                onMoveDown={() => handleMoveDown(section, index)}\n                onEdit={() => setEditing(section)}\n                isFirst={index === 0}\n                isLast={index === sections.length - 1}\n            />\n        ))\n    }\n\n    return (\n        <>\n            <AddSectionModal\n                visible={modalOpen}\n                onVisibleChange={setModalOpen}\n                onSubmit={handleAdd}\n                reservedNames={reservedNames}\n                editing={editing}\n                onEditDone={section => handleEditDone(section)}\n                onEditCancel={() => setEditing(undefined)}\n            />\n            {sections.length === 0 ? renderEmpty() : renderList()}\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                maxWidth=\"300px\"\n                width=\"100%\"\n                margin=\"0 auto\"\n                padding={2}\n            >\n                {renderAdd()}\n            </Box>\n        </>\n    )\n}\n","import React, { useCallback } from 'react'\nimport { RegistrationFields } from '@hackjunction/shared'\nimport { groupBy } from 'lodash-es'\nimport {\n    FormControl,\n    FormGroup,\n    Typography,\n    Chip,\n    Box,\n} from '@material-ui/core'\nimport VisibilityIcon from '@material-ui/icons/Visibility'\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst fields = RegistrationFields.getFields()\nconst fieldsMapped = Object.keys(fields)\n    .map(fieldName => {\n        if (fields[fieldName].alwaysEnabled) return null\n        // console.log(fields[fieldName])\n        return {\n            fieldName,\n            label: fields[fieldName].label,\n            category: fields[fieldName].category,\n            alwaysRequired: fields[fieldName].alwaysRequired,\n        }\n    })\n    .filter(obj => obj !== null)\nconst fieldsByCategory = groupBy(fieldsMapped, f => f.category.id)\nconst categories = RegistrationFields.getCategoriesArray()\n// console.log(fieldsMapped)\nconst useStyles = makeStyles(theme => ({\n    sectionLabel: {\n        fontWeight: 'bold',\n    },\n    question: {\n        height: 'auto',\n        '& > span': {\n            whiteSpace: 'break-spaces',\n        },\n    },\n}))\n\nexport default ({ onChange, optionalFields = [], requiredFields = [] }) => {\n    const classes = useStyles()\n    const handleChange = useCallback(\n        (fieldName, isOptional, isRequired) => {\n            if (isOptional) {\n                onChange({\n                    requiredFields: [...requiredFields, fieldName],\n                    optionalFields: optionalFields.filter(f => f !== fieldName),\n                })\n            } else if (isRequired) {\n                onChange({\n                    requiredFields: requiredFields.filter(f => f !== fieldName),\n                    optionalFields,\n                })\n            } else {\n                onChange({\n                    requiredFields,\n                    optionalFields: [...optionalFields, fieldName],\n                })\n            }\n        },\n        [onChange, optionalFields, requiredFields],\n    )\n\n    const getChipProps = (isOptional, isRequired) => {\n        if (isOptional) {\n            return {\n                color: 'primary',\n                icon: <VisibilityIcon />,\n            }\n        } else if (isRequired) {\n            return {\n                color: 'secondary',\n                icon: <VisibilityIcon />,\n            }\n        } else {\n            return {\n                variant: 'outlined',\n                icon: <VisibilityOffIcon />,\n            }\n        }\n    }\n\n    return (\n        <FormControl component=\"fieldset\" style={{ display: 'block' }}>\n            <Typography variant=\"h6\" gutterBottom>\n                Registration questions\n            </Typography>\n            <Typography variant=\"body1\">\n                Choose the questions you want to ask people in the registration\n                form. Click on questions to change their status.{' '}\n                <span style={{ fontWeight: 'bold' }}>\n                    First name, last name and email are always shown and\n                    required!\n                </span>\n            </Typography>\n\n            <Box pb={2} pt={2} flexDirection=\"row\" flexWrap=\"wrap\">\n                <Typography variant=\"body1\" gutterBottom>\n                    Legend:\n                </Typography>\n                <Chip\n                    size=\"small\"\n                    variant=\"outlined\"\n                    label=\"Hidden\"\n                    icon={<VisibilityOffIcon />}\n                />{' '}\n                <Chip\n                    size=\"small\"\n                    color=\"primary\"\n                    label=\"Shown, optional\"\n                    icon={<VisibilityIcon />}\n                />{' '}\n                <Chip\n                    size=\"small\"\n                    color=\"secondary\"\n                    label=\"Shown, required\"\n                    icon={<VisibilityIcon />}\n                />\n            </Box>\n\n            {categories.map(({ id, label }) => (\n                <Box mb={2}>\n                    <Typography\n                        className={classes.sectionLabel}\n                        variant=\"button\"\n                        gutterBottom\n                    >\n                        {label}\n                    </Typography>\n                    <FormGroup row>\n                        {console.log(fieldsByCategory[id])}\n                        {fieldsByCategory[id].map(\n                            ({ fieldName, label, alwaysRequired }) => {\n                                const isOptional =\n                                    optionalFields.indexOf(fieldName) !== -1\n                                const isRequired =\n                                    requiredFields.indexOf(fieldName) !== -1\n                                return (\n                                    <Box key={fieldName} mr={1} mt={1}>\n                                        {alwaysRequired ? (\n                                            <Chip\n                                                color=\"secondary\"\n                                                size=\"small\"\n                                                label={label}\n                                                className={classes.question}\n                                                icon={<VisibilityIcon />}\n                                            ></Chip>\n                                        ) : (\n                                            <Chip\n                                                {...getChipProps(\n                                                    isOptional,\n                                                    isRequired,\n                                                )}\n                                                // color=\"secondary\"\n                                                clickable\n                                                size=\"small\"\n                                                onClick={() =>\n                                                    handleChange(\n                                                        fieldName,\n                                                        isOptional,\n                                                        isRequired,\n                                                    )\n                                                }\n                                                label={label}\n                                                className={classes.question}\n                                            ></Chip>\n                                        )}\n                                    </Box>\n                                )\n                            },\n                        )}\n                    </FormGroup>\n                </Box>\n            ))}\n        </FormControl>\n    )\n}\n","import React from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport { FastField } from 'formik'\nimport CustomSectionList from './CustomSectionList'\nimport FormControl from 'components/inputs/FormControl'\n\nimport QuestionSelect from './QuestionSelect'\n\nexport default () => {\n    // const buildColumns = useCallback((form, field, fieldValue) => {\n    //     return [\n    //         {\n    //             Header: 'Name',\n    //             accessor: 'label',\n    //         },\n    //         {\n    //             Header: 'Category',\n    //             accessor: 'category',\n    //         },\n    //         {\n    //             Header: 'Enabled?',\n    //             accessor: 'enabled',\n    //             Cell: props => {\n    //                 const row = props.row.original\n    //                 return (\n    //                     <Switch\n    //                         color=\"primary\"\n    //                         disabled={!row.editable}\n    //                         checked={row.enable}\n    //                         onChange={(e, enable) => {\n    //                             form.setFieldValue(field.name, {\n    //                                 ...fieldValue,\n    //                                 [row.key]: {\n    //                                     ...fieldValue[row.key],\n    //                                     enable,\n    //                                     require: !enable ? false : row.require,\n    //                                 },\n    //                             })\n    //                         }}\n    //                     />\n    //                 )\n    //             },\n    //         },\n    //         {\n    //             Header: 'Required?',\n    //             accessor: 'require',\n    //             Cell: props => {\n    //                 const row = props.row.original\n    //                 return (\n    //                     <Switch\n    //                         color=\"primary\"\n    //                         disabled={!row.editable || !row.enable}\n    //                         checked={row.require}\n    //                         onChange={(e, require) => {\n    //                             form.setFieldValue(field.name, {\n    //                                 ...fieldValue,\n    //                                 [row.key]: {\n    //                                     ...fieldValue[row.key],\n    //                                     require,\n    //                                 },\n    //                             })\n    //                         }}\n    //                     />\n    //                 )\n    //             },\n    //         },\n    //     ]\n    // }, [])\n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"registrationConfig\"\n                    render={({ field, form }) => (\n                        <QuestionSelect\n                            optionalFields={field?.value?.optionalFields}\n                            requiredFields={field?.value?.requiredFields}\n                            onChange={value =>\n                                form.setFieldValue(field.name, value)\n                            }\n                        />\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"customQuestions\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Custom questions\"\n                            hint=\"Add custom registration questions\"\n                        >\n                            <CustomSectionList\n                                sections={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { Grid } from '@material-ui/core'\nimport { FastField } from 'formik'\n\nimport FormControl from 'components/inputs/FormControl'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\n\nexport default () => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"demoLabel\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Demo label\"\n                            hint=\"Demo label\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"demoLabel\"\n                                placeholder=\"Demo URL\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"demoHint\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Demo Hint\"\n                            hint=\"Hint message you want to have displayed on the submission form\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextAreaInput\n                                name=\"demoHint\"\n                                placeholder=\"Add the link of the working version of your project. Depending on the event, this could be a link to an API, a link to file or a presentation. Make sure the link is accessible for humans, as well as machines!\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"demoPlaceholder\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Demo Placeholder\"\n                            hint=\"Placeholder message you want to have displayed on the submission form\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TextInput\n                                name=\"demoPlaceholder\"\n                                placeholder=\"https://..\"\n                                value={field.value}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                                onBlur={() => form.setFieldTouched(field.name)}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState, useCallback, useMemo } from 'react'\n\nimport {\n    Paper,\n    Grid,\n    Box,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Tooltip,\n    Typography,\n    Tabs,\n    Tab,\n} from '@material-ui/core'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport EditIcon from '@material-ui/icons/Edit'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\nimport DateTimeInput from 'components/inputs/DateTimeInput'\nimport moment from 'moment'\nimport SelectInput from 'components/inputs/Select'\n\nexport default ({ value, onChange }) => {\n    const [titleValue, setTitleValue] = useState()\n    const [startTimeValue, setStartTimeValue] = useState(\n        new Date(new Date(new Date().setHours(0, 0, 0, 0))),\n    )\n    const [editIndex, setEditIndex] = useState(-1)\n    const [editValue, setEditValue] = useState({\n        title: '',\n        startTime: undefined,\n    })\n    const [timezone, setTimezone] = useState('Etc/UTC')\n\n    // Add state for active region tab\n    const [activeRegion, setActiveRegion] = useState('americas')\n\n    // Create separate values for each region if not present\n    const regionValues = useMemo(() => {\n        const regions = {\n            americas: Array.isArray(value)\n                ? value.filter(\n                      item =>\n                          item && (item.region === 'americas' || !item.region),\n                  )\n                : [],\n            epac: Array.isArray(value)\n                ? value.filter(item => item && item.region === 'epac')\n                : [],\n            apac: Array.isArray(value)\n                ? value.filter(item => item && item.region === 'apac')\n                : [],\n        }\n        return regions\n    }, [value])\n\n    // console.log('timezone', timezone)\n\n    const handleAdd = useCallback(() => {\n        if (!titleValue || !startTimeValue) return\n\n        // Add new item with region data\n        const newItem = {\n            title: titleValue,\n            startTime: startTimeValue,\n            region: activeRegion,\n        }\n\n        // Safely handle the case where value might not be an array\n        onChange(Array.isArray(value) ? [...value, newItem] : [newItem])\n        setTitleValue('')\n        setStartTimeValue(new Date(new Date().setHours(0, 0, 0, 0)))\n    }, [value, titleValue, startTimeValue, onChange, activeRegion])\n\n    const handleRemove = useCallback(\n        index => {\n            // Ensure regionValues[activeRegion] exists and has items\n            if (\n                !regionValues[activeRegion] ||\n                index >= regionValues[activeRegion].length\n            ) {\n                return\n            }\n\n            // Find the actual index in the full value array based on the regional index\n            const itemToRemove = regionValues[activeRegion][index]\n            if (!itemToRemove) return\n\n            const globalIndex = Array.isArray(value)\n                ? value.findIndex(\n                      item =>\n                          item &&\n                          itemToRemove &&\n                          item.title === itemToRemove.title &&\n                          item.startTime === itemToRemove.startTime &&\n                          item.region === itemToRemove.region,\n                  )\n                : -1\n\n            if (globalIndex !== -1) {\n                onChange(value.filter((_, idx) => idx !== globalIndex))\n            }\n        },\n        [value, onChange, regionValues, activeRegion],\n    )\n\n    const handleEditStart = useCallback(\n        index => {\n            // Ensure regionValues[activeRegion] exists and has items\n            if (\n                !regionValues[activeRegion] ||\n                index >= regionValues[activeRegion].length\n            ) {\n                return\n            }\n\n            // Find the actual index in the full value array based on the regional index\n            const itemToEdit = regionValues[activeRegion][index]\n            if (!itemToEdit) return\n\n            const globalIndex = Array.isArray(value)\n                ? value.findIndex(\n                      item =>\n                          item &&\n                          itemToEdit &&\n                          item.title === itemToEdit.title &&\n                          item.startTime === itemToEdit.startTime &&\n                          item.region === itemToEdit.region,\n                  )\n                : -1\n\n            if (globalIndex !== -1) {\n                setEditIndex(globalIndex)\n                setEditValue(value[globalIndex])\n            }\n        },\n        [value, regionValues, activeRegion],\n    )\n\n    const handleEditCancel = useCallback(() => {\n        setEditIndex(-1)\n        setEditValue({\n            title: '',\n            startTime: undefined,\n        })\n    }, [])\n\n    const handleEditSave = useCallback(() => {\n        if (\n            !Array.isArray(value) ||\n            editIndex < 0 ||\n            editIndex >= value.length\n        ) {\n            handleEditCancel()\n            return\n        }\n\n        onChange(\n            value.map((item, index) => {\n                if (index === editIndex) {\n                    return {\n                        ...editValue,\n                        region: activeRegion, // Ensure region is preserved during edits\n                    }\n                }\n                return item\n            }),\n        )\n        handleEditCancel()\n    }, [value, editIndex, editValue, onChange, handleEditCancel, activeRegion])\n\n    const isValid = useMemo(() => {\n        return (\n            titleValue &&\n            startTimeValue &&\n            regionValues[activeRegion] &&\n            regionValues[activeRegion].filter(item => {\n                return (\n                    item &&\n                    item.title === titleValue &&\n                    moment(item.startTime).isSame(moment(startTimeValue))\n                )\n            }).length === 0\n        )\n    }, [startTimeValue, titleValue, regionValues, activeRegion])\n\n    // Handle region tab change\n    const handleRegionChange = (event, newValue) => {\n        setActiveRegion(newValue)\n    }\n\n    const renderListItem = (item, index) => {\n        if (index === editIndex) {\n            return (\n                <ListItem key={`item-${index}`} divider>\n                    <Grid container style={{ justifyContent: 'space-between' }}>\n                        <Grid item xs={11}>\n                            <TextInput\n                                value={editValue.title}\n                                onChange={value =>\n                                    setEditValue({ ...editValue, title: value })\n                                }\n                                label={`Title of item ${index + 1}`}\n                            />\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Tooltip title=\"Cancel\">\n                                <IconButton onClick={handleEditCancel}>\n                                    <CloseIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                        <Grid item xs={11}>\n                            <DateTimeInput\n                                value={editValue.startTime}\n                                onChange={value =>\n                                    setEditValue({\n                                        ...editValue,\n                                        startTime: value,\n                                    })\n                                }\n                                timezone={timezone}\n                            />\n                        </Grid>\n                        <Grid item xs={1}>\n                            <Tooltip title=\"Save\">\n                                <IconButton\n                                    disabled={\n                                        !editValue ||\n                                        editValue.title.length < 1 ||\n                                        !editValue.startTime\n                                    }\n                                    onClick={handleEditSave}\n                                >\n                                    <SaveIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                    </Grid>\n                </ListItem>\n            )\n        }\n\n        return (\n            <ListItem key={`item-${index}`} divider>\n                <ListItemText\n                    primary={item.title}\n                    secondary={moment(item.startTime.toString()).format(\n                        'YYYY-MM-DD h:mma',\n                    )}\n                />\n                <ListItemSecondaryAction>\n                    <Tooltip title=\"Edit item\">\n                        <IconButton onClick={() => handleEditStart(index)}>\n                            <EditIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Remove item\">\n                        <IconButton onClick={() => handleRemove(index)}>\n                            <HighlightOffIcon />\n                        </IconButton>\n                    </Tooltip>\n                </ListItemSecondaryAction>\n            </ListItem>\n        )\n    }\n\n    return (\n        <Paper>\n            <Box p={3}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Tabs\n                            value={activeRegion}\n                            onChange={handleRegionChange}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            variant=\"fullWidth\"\n                        >\n                            <Tab label=\"Americas\" value=\"americas\" />\n                            <Tab label=\"EPAC (Europe/Africa)\" value=\"epac\" />\n                            <Tab label=\"APAC (Asia/Pacific)\" value=\"apac\" />\n                        </Tabs>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <SelectInput\n                            label=\"Timezone\"\n                            options=\"timezone\"\n                            value={timezone}\n                            onChange={timezone => {\n                                setTimezone(timezone)\n                            }}\n                        />\n                        <Typography variant=\"caption\">\n                            Timezone for the timeline items (defaults to UTC)\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextInput\n                            label=\"Item title\"\n                            value={titleValue}\n                            onChange={setTitleValue}\n                        />\n                        <Typography variant=\"caption\">\n                            The title of the timeline item\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <DateTimeInput\n                            value={startTimeValue}\n                            onChange={setStartTimeValue}\n                            timezone={timezone}\n                        />\n                        <Typography variant=\"caption\">\n                            The timeline item will start at this time\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            display=\"flex\"\n                            flexDirection=\"row\"\n                            justifyContent=\"flex-end\"\n                        >\n                            <Button\n                                disabled={!isValid}\n                                onClick={handleAdd}\n                                color=\"theme_turquoise\"\n                                variant=\"contained\"\n                            >\n                                Add item\n                            </Button>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                            {activeRegion === 'americas'\n                                ? 'Americas'\n                                : activeRegion === 'epac'\n                                ? 'EPAC (Europe/Africa)'\n                                : 'APAC (Asia/Pacific)'}{' '}\n                            Timeline Items\n                        </Typography>\n                        <List>\n                            {regionValues[activeRegion] &&\n                                regionValues[activeRegion]\n                                    .sort((a, b) =>\n                                        a.startTime < b.startTime ? -1 : 1,\n                                    )\n                                    .map((item, index) =>\n                                        renderListItem(item, index),\n                                    )}\n                        </List>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Paper>\n    )\n}\n","import React from 'react'\n\nimport { Box, Grid, Paper } from '@material-ui/core'\nimport FormControl from 'components/inputs/FormControl'\nimport { Field } from 'formik'\nimport Button from 'components/generic/Button'\nimport TextInput from 'components/inputs/TextInput'\nimport DateTimeInput from 'components/inputs/DateTimeInput'\nimport TimelineForm from './TimelineForm'\n\nexport default () => {\n    return (\n        <Grid item xs={12}>\n            <Field\n                name=\"eventTimeline.items\"\n                render={({ field, form }) => {\n                    // Ensure field.value is an array and all timeline items have a region property\n                    const items = Array.isArray(field.value)\n                        ? field.value.map(item => {\n                              if (\n                                  item &&\n                                  typeof item === 'object' &&\n                                  !item.region\n                              ) {\n                                  return { ...item, region: 'americas' }\n                              }\n                              return item\n                          })\n                        : []\n\n                    return (\n                        <FormControl\n                            label=\"Timeline\"\n                            hint=\"Timeline for the event displayed on the dashboard and the event information page. You can set different timelines for Americas, EPAC, and APAC regions.\"\n                            error={form.errors[field.name]}\n                            touched={form.touched[field.name]}\n                        >\n                            <TimelineForm\n                                value={items}\n                                onChange={value =>\n                                    form.setFieldValue(field.name, value)\n                                }\n                            />\n                        </FormControl>\n                    )\n                }}\n            />\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { findIndex } from 'lodash-es'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Box,\n    Divider,\n    Grid,\n    Typography,\n} from '@material-ui/core'\n\nimport Select from 'components/inputs/Select'\nimport TextInput from 'components/inputs/TextInput'\nimport Tag from 'components/generic/Tag'\nimport Button from 'components/generic/Button'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useFormField } from 'hooks/formHooks'\n\nconst COLORS = [\n    'hotpink',\n    'magenta',\n    'red',\n    'salmon',\n    'orange',\n    'gold',\n    'lime',\n    'greenyellow',\n    'lightseagreen',\n    'green',\n    'powderblue',\n    'cyan',\n    'blue',\n    'royalblue',\n    'purple',\n]\n\nconst ColorPreview = ({ color }) => {\n    return (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span\n                style={{\n                    height: '10px',\n                    width: '10px',\n                    borderRadius: '50%',\n                    background: color,\n                    marginRight: '10px',\n                }}\n            />\n            {color}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    errorMessage: {\n        color: theme.palette.error.main,\n    },\n}))\n\nexport default ({ value = [], fieldName, setFieldValue }) => {\n    const classes = useStyles()\n    const label = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'Tag name is required'\n        }\n        if (value.length > 30) {\n            return 'Tag name can be at most 30 characters'\n        }\n        if (findIndex(value, tag => tag.label === value) !== -1) {\n            return `A tag with the name ${value} already exists`\n        }\n\n        return\n    })\n    const color = useFormField(undefined, value => {\n        if (!value || value.length === 0) {\n            return 'Tag color is required'\n        }\n\n        return\n    })\n    const description = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'Please give a short description for your tag'\n        }\n\n        if (value.length > 200) {\n            return 'Tag description must be under 200 characters'\n        }\n    })\n\n    const resetForm = useCallback(() => {\n        label.reset()\n        color.reset()\n        description.reset()\n    }, [label, color, description])\n\n    const handleAdd = useCallback(() => {\n        const items = [label, color, description]\n        let passing = true\n        items.forEach(item => {\n            const err = item.validate(item.value)\n            if (err) {\n                item.setError(err)\n                passing = false\n            }\n        })\n\n        if (!passing) {\n            return\n        } else {\n            setFieldValue(\n                fieldName,\n                value.concat({\n                    label: label.value,\n                    color: color.value,\n                    description: description.value,\n                }),\n            )\n            resetForm()\n        }\n    }, [value, fieldName, color, label, description, resetForm, setFieldValue])\n\n    const handleDelete = useCallback(\n        label => {\n            setFieldValue(\n                fieldName,\n                value.filter(tag => tag.label !== label),\n            )\n        },\n        [setFieldValue, fieldName, value],\n    )\n\n    const renderRows = () => {\n        if (!value) return null\n        return value.map((item, index) => [\n            index !== 0 ? <Divider /> : null,\n            <ListItem>\n                <ListItemText\n                    primary={\n                        <Box mb={0.5}>\n                            <Tag color={item.color} label={item.label} />\n                        </Box>\n                    }\n                    secondary={item.description}\n                />\n                <ListItemSecondaryAction>\n                    <IconButton\n                        onClick={() => handleDelete(item.label)}\n                        edge=\"end\"\n                        aria-label=\"comments\"\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>,\n        ])\n    }\n\n    return (\n        <Grid container spacing={3} alignItems=\"flex-end\">\n            <Grid item xs={12} md={6}>\n                <TextInput\n                    label=\"Tag name\"\n                    value={label.value}\n                    onChange={label.setValue}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {label.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Select\n                    label=\"Tag color\"\n                    placeholder=\"Choose color\"\n                    value={color.value}\n                    onChange={color.setValue}\n                    options={COLORS.map(color => ({\n                        label: <ColorPreview color={color} />,\n                        value: color,\n                    }))}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {color.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={9}>\n                <TextInput\n                    label=\"Tag description\"\n                    value={description.value}\n                    onChange={description.setValue}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {description.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={3}>\n                <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleAdd}\n                >\n                    Add\n                </Button>\n            </Grid>\n            <Grid item xs={12}>\n                <List>{renderRows()}</List>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { findIndex } from 'lodash-es'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport {\n    List,\n    ListItem,\n    ListItemText,\n    ListItemSecondaryAction,\n    IconButton,\n    Divider,\n    Grid,\n    Typography,\n    ListItemIcon,\n    Switch,\n} from '@material-ui/core'\nimport CheckIcon from '@material-ui/icons/Check'\nimport BlockIcon from '@material-ui/icons/Block'\n\nimport Select from 'components/inputs/Select'\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useFormField } from 'hooks/formHooks'\n\nconst ACTIONS = ['save', 'remove']\n\nconst RESOURCES = ['Project', 'Registration']\n\nconst useStyles = makeStyles(theme => ({\n    errorMessage: {\n        color: theme.palette.error.main,\n    },\n}))\n\nexport default ({ value = [], fieldName, setFieldValue }) => {\n    const classes = useStyles()\n    const name = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'A webhook name is required'\n        }\n        if (value.length > 30) {\n            return 'A name can be at most 30 characters'\n        }\n        if (findIndex(value, hook => hook.name === value) !== -1) {\n            return `A webhook with the name ${value} already exists`\n        }\n\n        return\n    })\n    const resource = useFormField(undefined, value => {\n        if (!value || value.length === 0) {\n            return 'A resource is required'\n        }\n\n        return\n    })\n    const action = useFormField(undefined, value => {\n        if (!value || value.length === 0) {\n            return 'An action is required'\n        }\n\n        return\n    })\n\n    const url = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'A URL is required'\n        }\n\n        return\n    })\n\n    const enabled = useFormField(false)\n\n    const resetForm = useCallback(() => {\n        name.reset()\n        resource.reset()\n        action.reset()\n        url.reset()\n        enabled.reset()\n    }, [action, enabled, name, resource, url])\n\n    const handleAdd = useCallback(() => {\n        const items = [name, resource, action, url, enabled]\n        let passing = true\n        items.forEach(item => {\n            const err = item.validate(item.value)\n            if (err) {\n                item.setError(err)\n                passing = false\n            }\n        })\n\n        if (!passing) {\n            return\n        } else {\n            setFieldValue(\n                fieldName,\n                value.concat({\n                    name: name.value,\n                    resource: resource.value,\n                    action: action.value,\n                    url: url.value,\n                    enabled: enabled.value,\n                }),\n            )\n            resetForm()\n        }\n    }, [\n        name,\n        resource,\n        action,\n        url,\n        enabled,\n        setFieldValue,\n        fieldName,\n        value,\n        resetForm,\n    ])\n\n    const handleDelete = useCallback(\n        name => {\n            setFieldValue(\n                fieldName,\n                value.filter(webhook => webhook.name !== name),\n            )\n        },\n        [setFieldValue, fieldName, value],\n    )\n\n    const renderRows = () => {\n        if (!value) return null\n        return value.map((item, index) => [\n            index !== 0 ? <Divider /> : null,\n            <ListItem>\n                <ListItemIcon>\n                    {item.enabled ? <CheckIcon /> : <BlockIcon />}\n                </ListItemIcon>\n                <ListItemText\n                    primary={`${item.name} - On ${item.resource} ${item.action} it will call ${item.url} `}\n                />\n                <ListItemSecondaryAction>\n                    <IconButton\n                        onClick={() => handleDelete(item.name)}\n                        edge=\"end\"\n                        aria-label=\"comments\"\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>,\n        ])\n    }\n\n    return (\n        <Grid container spacing={3} alignItems=\"flex-end\">\n            <Grid item xs={12} md={6}>\n                <TextInput\n                    label=\"Webhook name\"\n                    value={name.value}\n                    onChange={name.setValue}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {name.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Select\n                    label=\"Which resource triggers this hook?\"\n                    placeholder=\"Choose resource\"\n                    value={resource.value}\n                    onChange={resource.setValue}\n                    options={RESOURCES.map(resource => ({\n                        label: resource,\n                        value: resource,\n                    }))}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {resource.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Select\n                    label=\"Which action triggers this hook?\"\n                    placeholder=\"Choose an action\"\n                    value={action.value}\n                    onChange={action.setValue}\n                    options={ACTIONS.map(action => ({\n                        label: action,\n                        value: action,\n                    }))}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {action.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <TextInput\n                    label=\"Webhook URL\"\n                    value={url.value}\n                    onChange={url.setValue}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {url.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Switch\n                    checked={enabled.value}\n                    onChange={(e, value) => enabled.setValue(value)}\n                    color=\"primary\"\n                    name=\"enabled\"\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {enabled.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={3}>\n                <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleAdd}\n                >\n                    Add\n                </Button>\n            </Grid>\n            <Grid item xs={12}>\n                <List>{renderRows()}</List>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { findIndex } from 'lodash-es'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport {\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    IconButton,\n    Grid,\n    Typography,\n} from '@material-ui/core'\n\nimport TextInput from 'components/inputs/TextInput'\nimport Button from 'components/generic/Button'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useFormField } from 'hooks/formHooks'\n\nconst useStyles = makeStyles(theme => ({\n    errorMessage: {\n        color: theme.palette.error.main,\n    },\n    metaDescription: {\n        border: 3,\n        borderRadius: 10,\n        fontSize: 16,\n        borderColor: 'red',\n    },\n}))\n\nexport default ({ value = [], fieldName, setFieldValue }) => {\n    const classes = useStyles()\n    const label = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'Tag name is required'\n        }\n        if (value.length > 30) {\n            return 'Tag name can be at most 30 characters'\n        }\n        if (findIndex(value, tag => tag.label === value) !== -1) {\n            return `A tag with the name ${value} already exists`\n        }\n\n        return\n    })\n\n    const description = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return 'Please give a short description for your tag'\n        }\n\n        if (value.length > 100) {\n            return 'Tag description must be under 100 characters'\n        }\n    })\n\n    const resetForm = useCallback(() => {\n        label.reset()\n\n        description.reset()\n    }, [label, description])\n\n    const handleAdd = useCallback(\n        value => {\n            console.log('description :>> ', description)\n            const item = description\n            let passing = true\n\n            const err = item.validate(item.value)\n\n            if (err) {\n                item.setError(err)\n                passing = false\n            }\n\n            if (!passing) {\n                return\n            } else {\n                value\n                    ? setFieldValue(fieldName, description.value)\n                    : setFieldValue(fieldName, description.value)\n                resetForm()\n            }\n        },\n        [fieldName, description, resetForm, setFieldValue],\n    )\n\n    const handleDelete = useCallback(\n        description => {\n            setFieldValue(fieldName, '')\n        },\n        [setFieldValue, fieldName],\n    )\n\n    const renderRows = () => {\n        if (!value) return null\n        console.log('value :>> ', value)\n        return (\n            <ListItem>\n                <p>{value}</p>\n                <ListItemSecondaryAction>\n                    <IconButton\n                        onClick={() => handleDelete(value)}\n                        edge=\"end\"\n                        aria-label=\"comments\"\n                    >\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </ListItem>\n        )\n    }\n\n    return (\n        <Grid container spacing={3} alignItems=\"flex-end\">\n            <Grid item xs={12} md={6}>\n                <Typography\n                    variant=\"caption\"\n                    className={classes.errorMessage}\n                ></Typography>\n            </Grid>\n            <Grid item xs={12} md={9}>\n                <TextInput\n                    label=\"Description metatag\"\n                    value={description.value}\n                    onChange={description.setValue}\n                />\n                <Typography variant=\"caption\" className={classes.errorMessage}>\n                    {description.error}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={3}>\n                <Button\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleAdd}\n                >\n                    Add\n                </Button>\n            </Grid>\n            <Grid item xs={12} className={classes.metaDescription}>\n                <List>{renderRows()}</List>\n            </Grid>\n        </Grid>\n    )\n}\n","import React, { useState } from 'react'\nimport PdfUpload from 'components/inputs/PdfUpload'\nimport { useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nimport TextInput from 'components/inputs/TextInput'\n\nconst CertificateForm = ({\n    value = {\n        url: '',\n        publicId: '',\n        x: 0,\n        y: 0,\n    },\n    fieldName,\n    setFieldValue,\n}) => {\n    const event = useSelector(OrganiserSelectors.event)\n    const [url, setUrl] = useState(value.url)\n    const [publicId, setPublicId] = useState(value.publicId)\n\n    //TODO: Add validation\n    const [x, setX] = useState(value.x)\n    const [y, setY] = useState(value.y)\n\n    return (\n        <>\n            <PdfUpload\n                value={{ url, publicId }}\n                onChange={async value => {\n                    if (typeof value === 'undefined') {\n                        setUrl('')\n                        setPublicId('')\n                        await setFieldValue(fieldName, {\n                            url: '',\n                            publicId: '',\n                            x: x,\n                            y: y,\n                        })\n                    } else {\n                        setUrl(value.url)\n                        console.log('url', value.url)\n                        setPublicId(value.publicId)\n                        await setFieldValue(fieldName, {\n                            url: value.url,\n                            publicId: value.publicId,\n                            x: x,\n                            y: y,\n                        })\n                    }\n                }}\n                uploadUrl={`/api/upload/events/${event.slug}/certificate`}\n            />\n            {/* Add validation to accept only numbers */}\n            {/* <TextInput\n                value={x}\n                inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                onChange={async value => {\n                    setX(value)\n                    await setFieldValue(fieldName, {\n                        url,\n                        publicId,\n                        x,\n                        y,\n                    })\n                }}\n            />\n            <TextInput\n                value={y}\n                inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                onChange={async value => {\n                    setY(value)\n                    await setFieldValue(fieldName, {\n                        url,\n                        publicId,\n                        x,\n                        y,\n                    })\n                }}\n            /> */}\n        </>\n    )\n}\n\nexport default CertificateForm\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Grid } from '@material-ui/core'\nimport { FastField, Field } from 'formik'\nimport FormControl from 'components/inputs/FormControl'\nimport EventTagsForm from './EventTagsForm'\nimport WebhooksForm from './WebhooksForm'\nimport MetaTagsForm from './MetaTagsForm'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport CertificateForm from './CertificateForm'\n\nexport default () => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"tags\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Tags\"\n                            hint=\"Add tags with which you can mark registrations\"\n                        >\n                            <EventTagsForm\n                                value={field.value}\n                                fieldName={field.name}\n                                setFieldValue={form.setFieldValue}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            {/* <Grid item xs={12}>\n                <FastField\n                    name=\"webhooks\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Webhooks\"\n                            hint=\"Add webhooks that should fire on different events\"\n                        >\n                            <WebhooksForm\n                                value={field.value}\n                                fieldName={field.name}\n                                setFieldValue={form.setFieldValue}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid>\n            <Grid item xs={12}>\n                <FastField\n                    name=\"metaDescription\"\n                    render={({ field, form }) => (\n                        <FormControl\n                            label=\"Meta Tags\"\n                            hint=\"Add meta tag descriptions. Default one is '<Event Name> is coming up! If you're interested in joining the coolest hackathon on the planet just head straight to ...'\"\n                        >\n                            <MetaTagsForm\n                                value={field.value}\n                                fieldName={field.name}\n                                setFieldValue={form.setFieldValue}\n                            />\n                        </FormControl>\n                    )}\n                />\n            </Grid> */}\n            {/* <Grid item xs={12}>\n                <Field\n                    name=\"certificate\"\n                    render={({ field, form }) => {\n                        console.log(field)\n                        return (\n                            <FormControl\n                                label=\"Certificate\"\n                                hint=\"Add a certificate that will be given to the participants. max file size: 10mb\"\n                                error={form.errors[field.name]}\n                                touched={form.touched[field.name]}\n                            >\n                                <CertificateForm\n                                    value={field.value}\n                                    fieldName={field.name}\n                                    setFieldValue={form.setFieldValue}\n                                />\n                            </FormControl>\n                        )\n                    }}\n                />\n            </Grid> */}\n        </Grid>\n    )\n}\n","import { gql } from '@apollo/client'\n\nconst Fragments = {\n    EventFull: gql`\n        fragment EventFull on Event {\n            _id\n            slug\n            name\n            galleryOpen\n            coverImage {\n                url\n                publicId\n            }\n            eventType\n            startTime\n            emcaStartTime\n            asiaStartTime\n            registrationStartTime\n            emcaRegistrationStartTime\n            asiaRegistrationStartTime\n            registrationEndTime\n            emcaRegistrationEndTime\n            asiaRegistrationEndTime\n            organizations {\n                name\n                slug\n                about\n                link\n                icon\n            }\n            published\n            approved\n            _eventLocationFormatted\n            _eventTimeFormatted\n        }\n    `,\n}\n\nexport const UPDATE_EVENT = gql`\n    mutation UpdateEvent($_id: ID!, $input: EventInput!) {\n        updateEvent(_id: $_id, event: $input) {\n            ...EventFull\n        }\n    }\n    ${Fragments.EventFull}\n`\n","import React from 'react'\n\nimport yupSchema from '@hackjunction/shared/schemas/validation/eventSchema'\n\nimport { Formik } from 'formik'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { forOwn } from 'lodash-es'\nimport { useRouteMatch, useLocation } from 'react-router'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport PageHeader from 'components/generic/PageHeader'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\nimport BottomBar from 'components/inputs/BottomBar'\n\nimport DefaultTab from './default'\nimport ConfigurationTab from './configuration'\nimport ChallengesTab from './challenges'\nimport AmericaScheduleTab from './schedule/america'\nimport EmcaScheduleTab from './schedule/emca'\nimport AsiaScheduleTab from './schedule/asia'\nimport QuestionsTab from './questions'\nimport SubmissionFormTab from './submission'\nimport TimelineTab from './timeline'\nimport OtherTab from './other'\nimport { useMutation } from '@apollo/client'\nimport { UPDATE_EVENT } from 'graphql/mutations/eventOps'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const [saveChanges, saveResult] = useMutation(UPDATE_EVENT, {\n        errorPolicy: 'all', // <- add this line\n\n        onError: err => {\n            const errors = err.graphQLErrors\n            if (errors) {\n                dispatch(\n                    SnackbarActions.error('Unable to save changes', {\n                        errorMessages: Object.keys(errors).map(\n                            key => `${key}: ${errors[key].message}`,\n                        ),\n                        persist: true,\n                    }),\n                )\n            } else {\n                dispatch(SnackbarActions.error('Unable to save changes'))\n            }\n        },\n        onCompleted: () => {\n            dispatch(OrganiserActions.updateEvent(slug)).then(() =>\n                dispatch(\n                    SnackbarActions.success(\n                        'Your changes were saved successfully',\n                    ),\n                ),\n            )\n        },\n    })\n    const match = useRouteMatch()\n    const location = useLocation()\n\n    const event = useSelector(OrganiserSelectors.event)\n    const loading = useSelector(OrganiserSelectors.eventLoading)\n    const { slug, _id } = event\n\n    function onSubmit(values, actions) {\n        const changed = {}\n        forOwn(values, (value, field) => {\n            if (event[field] !== value) {\n                changed[field] = value\n            }\n        })\n        const cleanedInput = {\n            ...values,\n            registrationConfig: {\n                ...values.registrationConfig,\n                optionalFields: values.registrationConfig.optionalFields,\n                requiredFields: values.registrationConfig.requiredFields,\n            },\n            theme: {\n                ...values.theme,\n            },\n        }\n\n        // Remove fields not accepted by EventInput type\n        delete cleanedInput._id\n        delete cleanedInput.slug_history\n        delete cleanedInput.rankedWinners\n        delete cleanedInput.createdAt\n        delete cleanedInput.updatedAt\n        delete cleanedInput.__v\n        delete cleanedInput.allowProjectSubmissionsPerChallenge\n        delete cleanedInput.allowVoteOnOwnProject\n        delete cleanedInput.slackChannel\n\n        // Remove _id from nested objects\n        if (cleanedInput.registrationConfig) {\n            delete cleanedInput.registrationConfig._id\n        }\n\n        if (cleanedInput.theme) {\n            delete cleanedInput.theme._id\n        }\n\n        if (cleanedInput.eventTimeline) {\n            delete cleanedInput.eventTimeline._id\n        }\n\n        // Remove _id from all elements with IDs in arrays\n        ;['coverImage', 'logo'].forEach(field => {\n            if (cleanedInput[field] && cleanedInput[field]._id) {\n                delete cleanedInput[field]._id\n            }\n        })\n\n        saveChanges({\n            variables: { _id, input: cleanedInput },\n        })\n        actions.setSubmitting(false)\n    }\n    return (\n        <PageWrapper loading={loading}>\n            <PageHeader\n                heading=\"Edit event\"\n                subheading=\"Configure event information, schedule and other settings\"\n            />\n            <Formik\n                initialValues={\n                    saveResult.data ? saveResult.data.updateEvent : event\n                }\n                enableReinitialize={true}\n                onSubmit={onSubmit}\n                validationSchema={yupSchema}\n            >\n                {formikProps => (\n                    <>\n                        <MaterialTabsLayout\n                            transparent\n                            tabs={[\n                                {\n                                    path: '',\n                                    key: 'basic-details',\n                                    label: 'Basic Details',\n                                    component: DefaultTab,\n                                },\n                                {\n                                    path: '/configuration',\n                                    key: 'configuration',\n                                    label: 'Configuration',\n                                    component: ConfigurationTab,\n                                },\n                                // {\n                                //     path: '/challenges',\n                                //     key: 'challenges',\n                                //     label: 'Challenges',\n                                //     component: ChallengesTab,\n                                // },\n                                {\n                                    path: '/america-schedule',\n                                    key: 'america-schedule',\n                                    label: 'America Schedule',\n                                    component: AmericaScheduleTab,\n                                },\n                                {\n                                    path: '/emca-schedule',\n                                    key: 'emca-schedule',\n                                    label: 'EMEA Schedule',\n                                    component: EmcaScheduleTab,\n                                },\n                                {\n                                    path: '/asia-schedule',\n                                    key: 'asia-schedule',\n                                    label: 'APAC Schedule',\n                                    component: AsiaScheduleTab,\n                                },\n                                {\n                                    path: '/timeline',\n                                    key: 'timeline',\n                                    label: 'Timeline',\n                                    component: TimelineTab,\n                                },\n                                {\n                                    path: '/questions',\n                                    key: 'questions',\n                                    label: 'Questions',\n                                    component: QuestionsTab,\n                                },\n                                {\n                                    path: '/submission',\n                                    key: 'submission',\n                                    label: 'Submission form',\n                                    component: SubmissionFormTab,\n                                },\n                                {\n                                    path: '/other',\n                                    key: 'other',\n                                    label: 'Miscellaneous',\n                                    component: OtherTab,\n                                },\n                            ]}\n                            location={location}\n                            baseRoute={match.url}\n                        />\n                        <div style={{ height: '100px' }} />\n                        <BottomBar\n                            onSubmit={formikProps.handleSubmit}\n                            errors={formikProps.errors}\n                            dirty={formikProps.dirty}\n                            loading={saveResult.loading}\n                        />\n                    </>\n                )}\n            </Formik>\n        </PageWrapper>\n    )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n    Drawer,\n    Box,\n    Typography,\n    List,\n    ListItemText,\n    ListItem,\n    ListItemSecondaryAction,\n    IconButton,\n    ListItemAvatar,\n    Avatar,\n} from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport Button from 'components/generic/Button'\nimport TextInput from 'components/inputs/TextInput'\nimport UserProfilesService from 'services/userProfiles'\n\nexport default ({ isOpen, onClose, onAdded, organisers, slug }) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const [results, setResults] = useState([])\n    const [searchValue, setSearchValue] = useState('')\n\n    const handleSearch = useCallback(() => {\n        UserProfilesService.queryUsers(idToken, searchValue)\n            .then(users => {\n                if (users.length === 0) {\n                    dispatch(SnackbarActions.show('No users found'))\n                }\n                setResults(users)\n            })\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        'Something went wrong... Please try again.',\n                    ),\n                )\n            })\n    }, [searchValue, idToken, dispatch])\n\n    const handleAdd = useCallback(\n        user => {\n            onAdded(user.userId)\n            onClose()\n        },\n        [onAdded, onClose],\n    )\n\n    return (\n        <Drawer anchor=\"right\" onClose={onClose} open={isOpen}>\n            <Box width=\"500px\" p={3}>\n                <Typography variant=\"h6\" gutterBottom>\n                    Search for users\n                </Typography>\n                <TextInput\n                    placeholder=\"Search by first name, last name or e-mail address\"\n                    value={searchValue}\n                    onChange={setSearchValue}\n                />\n                <Box p={1} />\n                <Button\n                    fullWidth\n                    color=\"primary\"\n                    variant=\"contained\"\n                    onClick={handleSearch}\n                >\n                    Search\n                </Button>\n                <Box p={1} />\n                <List>\n                    {results.map(user => (\n                        <ListItem key={user.userId}>\n                            <ListItemAvatar>\n                                <Avatar\n                                    alt={'User avatar image'}\n                                    src={user ? user.avatar : ''}\n                                />\n                            </ListItemAvatar>\n\n                            <ListItemText\n                                primary={`${user.firstName} ${user.lastName}`}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"p\"\n                                            variant=\"body2\"\n                                        >\n                                            E-mail:{' '}\n                                            <strong>{user.email}</strong>\n                                        </Typography>\n                                        <Typography\n                                            component=\"p\"\n                                            variant=\"body2\"\n                                        >\n                                            Account created:{' '}\n                                            <strong>\n                                                {new Date(\n                                                    user.createdAt,\n                                                ).toLocaleString()}\n                                            </strong>\n                                        </Typography>\n                                    </React.Fragment>\n                                }\n                            />\n                            {organisers.indexOf(user.userId) === -1 ? (\n                                <ListItemSecondaryAction>\n                                    <IconButton onClick={() => handleAdd(user)}>\n                                        <AddIcon />\n                                    </IconButton>\n                                </ListItemSecondaryAction>\n                            ) : (\n                                <ListItemSecondaryAction>\n                                    <Typography variant=\"button\">\n                                        Added\n                                    </Typography>\n                                </ListItemSecondaryAction>\n                            )}\n                        </ListItem>\n                    ))}\n                </List>\n            </Box>\n        </Drawer>\n    )\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { concat } from 'lodash-es'\n\nimport {\n    ListItemSecondaryAction,\n    List,\n    ListItem,\n    ListItemText,\n} from '@material-ui/core'\n\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\n\nimport Button from 'components/generic/Button'\nimport PageHeader from 'components/generic/PageHeader'\nimport PageWrapper from 'components/layouts/PageWrapper'\n\nimport AddOrganiserDrawer from './AddOrganiserDrawer'\n\nexport default () => {\n    const dispatch = useDispatch()\n\n    const event = useSelector(OrganiserSelectors.event)\n    const eventLoading = useSelector(OrganiserSelectors.eventLoading)\n    const organiserProfiles = useSelector(OrganiserSelectors.organisers)\n\n    const [drawerOpen, setDrawerOpen] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const { slug } = event\n\n    useEffect(() => {\n        dispatch(\n            OrganiserActions.updateOrganisersForEvent(\n                event.owner,\n                event.organisers,\n            ),\n        ).catch(() => {\n            dispatch(\n                SnackbarActions.error(\n                    'Oops, something went wrong... Unable to load organisers. Please try again.',\n                ),\n            )\n        })\n    }, [event.organisers, event.owner, dispatch])\n\n    const handleOrganiserRemoved = useCallback(\n        userId => {\n            setLoading(true)\n            dispatch(OrganiserActions.removeOrganiserFromEvent(slug, userId))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Organiser removed'))\n                })\n                .catch(() => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Oops, something went wrong... Unable to remove organiser',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, slug],\n    )\n\n    const handleOrganiserAdded = useCallback(\n        userId => {\n            setLoading(true)\n            dispatch(OrganiserActions.addOrganiserToEvent(slug, userId))\n                .then(() => {\n                    dispatch(SnackbarActions.success('Added organiser'))\n                })\n                .catch(err => {\n                    dispatch(\n                        SnackbarActions.error(\n                            'Oops, something went wrong... Please try again.',\n                        ),\n                    )\n                })\n                .finally(() => {\n                    setLoading(false)\n                })\n        },\n        [dispatch, slug],\n    )\n\n    return (\n        <PageWrapper\n            loading={eventLoading}\n            error={!event && !eventLoading}\n            render={() => (\n                <>\n                    <PageHeader\n                        heading=\"Organisers\"\n                        subheading=\"Manage who has access to edit this event\"\n                    />\n                    <Button\n                        loading={loading}\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => setDrawerOpen(true)}\n                    >\n                        Add organisers\n                    </Button>\n                    <List>\n                        {organiserProfiles.map(profile => (\n                            <ListItem key={profile.userId} divider>\n                                <ListItemText\n                                    primary={`${profile.firstName} ${profile.lastName}`}\n                                    secondary={profile.email}\n                                />\n                                <ListItemSecondaryAction>\n                                    <Button\n                                        loading={loading}\n                                        color=\"error\"\n                                        onClick={() =>\n                                            handleOrganiserRemoved(\n                                                profile.userId,\n                                            )\n                                        }\n                                    >\n                                        Remove\n                                    </Button>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        ))}\n                    </List>\n\n                    <AddOrganiserDrawer\n                        isOpen={drawerOpen}\n                        onClose={() => setDrawerOpen(false)}\n                        onAdded={handleOrganiserAdded}\n                        slug={event.slug}\n                        organisers={concat(event.owner, event.organisers)}\n                    />\n                </>\n            )}\n        />\n    )\n}\n","import _axios from 'services/axios'\n\nconst SlackService = {}\n\nfunction config(idToken) {\n    return {\n        headers: {\n            Authorization: `Bearer ${idToken}`,\n        },\n    }\n}\n\nconst BASE_ROUTE = '/slack'\n\nSlackService.sendPreviewMessage = (idToken, slug, to, params) => {\n    const data = {\n        to,\n        params,\n    }\n    return _axios.post(`${BASE_ROUTE}/${slug}/preview`, data, config(idToken))\n}\n\nSlackService.sendBulkMessage = (\n    idToken,\n    slug,\n    recipients,\n    params,\n    uniqueId,\n) => {\n    const data = {\n        recipients,\n        params,\n        uniqueId,\n    }\n\n    return _axios.post(`${BASE_ROUTE}/${slug}/send`, data, config(idToken))\n}\n\nSlackService.sendContactMessage = params => {\n    const data = {\n        params,\n    }\n    return _axios.post(`${BASE_ROUTE}/contact`, data)\n}\n\nexport default SlackService\n","import React, { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n    Typography,\n    Grid,\n    Box,\n    Dialog,\n    DialogContent,\n    DialogActions,\n} from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport TextInput from 'components/inputs/TextInput'\nimport TextAreaInput from 'components/inputs/TextAreaInput'\nimport ConfirmDialog from 'components/generic/ConfirmDialog'\nimport Button from 'components/generic/Button'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as UserSelectors from 'redux/user/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport { useFormField } from 'hooks/formHooks'\nimport SlackService from 'services/slack'\nimport { useTranslation } from 'react-i18next'\n\nexport default ({ visible, userIds = [], onClose }) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const user = useSelector(UserSelectors.userProfile)\n    const event = useSelector(OrganiserSelectors.event)\n    const [loading, setLoading] = useState(false)\n    const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n    const headerImage = useFormField('')\n    const { t } = useTranslation()\n    const subject = useFormField('', value => {\n        if (!value || value.length === 0) {\n            return t('Subject_required_')\n        }\n        if (value.length > 50) {\n            return t('Subject_most_chars_')\n        }\n\n        return\n    })\n    const subtitle = useFormField('')\n    const body = useFormField('', value => {\n        if (!body || body.length === 0) {\n            return t('Body_required_')\n        }\n\n        if (body.length > 1000) {\n            return t('Body_most_chars_')\n        }\n\n        return\n    })\n    const messageId = useFormField('')\n    const ctaText = useFormField('')\n    const ctaLink = useFormField(\n        '',\n        useCallback(\n            value => {\n                if (ctaText.value && ctaText.value.length > 0) {\n                    if (!value || value.length === 0) {\n                        return t('Call_to_action_required_')\n                    }\n                    if (value.indexOf('http') !== 0) {\n                        return t('Call_to_action_valid_')\n                    }\n                }\n                return\n            },\n            [ctaText.value, t],\n        ),\n    )\n\n    const fields = [\n        headerImage,\n        subject,\n        subtitle,\n        body,\n        messageId,\n        ctaText,\n        ctaLink,\n    ]\n\n    const params = {\n        subject: subject.value,\n        subtitle: subtitle.value,\n        header_image: headerImage.value,\n        body: body.value,\n        cta_text: ctaText.value,\n        cta_link: ctaLink.value,\n    }\n\n    const validate = useCallback(() => {\n        const errors = fields\n            .map(field => {\n                return field.validate()\n            })\n            .filter(error => typeof error !== 'undefined')\n\n        if (errors.length > 0) {\n            errors.forEach(error => {\n                dispatch(SnackbarActions.error(error))\n            })\n            return false\n        }\n        return true\n    }, [dispatch, fields])\n\n    const handleTestEmail = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        SlackService.sendPreviewMessage(idToken, event.slug, user.email, params)\n            .then(() => {\n                dispatch(\n                    SnackbarActions.success(\n                        t('Test_email_sent_', { user: user.email }),\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n        return null\n    }, [validate, idToken, event.slug, user.email, params, dispatch, t])\n\n    const handleConfirm = useCallback(() => {\n        if (!validate()) return\n        setLoading(true)\n        SlackService.sendBulkMessage(\n            idToken,\n            event.slug,\n            userIds,\n            params,\n            messageId.value,\n        )\n            .then(data => {\n                dispatch(\n                    SnackbarActions.success(t(''), { autoHideDuration: 5000 }),\n                )\n            })\n            .catch(err => {\n                dispatch(SnackbarActions.error(t('Something_wrong_')))\n            })\n            .finally(() => {\n                setLoading(false)\n                onClose()\n            })\n    }, [\n        validate,\n        idToken,\n        event.slug,\n        userIds,\n        params,\n        messageId.value,\n        dispatch,\n        onClose,\n        t,\n    ])\n\n    if (!userIds.length) return null\n\n    return (\n        <Dialog fullScreen open={visible} onClose={onClose}>\n            <DialogContent>\n                <PageWrapper loading={loading} wrapContent={false}>\n                    <Container center>\n                        <ConfirmDialog\n                            open={confirmModalOpen}\n                            title={t('Sure_')}\n                            message={`Are you sure you want to send this message to ${userIds.length} participants?`}\n                            onClose={setConfirmModalOpen}\n                            onOk={handleConfirm}\n                        />\n                        <PageHeader\n                            heading=\"Send message in Slack\"\n                            subheading={\n                                userIds.length + ' selected participants'\n                            }\n                        />\n                        <Typography variant=\"body1\" paragraph>\n                            Here you can send a message to all selected\n                            participants in Slack.\n                        </Typography>\n                        <Grid container spacing={3}>\n                            {/* <Grid item xs={12}>\n                                <TextInput\n                                    value={headerImage.value}\n                                    onChange={headerImage.setValue}\n                                    error={headerImage.error}\n                                    rawOnChange\n                                    label={t('URL_header_')}\n                                    helperText={t('URL_helper_')}\n                                />\n                            </Grid> */}\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subject.value}\n                                    onChange={subject.setValue}\n                                    error={subject.error}\n                                    rawOnChange\n                                    label=\"Title\"\n                                    helperText=\"Enter the heading of the message\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={subtitle.value}\n                                    onChange={subtitle.setValue}\n                                    error={subtitle.error}\n                                    rawOnChange\n                                    label={t('Subtitle_')}\n                                    helperText={t('Subtitle_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextAreaInput\n                                    value={body.value}\n                                    textarea\n                                    onChange={body.setValue}\n                                    rawOnChange\n                                    label={t('Message_body_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={messageId.value}\n                                    onChange={messageId.setValue}\n                                    error={messageId.error}\n                                    rawOnChange\n                                    label={t('Unique_message_id')}\n                                    helperText={t('Enter_unique_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaText.value}\n                                    onChange={ctaText.setValue}\n                                    error={ctaText.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_')}\n                                    helperText={t('Call_to_action_helper_')}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextInput\n                                    value={ctaLink.value}\n                                    onChange={ctaLink.setValue}\n                                    error={ctaLink.error}\n                                    rawOnChange\n                                    label={t('Call_to_action_link_')}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </PageWrapper>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Box p={1} />\n                <Button onClick={handleTestEmail}>{t('Send_yourself_')}</Button>\n                <Box p={1} />\n                <Button\n                    loading={loading}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={setConfirmModalOpen}\n                >\n                    {t('Send_to_recipients_', { amount: userIds.length })}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n","import React, { useState, useCallback, useMemo, useEffect } from 'react'\nimport moment from 'moment'\nimport { push } from 'connected-react-router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\n\nimport { Box } from '@material-ui/core'\nimport Rating from '@material-ui/lab/Rating'\nimport StatusBadge from 'components/generic/StatusBadge'\nimport Tag from 'components/generic/Tag'\nimport UserProfilesService from 'services/userProfiles'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport EditRegistrationModal from 'components/modals/EditRegistrationModal'\nimport BulkEditRegistrationModal from 'components/modals/BulkEditRegistrationModal'\nimport BulkEmailModal from 'components/modals/BulkEmailModal'\nimport MessageAllInSlackModal from 'components/modals/MessageAllInSlackModal'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport { Table, Filters, Sorters } from 'components/generic/_Table'\nimport { CSVLink } from 'react-csv'\nimport * as UserSelectors from 'redux/user/selectors'\n\nexport default ({\n    emptyRenderer,\n    loading,\n    attendees = [],\n    footer = null,\n    title = 'Participants',\n    minimal = false,\n}) => {\n    const filteredAttendees = useMemo(() => {\n        return attendees.filter(attendee => {\n            if (!attendee) return false\n            if (!attendee.answers) return false\n            return attendee.answers.email\n        })\n    }, [attendees])\n    const dispatch = useDispatch()\n    const location = useLocation()\n    const searchParams = new URLSearchParams(location.search)\n    const organiserProfilesMap = useSelector(OrganiserSelectors.organisersMap)\n    const user = useSelector(AuthSelectors.idTokenData)\n    const event = useSelector(OrganiserSelectors.event)\n    const teamsMap = useSelector(OrganiserSelectors.teamsMap)\n    const query = new URLSearchParams(location.search)\n    const hasModal = query.has('modal')\n    const activeModal = query.get('modal')\n    const [selected, setSelected] = useState([])\n\n    const openSingleEdit = useCallback(\n        row => {\n            const search = `?${new URLSearchParams({\n                modal: 'edit',\n                id: row.original.user,\n            }).toString()}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n\n    const openBulkEmail = useCallback(\n        selectedRows => {\n            setSelected(selectedRows)\n            const search = `?${new URLSearchParams({\n                modal: 'bulkEmail',\n            })}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n    const openSlackMessage = useCallback(\n        selectedRows => {\n            setSelected(selectedRows)\n            const search = `?${new URLSearchParams({\n                modal: 'slackMessage',\n            })}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n    const openBulkEdit = useCallback(\n        selectedRows => {\n            setSelected(selectedRows)\n            const search = `?${new URLSearchParams({\n                modal: 'bulkEdit',\n            })}`\n            dispatch(push({ search }))\n        },\n        [dispatch],\n    )\n    // TODO move somewhere else\n    async function getlocation(user) {\n        const location = await UserProfilesService.getPublicUserProfiles(user)\n        return location[0].location\n    }\n\n    function flattenObject(ob) {\n        var toReturn = {}\n        const answer = ob.answers\n        const custom = ob.customAnswers\n        const team = teamsMap[ob.user]\n        const teamText = `Team: ${team?.code ?? 'No team'}`\n\n        toReturn = {\n            Status: ob.status,\n            Team: teamText,\n            expertise: answer.expertise.join(', '),\n            Tags: ob.advisor,\n            Location: ob.location,\n            ...custom,\n        }\n\n        for (var i in answer) {\n            if (!answer.hasOwnProperty(i)) continue\n\n            if (typeof answer[i] === 'object') {\n                // var flatObject = flattenObject(answer[i])\n                // for (var x in flatObject) {\n                //     if (!flatObject.hasOwnProperty(x)) continue\n                //     toReturn[i + '.' + x] = flatObject[x]\n                // }\n            } else {\n                toReturn[i] = answer[i]\n            }\n        }\n        return toReturn\n    }\n\n    const exportregistrations = selectedRows => {\n        setSelected(selectedRows)\n    }\n\n    const resetSearch = useCallback(() => {\n        dispatch(push({ search: '' }))\n    }, [dispatch])\n\n    useEffect(() => {\n        //Verify the query parameters\n        switch (activeModal) {\n            case 'bulkEmail':\n            case 'slackMessage':\n            case 'bulkEdit':\n                if (selected.length === 0) {\n                    resetSearch()\n                }\n                break\n            case 'edit':\n                if (!query.has('id')) {\n                    resetSearch()\n                }\n                break\n            default:\n                break\n        }\n    }, [activeModal, resetSearch, hasModal, query, selected.length])\n\n    const columns = useMemo(() => {\n        return [\n            {\n                Header: '#',\n                accessor: (row, index) => {\n                    return index + 1\n                },\n                ...Sorters.Numeric,\n                id: 'index',\n            },\n            {\n                Header: 'First name',\n                accessor: 'answers.firstName',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Last name',\n                accessor: 'answers.lastName',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Email',\n                accessor: 'answers.email',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Expertise',\n                accessor: 'answers.expertise',\n                ...Sorters.Alphabetic,\n                ...Filters.ContainsSearch,\n                Cell: ({ cell: { value } }) => value.join(', '),\n            },\n            {\n                Header: 'Status',\n                accessor: 'status',\n                ...Filters.MultipleSelect,\n                ...Sorters.Alphabetic,\n                Cell: ({ cell: { value } }) => <StatusBadge status={value} />,\n            },\n            {\n                Header: 'Rating',\n                accessor: 'rating',\n                ...Filters.MultipleSelect,\n                ...Sorters.Numeric,\n                Cell: ({ cell: { value } }) =>\n                    value ? (\n                        <Rating size=\"small\" value={value} readOnly />\n                    ) : (\n                        'Not rated'\n                    ),\n            },\n            {\n                Header: 'Role',\n                accessor: 'tags',\n                ...Sorters.ArrayLength,\n                Cell: ({ cell: { value } }) => {\n                    if (!value) {\n                        // console.log('no tags', value)\n                        return 'No tags'\n                    } else {\n                        return (\n                            <>\n                                {/* <Tag color=\"#ca8a04\" label=\"Advisor\" /> */}\n                                {value.map((tag, index) => {\n                                    return (\n                                        <Box key={index} ml=\"3px\" mt=\"3px\">\n                                            <Tag color=\"green\" label={tag} />\n                                        </Box>\n                                    )\n                                })}\n                            </>\n                        )\n                    }\n                },\n            },\n            {\n                Header: 'Created at',\n                accessor: 'createdAt',\n                ...Sorters.DateTime,\n                Cell: ({ cell: { value } }) =>\n                    moment(value).format('MMM Do YYYY HH:mm:ss'),\n            },\n            // {\n            //     Header: 'Assigned to',\n            //     accessor: 'assignedTo',\n            //     ...Sorters.Alphabetic,\n            //     Cell: ({ cell: { value } }) => {\n            //         let text\n            //         if (!value) {\n            //             text = 'No one'\n            //         } else if (organiserProfilesMap.hasOwnProperty(value)) {\n            //             const user = organiserProfilesMap[value]\n            //             text = `${user.firstName} ${user.lastName}`\n            //         } else {\n            //             text = '???'\n            //         }\n            //         return text\n            //     },\n            // },\n        ]\n    }, [organiserProfilesMap])\n    return (\n        <>\n            <EditRegistrationModal\n                registrationId={\n                    activeModal === 'edit' ? searchParams.get('id') : undefined\n                }\n                onClose={resetSearch}\n            />\n            <BulkEditRegistrationModal\n                visible={activeModal === 'bulkEdit'}\n                onClose={resetSearch}\n                userIds={selected.map(s => s.original.user)}\n            />\n            <BulkEmailModal\n                visible={activeModal === 'bulkEmail'}\n                onClose={resetSearch}\n                userIds={selected.map(s => s.original.user)}\n            />\n            <MessageAllInSlackModal\n                visible={activeModal === 'slackMessage'}\n                onClose={resetSearch}\n                userIds={selected.map(s => s.original.user)}\n            />\n            <Table\n                data={filteredAttendees}\n                columns={columns}\n                onRowClick={openSingleEdit}\n                bulkActions={[\n                    {\n                        key: 'bulk-email',\n                        label: 'Email all',\n                        action: openBulkEmail,\n                    },\n                    {\n                        key: 'bulk-message',\n                        label: 'Message all in Slack',\n                        action: openSlackMessage,\n                    },\n                    {\n                        key: 'bulk-edit',\n                        label: 'Edit all',\n                        action: openBulkEdit,\n                    },\n                    {\n                        key: 'export-registrations',\n                        label: (\n                            <CSVLink\n                                style={{\n                                    textDecoration: 'none',\n                                    color: 'inherit',\n                                }}\n                                data={selected.map(item =>\n                                    flattenObject(item.original),\n                                )}\n                                filename=\"export.csv\"\n                            >\n                                Export registrations\n                            </CSVLink>\n                        ),\n                        action: exportregistrations,\n                    },\n                ]}\n            />\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { FilterHelpers } from '@hackjunction/shared'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport UserProfilesService from 'services/userProfiles'\n\nimport Divider from 'components/generic/Divider'\nimport AttendeeTable from 'components/tables/AttendeeTable'\nimport FilterGroupMenu from 'components/filters/FilterGroupMenu'\n\nexport default () => {\n    const registrations = useSelector(OrganiserSelectors.registrations)\n    const registrationsLoading = useSelector(\n        OrganiserSelectors.registrationsLoading,\n    )\n\n    const [filters, setFilters] = useState([])\n    const filtered = FilterHelpers.applyFilters(registrations, filters)\n\n    // console.log('registrations', filtered)\n    useEffect(() => {\n        async function appendCustomAnswers() {\n            for (let i = 0; i < filtered.length; i++) {\n                const customAnswers = await filtered[i].answers.CustomAnswers\n                // console.log('customAnswers', customAnswers)\n                const profile = await UserProfilesService.getPublicUserProfiles(\n                    filtered[i].user,\n                )\n                filtered[i].advisor = profile[0].advisor ? 'advisor' : ''\n                filtered[i].location = profile[0].location\n                    ? profile[0].location\n                    : ''\n                // console.log('Appended advisor:', profile)\n                filtered[i].customAnswers = {\n                    // ...filtered[i].answers,\n                    ...customAnswers.reduce((acc, cur) => {\n                        acc[cur.key] = cur.value\n                        return acc\n                    }, {}),\n                }\n            }\n        }\n        appendCustomAnswers()\n    }, [])\n\n    return (\n        <>\n            <FilterGroupMenu onChange={setFilters} />\n            <Divider size={1} />\n            <AttendeeTable\n                attendees={filtered}\n                loading={registrationsLoading}\n            />\n        </>\n    )\n}\n","import React, { useMemo, useState, useCallback } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { sumBy } from 'lodash-es'\nimport { Typography, Grid, Box, Slider, Paper } from '@material-ui/core'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport Select from 'components/inputs/SelectOld'\nimport BulkEditRegistrationModal from 'components/modals/BulkEditRegistrationModal'\nimport BulkEmailModal from 'components/modals/BulkEmailModal'\n\nimport { Table, Sorters } from 'components/generic/_Table'\nimport AttendeeTable from '../AttendeeTable'\nimport { CSVLink } from 'react-csv'\n\nexport default ({ loading, teams = [], simplifiedView = false }) => {\n    const registrationsMap = useSelector(OrganiserSelectors.registrationsMap)\n    const [reviewStatus, setReviewStatus] = useState('any')\n    const [completedStatus, setCompletedStatus] = useState('any')\n    const [ratingRange, setRatingRange] = useState([0, 5])\n    const [bulkEdit, setBulkEdit] = useState(false)\n    const [bulkEmail, setBulkEmail] = useState(false)\n    const [selected, setSelected] = useState([])\n    // TODO add expansion\n    // const [expandedRows, setExpandedRows] = useState({ 1: true })\n\n    const handleRatingRangeChange = useCallback((e, value) => {\n        setRatingRange(value)\n    }, [])\n    const teamsPopulated = useMemo(() => {\n        return teams.map(team => {\n            console.log(team)\n            const membersMapped = team.members\n                .map(member => {\n                    return registrationsMap[member]\n                })\n                .filter(member => typeof member !== 'undefined')\n            const ownerMapped = registrationsMap[team.owner] || {}\n            const allMembers = membersMapped.concat(ownerMapped)\n            const reviewedCount = allMembers.filter(\n                member => member && member.rating,\n            ).length\n            const memberCount = allMembers.length\n            return {\n                ...team,\n                owner: ownerMapped,\n                members: allMembers,\n                avgRating: (\n                    sumBy(allMembers, m => m.rating || 0) / allMembers.length\n                ).toFixed(2),\n                reviewedPercent: Math.floor(\n                    (reviewedCount * 100) / memberCount,\n                ),\n            }\n        })\n    }, [teams, registrationsMap])\n\n    // console.log(teamsPopulated)\n    const teamsFiltered = teamsPopulated.filter(team => {\n        if (completedStatus === 'completed' && !team.complete) {\n            return false\n        }\n        if (completedStatus === 'not-completed' && team.complete) {\n            return false\n        }\n        if (reviewStatus === 'fully-reviewed' && team.reviewedPercent !== 100) {\n            return false\n        }\n\n        if (reviewStatus === 'not-reviewed' && team.reviewedPercent === 100) {\n            return false\n        }\n\n        if (ratingRange[0] > team.avgRating) {\n            return false\n        }\n\n        if (ratingRange[1] < team.avgRating) {\n            return false\n        }\n        return true\n    })\n\n    const filteredMemberIds = useMemo(() => {\n        return teamsFiltered.reduce((res, team) => {\n            return res.concat(team.members.map(reg => reg.user))\n        }, [])\n    }, [teamsFiltered])\n\n    const columns = useMemo(() => {\n        return [\n            {\n                Header: '#',\n                accessor: (row, index) => {\n                    console.log(row, index)\n                    return index + 1\n                },\n                id: 'index',\n                sortType: Sorters.Numeric,\n            },\n             {\n                Header: \"Team Name\",\n                accessor: 'name',\n                id: 'name',\n                ...Sorters.Alphabetic,\n\n            },\n            {\n                Header: 'Owner',\n                accessor: row => {\n                    const { owner } = row\n                    if (!owner || !owner.answers) return '???'\n                    return `${owner.answers.firstName} ${owner.answers.lastName}`\n                },\n                id: 'owner',\n                ...Sorters.Alphabetic,\n            },\n            {\n                Header: 'Code',\n                accessor: 'code',\n                ...Sorters.Alphabetic,\n            },\n            {\n                Header: 'Members',\n                accessor: row => row.members.length,\n                id: 'members',\n                ...Sorters.Numeric,\n            },\n            {\n                Header: 'Avg. Rating',\n                accessor: 'avgRating',\n                ...Sorters.Numeric,\n            },\n            {\n                Header: '% Reviewed',\n                accessor: 'reviewedPercent',\n                ...Sorters.Numeric,\n                Cell: ({ cell: { value } }) => {\n                    return (\n                        <Typography\n                            variant=\"button\"\n                            color={value === 100 ? 'primary' : 'secondary'}\n                        >\n                            {value}%\n                        </Typography>\n                    )\n                },\n            },\n        ]\n    }, [])\n\n    const exportTeams = selectedRows => {\n        console.log('selected', selectedRows)\n        setSelected(selectedRows)\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <BulkEditRegistrationModal\n                visible={bulkEdit}\n                onClose={setBulkEdit}\n                registrationIds={filteredMemberIds}\n            />\n            <BulkEmailModal\n                visible={bulkEmail}\n                onClose={setBulkEmail}\n                registrationIds={filteredMemberIds}\n            />\n            {!simplifiedView && (\n                <>\n                    <Grid item xs={12} md={6}>\n                        <Paper p={2}>\n                            <Box p={2}>\n                                <Select\n                                    value={completedStatus}\n                                    onChange={setCompletedStatus}\n                                    label=\"Completed status\"\n                                    options={[\n                                        {\n                                            value: 'any',\n                                            label: 'Any',\n                                        },\n                                        {\n                                            value: 'completed',\n                                            label: 'Completed',\n                                        },\n                                        {\n                                            value: 'not-completed',\n                                            label: 'Not completed',\n                                        },\n                                    ]}\n                                />\n                            </Box>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Paper>\n                            <Box p={2}>\n                                <Select\n                                    value={reviewStatus}\n                                    onChange={setReviewStatus}\n                                    label=\"Review status\"\n                                    options={[\n                                        {\n                                            value: 'any',\n                                            label: 'Any',\n                                        },\n                                        {\n                                            value: 'fully-reviewed',\n                                            label: 'Fully reviewed',\n                                        },\n                                        {\n                                            value: 'not-reviewed',\n                                            label: 'Not fully reviewed',\n                                        },\n                                    ]}\n                                />\n                            </Box>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper>\n                            <Box\n                                padding={2}\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                            >\n                                <Typography\n                                    variant=\"subtitle1\"\n                                    paragraph\n                                    align=\"center\"\n                                >\n                                    Rating between\n                                </Typography>\n                                <Box paddingLeft={2} paddingRight={2}>\n                                    <Slider\n                                        defaultValue={ratingRange}\n                                        onChangeCommitted={\n                                            handleRatingRangeChange\n                                        }\n                                        valueLabelDisplay=\"on\"\n                                        aria-labelledby=\"range-slider\"\n                                        min={0}\n                                        max={5}\n                                        step={0.1}\n                                    />\n                                </Box>\n                            </Box>\n                        </Paper>\n                    </Grid>\n                </>\n            )}\n\n            <Grid item xs={12}>\n                <Table\n                    data={teamsFiltered}\n                    columns={columns}\n                    renderExpanded={row => (\n                        <AttendeeTable attendees={row.original.members} />\n                    )}\n                    bulkActions={[\n                        {\n                            key: 'export-teams',\n                            label: (\n                                <CSVLink\n                                    style={{\n                                        textDecoration: 'none',\n                                        color: 'inherit',\n                                    }}\n                                    data={selected.map((selection, index) => {\n                                        const s = selection.original\n                                        if (!s) return {}\n                                        if (!s.owner || !s.owner.answers)\n                                            return {}\n                                        return {\n                                            '#': index + 1,\n                                            code: s.code,\n                                            owner: `${s.owner.answers.firstName} ${s.owner.answers.lastName}`,\n                                            'No of members': s.members\n                                                ? s.members.length\n                                                : 0,\n                                            members: s.members\n                                                ? s.members.map(member => {\n                                                      return member.answers\n                                                          ? `${member.answers.firstName} ${member.answers.lastName}(${member.answers.email})`\n                                                          : ''\n                                                  })\n                                                : [],\n                                            'Avg. Rating': s.avgRating,\n                                            '% Reviewed': s.reviewedPercent,\n                                        }\n                                        // return flattenObject(s.original, index)\n                                    })}\n                                    filename=\"teams.csv\"\n                                >\n                                    Export Teams\n                                </CSVLink>\n                            ),\n                            action: exportTeams,\n                        },\n                    ]}\n                />\n                {/* <MaterialTable\n                    title=\"Teams\"\n                    showCount\n                    isLoading={loading}\n                    data={teamsFiltered}\n                    onSearchChange={handleSearchChange}\n                    actions={[\n                        {\n                            icon: forwardRef((props, ref) => (\n                                <EmailIcon {...props} ref={ref} />\n                            )),\n                            tooltip: 'Email all',\n                            isFreeAction: true,\n                            onClick: () => setBulkEmail(true),\n                            hidden: searchActive,\n                        },\n                        {\n                            icon: forwardRef((props, ref) => (\n                                <EditIcon {...props} ref={ref} />\n                            )),\n                            tooltip: 'Edit all',\n                            isFreeAction: true,\n                            onClick: () => setBulkEdit(true),\n                            hidden: searchActive,\n                        },\n                    ]}\n                    localization={{\n                        toolbar: {\n                            searchPlaceholder: 'Search by code / owner',\n                        },\n                    }}\n                    options={{\n                        debounceInterval: 500,\n                        pageSizeOptions: [5, 25, 50],\n                    }}\n                    detailPanel={rowData => {\n                        return (\n                            <Box\n                                className={classes.detailPanel}\n                                overlow=\"auto\"\n                                width=\"100%\"\n                                p={2}\n                            >\n                                <AttendeeTable\n                                    title=\"Members\"\n                                    minimal={true}\n                                    attendees={rowData.members}\n                                />\n                            </Box>\n                        )\n                    }}\n                /> */}\n            </Grid>\n        </Grid>\n    )\n}\n","import React from 'react'\n\nimport { useSelector } from 'react-redux'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport TeamsTable from 'components/tables/TeamsTable'\n\nexport default () => {\n    const teams = useSelector(OrganiserSelectors.teams)\n    const registrationsLoading = useSelector(\n        OrganiserSelectors.registrationsLoading,\n    )\n    const teamsLoading = useSelector(OrganiserSelectors.teamsLoading)\n    // console.log('teams', teams)\n    return (\n        <PageWrapper>\n            <TeamsTable\n                loading={registrationsLoading || teamsLoading}\n                teams={teams}\n            />\n        </PageWrapper>\n    )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Card,\n    CardContent,\n    Typography,\n    Button,\n    Box,\n    CircularProgress,\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    value: {\n        textAlign: 'left',\n    },\n    suffix: {\n        marginLeft: theme.spacing(1),\n        display: 'inline-block',\n    },\n}))\n\nconst Statistic = ({ label, value, suffix, action, actionText }) => {\n    const [actionLoading, setActionLoading] = useState()\n\n    const handleAction = useCallback(async () => {\n        setActionLoading(true)\n        await action()\n        setActionLoading(false)\n    }, [action])\n    const classes = useStyles()\n    return (\n        <Card>\n            <CardContent className={classes.root}>\n                <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                    {label}\n                </Typography>\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"flex-end\">\n                    <Typography variant=\"h4\" className={classes.value}>\n                        {value}\n                    </Typography>\n                    {suffix && (\n                        <Typography variant=\"h6\" className={classes.suffix}>\n                            {suffix}\n                        </Typography>\n                    )}\n                </Box>\n                {action && actionText && (\n                    <Box mt={2}>\n                        {actionLoading && <CircularProgress size={24} />}\n                        <Button\n                            disabled={actionLoading}\n                            color=\"secondary\"\n                            onClick={handleAction}\n                        >\n                            {actionText}\n                        </Button>\n                    </Box>\n                )}\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Statistic\n","import React, { useMemo } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { groupBy, filter } from 'lodash-es'\nimport { RegistrationStatuses } from '@hackjunction/shared'\nimport { Grid, Paper, Typography } from '@material-ui/core'\nimport StatusBadge from 'components/generic/StatusBadge'\nimport Statistic from 'components/generic/Statistic'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport RegistrationsService from 'services/registrations'\n\nconst STATUSES = RegistrationStatuses.asObject\n\nexport default () => {\n    const dispatch = useDispatch()\n\n    const registrations = useSelector(OrganiserSelectors.registrations)\n    const loading = useSelector(OrganiserSelectors.registrationsLoading)\n    const event = useSelector(OrganiserSelectors.event)\n    const idToken = useSelector(AuthSelectors.getIdToken)\n\n    const groupedByStatus = useMemo(() => {\n        return groupBy(registrations, 'status')\n    }, [registrations])\n\n    const getCount = (statuses = []) => {\n        return statuses.reduce((res, status) => {\n            if (groupedByStatus.hasOwnProperty(status)) {\n                return res + groupedByStatus[status].length\n            }\n            return res\n        }, 0)\n    }\n\n    const handleBulkAccept = () => {\n        return RegistrationsService.bulkAcceptRegistrationsForEvent(\n            idToken,\n            event.slug,\n        )\n            .then(data => {\n                dispatch(\n                    SnackbarActions.success(\n                        'Success! All soft accepted registrations have been accepted.',\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        `Something went wrong... Are you sure you're connected to the internet ?`,\n                    ),\n                )\n            })\n            .finally(() => {\n                dispatch(\n                    OrganiserActions.updateRegistrationsForEvent(event.slug),\n                )\n                return\n            })\n    }\n\n    const handleBulkReject = () => {\n        return RegistrationsService.bulkRejectRegistrationsForEvent(\n            idToken,\n            event.slug,\n        )\n            .then(data => {\n                dispatch(\n                    SnackbarActions.success(\n                        `Success! All soft rejected registrations have been rejected.`,\n                    ),\n                )\n            })\n            .catch(err => {\n                dispatch(\n                    SnackbarActions.error(\n                        `Something went wrong... Are you sure you're connected to the internet?`,\n                    ),\n                )\n            })\n            .finally(() => {\n                dispatch(\n                    OrganiserActions.updateRegistrationsForEvent(event.slug),\n                )\n                return\n            })\n    }\n\n    const total = registrations.length\n    const rated = filter(registrations, reg => reg.rating).length\n\n    return (\n        <PageWrapper loading={loading}>\n            <Typography variant=\"h5\" paragraph>\n                Stats\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={6}>\n                    <Paper>\n                        <Statistic\n                            label=\"Total registrations\"\n                            value={total}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper>\n                        <Statistic\n                            label=\"Rated\"\n                            value={`${rated} / ${total}`}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge status={STATUSES.confirmed.id} />\n                            }\n                            value={getCount(['confirmed'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge\n                                    status={STATUSES.confirmedToHub.id}\n                                />\n                            }\n                            value={getCount(['confirmedToHub'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge status={STATUSES.accepted.id} />\n                            }\n                            value={getCount(['accepted'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge\n                                    status={STATUSES.acceptedToHub.id}\n                                />\n                            }\n                            value={getCount(['acceptedToHub'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge status={STATUSES.cancelled.id} />\n                            }\n                            value={getCount(['cancelled'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge status={STATUSES.rejected.id} />\n                            }\n                            value={getCount(['rejected'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge status={STATUSES.checkedIn.id} />\n                            }\n                            value={getCount(['checkedIn'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={4}>\n                    <Paper>\n                        <Statistic\n                            label={<StatusBadge status={STATUSES.noShow.id} />}\n                            value={getCount(['noShow'])}\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge\n                                    status={STATUSES.softAccepted.id}\n                                />\n                            }\n                            value={getCount(['softAccepted'])}\n                            action={handleBulkAccept}\n                            actionText=\"Accept all\"\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper>\n                        <Statistic\n                            label={\n                                <StatusBadge\n                                    status={STATUSES.softRejected.id}\n                                />\n                            }\n                            value={getCount(['softRejected'])}\n                            action={handleBulkReject}\n                            actionText=\"Reject all\"\n                        ></Statistic>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </PageWrapper>\n    )\n}\n","import React from 'react'\n\nimport { useRouteMatch, useLocation } from 'react-router'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport DefaultTab from './default'\nimport TeamsTab from './teams'\n// import AssignedTab from './assigned'\n// import TravelTab from './travel'\nimport AdminTab from './admin'\n\nexport default () => {\n    const match = useRouteMatch()\n    const location = useLocation()\n    return (\n        <PageWrapper>\n            <PageHeader\n                heading=\"Participants\"\n                subheading=\"Search participants\"\n            />\n            <MaterialTabsLayout\n                transparent\n                baseRoute={match.url}\n                location={location}\n                tabs={[\n                    {\n                        label: 'Participants',\n                        path: '',\n                        key: 'participants',\n                        component: DefaultTab,\n                    },\n                    {\n                        path: '/teams',\n                        key: 'teams',\n                        label: 'Teams',\n                        component: TeamsTab,\n                    },\n                    // {\n                    //     path: '/assigned',\n                    //     key: 'assigned',\n                    //     label: 'Assigned to you',\n                    //     component: AssignedTab,\n                    // },\n                    // {\n                    //     path: '/travel',\n                    //     key: 'travel',\n                    //     label: 'Travel',\n                    //     component: TravelTab,\n                    // },\n                    {\n                        path: '/admin',\n                        key: 'admin',\n                        label: 'Admin & Tools',\n                        component: AdminTab,\n                    },\n                ]}\n            />\n        </PageWrapper>\n    )\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport React, { useState, useEffect, useMemo } from 'react'\n\nimport * as AuthSelectors from 'redux/auth/selectors'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n// import * as SnackbarActions from 'redux/snackbar/actions'\nimport {\n    Dialog,\n    List,\n    ListItem,\n    ListItemText,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    Typography,\n    ExpansionPanelDetails,\n    Box,\n    // TextField,\n    // InputLabel,\n    // FormControl,\n    // Select,\n    // MenuItem,\n    Checkbox,\n} from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Container from 'components/generic/Container'\nimport PageHeader from 'components/generic/PageHeader'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport TeamsTable from 'components/tables/TeamsTable'\nimport ProjectScoresService from 'services/projectScores'\nimport EventsService from 'services/events'\nimport { EventHelpers } from '@hackjunction/shared'\nimport moment from 'moment'\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik'\n// import Button from 'components/generic/Button'\n\nexport default ({\n    project,\n    onClose = () => {},\n    onEdited = () => {},\n    handleResetScores,\n    editModalOpen,\n    handleMakeWinner,\n}) => {\n    const dispatch = useDispatch()\n    const idToken = useSelector(AuthSelectors.getIdToken)\n    const event = useSelector(OrganiserSelectors.event)\n    const teams = useSelector(OrganiserSelectors.teams)\n    const [finalistChecked, setFinalistChecked] = useState(false)\n    const [projectScores, setProjectScores] = useState([\n        {\n            project: '',\n            event: '',\n            status: 'submitted',\n            score: 0,\n            maxScore: 10,\n            message: '',\n            track: 'null',\n            challenge: 'null',\n        },\n    ])\n    useEffect(() => {\n        if (project && event) {\n            ProjectScoresService.getScoreByEventSlugAndProjectId(\n                idToken,\n                event.slug,\n                project._id,\n            ).then(score => {\n                if (score) setProjectScores(score)\n            })\n            setFinalistChecked(event.finalists.includes(project._id))\n        }\n    }, [event, idToken, project])\n    const team = useMemo(() => {\n        if (teams && project) {\n            return [teams.find(team => team._id === project.team)]\n        }\n        return []\n    }, [project, teams])\n\n    const setAsFinalist = () => {\n        setFinalistChecked(!finalistChecked)\n        EventsService.updateFinalists(idToken, event.slug, project._id)\n    }\n\n    return (\n        <Dialog open={editModalOpen} onClose={onClose} maxWidth=\"md\" fullWidth>\n            <PageWrapper loading={!project}>\n                {project && (\n                    <Box p={1}>\n                        <Container center>\n                            <PageHeader\n                                heading={project.name}\n                                subheading={project.tracknew}\n                            />\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel1a-content\"\n                                    id=\"panel1a-header\"\n                                >\n                                    <Typography>Project Details</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <List>\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Name\"\n                                                secondary={project.name}\n                                            ></ListItemText>\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Punchline\"\n                                                secondary={project.punchline}\n                                            ></ListItemText>\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Description\"\n                                                secondary={project.description}\n                                            ></ListItemText>\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Track\"\n                                                secondary={project.tracknew}\n                                            ></ListItemText>\n                                        </ListItem>\n                                        {/* <ListItem>\n                                            <ListItemText\n                                                primary=\"Challenge\"\n                                                secondary={project.challenges.join(\n                                                    ', ',\n                                                )}\n                                            ></ListItemText>\n                                        </ListItem> */}\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Demo URL or Coupon code\"\n                                                secondary={project.demo}\n                                            ></ListItemText>\n                                        </ListItem>\n                                        <ListItem>\n                                            <ListItemText\n                                                primary=\"Source code\"\n                                                secondary={project.source}\n                                            ></ListItemText>\n                                        </ListItem>\n                                    </List>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel2a-content\"\n                                    id=\"panel2a-header\"\n                                >\n                                    <Typography>Team Members</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <Box\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                        style={{ width: '100%' }}\n                                    >\n                                        <Typography gutterBottom>\n                                            Click on the team to view members!\n                                        </Typography>\n                                        <TeamsTable\n                                            teams={team}\n                                            loading={!team}\n                                            simplifiedView={true}\n                                        />\n                                    </Box>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            {EventHelpers.isEventOver(event, moment) && (\n                                <ExpansionPanel>\n                                    <ExpansionPanelSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                        aria-controls=\"panel3a-content\"\n                                        id=\"panel3a-header\"\n                                    >\n                                        <Typography>Global Score</Typography>\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails>\n                                        {project.globalScore}\n                                    </ExpansionPanelDetails>\n                                </ExpansionPanel>\n                            )}\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary\n                                    expandIcon={<ExpandMoreIcon />}\n                                    aria-controls=\"panel3a-content\"\n                                    id=\"panel3a-header\"\n                                >\n                                    <Typography>Regional Score</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    {project.score}\n                                    {/* {projectScores.map(projectScore => (\n                                        <Formik\n                                            initialValues={{\n                                                ...projectScore,\n                                            }}\n                                            enableReinitialize={true}\n                                            onSubmit={async (\n                                                values,\n                                                { setSubmitting },\n                                            ) => {\n                                                values.project = project._id\n                                                values.event = event._id\n                                                values.track =\n                                                    projectScore.track\n                                                values.challenge =\n                                                    projectScore.challenge\n                                                try {\n                                                    if (projectScore._id) {\n                                                        await ProjectScoresService.updateScoreByEventSlug(\n                                                            idToken,\n                                                            event.slug,\n                                                            values,\n                                                        )\n                                                    } else {\n                                                        await ProjectScoresService.addScoreByEventSlug(\n                                                            idToken,\n                                                            event.slug,\n                                                            values,\n                                                        )\n                                                    }\n                                                    dispatch(\n                                                        SnackbarActions.success(\n                                                            'Score saved successfully.',\n                                                        ),\n                                                    )\n                                                } catch (e) {\n                                                    dispatch(\n                                                        SnackbarActions.error(\n                                                            `Score could not be saved. Error: ${e.message}`,\n                                                        ),\n                                                    )\n                                                } finally {\n                                                    setSubmitting(false)\n                                                }\n                                            }}\n                                        >\n                                            {({ isSubmitting }) => (\n                                                <Form>\n                                                    <Field name=\"status\">\n                                                        {({ field }) => (\n                                                            <FormControl\n                                                                fullWidth\n                                                            >\n                                                                <InputLabel>\n                                                                    Status{' '}\n                                                                    {projectScore.track\n                                                                        ? 'in track ' +\n                                                                          projectScore.track\n                                                                        : null}{' '}\n                                                                    {projectScore.challenge\n                                                                        ? 'in challenge ' +\n                                                                          projectScore.challenge\n                                                                        : null}\n                                                                </InputLabel>\n                                                                <Select\n                                                                    {...field}\n                                                                >\n                                                                    <MenuItem value=\"submitted\">\n                                                                        Submitted\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"evaluating\">\n                                                                        Evaluating\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"evaluated\">\n                                                                        Evaluated\n                                                                    </MenuItem>\n                                                                </Select>\n                                                            </FormControl>\n                                                        )}\n                                                    </Field>\n                                                    <ErrorMessage\n                                                        name=\"status\"\n                                                        component=\"div\"\n                                                    />\n                                                    <Field name=\"score\">\n                                                        {({ field }) => (\n                                                            <TextField\n                                                                fullWidth\n                                                                label=\"Score\"\n                                                                type=\"number\"\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                    <ErrorMessage\n                                                        name=\"score\"\n                                                        component=\"div\"\n                                                    />\n                                                    <Field name=\"maxScore\">\n                                                        {({ field }) => (\n                                                            <TextField\n                                                                fullWidth\n                                                                type=\"number\"\n                                                                label=\"Maximum Score\"\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                    <ErrorMessage\n                                                        name=\"maxScore\"\n                                                        component=\"div\"\n                                                    />\n                                                    <Field name=\"message\">\n                                                        {({ field }) => (\n                                                            <TextField\n                                                                fullWidth\n                                                                label=\"Message\"\n                                                                {...field}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                    <ErrorMessage\n                                                        name=\"message\"\n                                                        component=\"div\"\n                                                    />\n                                                    <Box p={2} />\n                                                    <Button\n                                                        color=\"theme_turquoise\"\n                                                        variant=\"contained\"\n                                                        type=\"submit\"\n                                                        disabled={isSubmitting}\n                                                    >\n                                                        Save\n                                                    </Button>\n                                                </Form>\n                                            )}\n                                        </Formik>\n                                    ))} */}\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <div className=\"mt-2\">\n                                <button\n                                    onClick={handleMakeWinner}\n                                    className=\"bg-[#39967a] text-white px-4 py-2 rounded-md\"\n                                >\n                                    Make Finalist\n                                </button>\n                                <button\n                                    onClick={handleResetScores}\n                                    className=\"bg-red-600 ml-12 text-white px-4 py-2 rounded-md\"\n                                >\n                                    Reset Scores\n                                </button>\n                            </div>\n\n                            {/* {event.overallReviewMethod ===\n                            'finalsManualSelection' ? (\n                                <Box\n                                    display=\"flex\"\n                                    flexDirection=\"column\"\n                                    style={{ width: '100%' }}\n                                >\n                                    <Typography gutterBottom>\n                                        Does this project go to finals!\n                                    </Typography>\n                                    <Checkbox\n                                        onChange={setAsFinalist}\n                                        checked={finalistChecked}\n                                    />\n                                </Box>\n                            ) : null} */}\n                        </Container>\n                    </Box>\n                )}\n            </PageWrapper>\n        </Dialog>\n    )\n}\n","import React from 'react'\nimport { SearchOutlined } from '@ant-design/icons'\nimport { Button as AntButton, Input, Space, Modal, Table } from 'antd'\nimport Highlighter from 'react-highlight-words'\nimport 'antd/dist/antd.css'\nimport '../../../output.css'\n\n// header scroll, blue, text bigger, input left\n\nconst onChange = (pagination, filters, sorter, extra) => {}\n\nconst TableWithFilter = ({\n    columns,\n    data,\n    handleOnShow,\n    handleOnResetScore,\n    handleOnMakeWinner,\n    onRowClick,\n}) => {\n    const [searchText, setSearchText] = React.useState('')\n    const [searchedColumn, setSearchedColumn] = React.useState('')\n    const searchInput = React.useRef(null)\n    const [reRender, setReRender] = React.useState(false)\n\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm()\n        setSearchText(selectedKeys[0])\n        setSearchedColumn(dataIndex)\n    }\n\n    const handleReset = (clearFilters, dataIndex) => {\n        clearFilters()\n        console.log('clearFilters', clearFilters)\n        setSearchText('')\n        setSearchedColumn(data)\n    }\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({\n            setSelectedKeys,\n            selectedKeys,\n            confirm,\n            clearFilters,\n            close,\n        }) => (\n            <div\n                id=\"popup\"\n                style={{\n                    padding: 8,\n                    zIndex: 10000,\n                }}\n                onKeyDown={e => e.stopPropagation()}\n            >\n                <Input\n                    ref={searchInput}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => {\n                        setSelectedKeys(e.target.value ? [e.target.value] : [])\n                    }}\n                    onPressEnter={() =>\n                        handleSearch(selectedKeys, confirm, dataIndex)\n                    }\n                    style={{\n                        marginBottom: 8,\n                        display: 'block',\n                    }}\n                />\n                <Space>\n                    <AntButton\n                        type=\"primary\"\n                        onClick={() =>\n                            handleSearch(selectedKeys, confirm, dataIndex)\n                        }\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{\n                            width: 90,\n                        }}\n                    >\n                        Search\n                    </AntButton>\n                    <AntButton\n                        // onClick={() => clearFilters && handleReset(clearFilters, dataIndex)}\n                        type=\"link\"\n                        size=\"small\"\n                        onClick={() => {\n                            setSelectedKeys([])\n                            confirm({\n                                closeDropdown: false,\n                            })\n                            // setSearchText('');\n\n                            setSearchText(selectedKeys[0])\n                            setSearchedColumn(dataIndex)\n\n                            close()\n                        }}\n                    >\n                        Reset\n                    </AntButton>\n                    <AntButton\n                        type=\"link\"\n                        size=\"small\"\n                        onClick={() => {\n                            confirm({\n                                closeDropdown: false,\n                            })\n                            setSearchText(selectedKeys[0])\n                            setSearchedColumn(dataIndex)\n                            close()\n                        }}\n                    >\n                        Filter\n                    </AntButton>\n                    <AntButton\n                        type=\"link\"\n                        size=\"small\"\n                        onClick={() => {\n                            close()\n                        }}\n                    >\n                        close\n                    </AntButton>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <SearchOutlined\n                style={\n                    {\n                        // color: filtered ? '#1890ff' : undefined,\n                    }\n                }\n            />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownOpenChange: visible => {\n            if (visible) {\n                setTimeout(() => searchInput.current?.select(), 100)\n            }\n        },\n        render: text =>\n            searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{\n                        backgroundColor: '#ffc069',\n                        padding: 0,\n                    }}\n                    searchWords={[searchText]}\n                    autoEscape\n                    textToHighlight={text ? text.toString() : ''}\n                />\n            ) : (\n                text\n            ),\n        // render: (text) => text,\n    })\n\n    let modifiedColumns = columns.map(item => {\n        if (item.search) {\n            return { ...item, ...getColumnSearchProps(item.dataIndex) }\n        }\n        return item\n    })\n    // append button to modifiedColumns\n    // modifiedColumns.push({\n    //     title: '',\n    //     dataIndex: '',\n    //     key: 'x',\n    //     render: e => (\n    //         <button\n    //             onClick={() => {\n    //                 handleOnShow(e.key)\n    //                 // setDrawer(false)\n    //             }}\n    //             className=\" px-10 bg-[#39967a] text-white h-8 rounded-md ml-4\"\n    //         >\n    //             Show Project\n    //         </button>\n    //     ),\n    // })\n    // modifiedColumns.push({\n    //     title: '',\n    //     dataIndex: '',\n    //     key: 'y',\n    //     render: e => (\n    //         <button\n    //             onClick={() => {\n    //                 handleOnShow(e.key)\n    //                 // setDrawer(false)\n    //             }}\n    //             className=\" px-10 bg-primary text-white h-8 rounded-md ml-4\"\n    //         >\n    //             Reset Score\n    //         </button>\n    //     ),\n    // })\n    // modifiedColumns.push({\n    //     title: '',\n    //     dataIndex: '',\n    //     key: 'z',\n    //     render: e => (\n    //         <button\n    //             onClick={() => {\n    //                 handleOnShow(e.key)\n    //                 // setDrawer(false)\n    //             }}\n    //             className=\" px-10 bg-primary text-white h-8 rounded-md ml-4\"\n    //         >\n    //             Make Winner\n    //         </button>\n    //     ),\n    // })\n\n    return (\n        <div className=\"\">\n            <Table\n                pagination={{ defaultPageSize: 8 }}\n                columns={modifiedColumns}\n                dataSource={data}\n                onChange={onChange}\n                onRow={(record, rowIndex) => {\n                    return {\n                        onClick: event => {\n                            onRowClick(record)\n                        },\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nexport default TableWithFilter\n","import React, { useMemo, useCallback, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nimport { Table, Filters, Sorters } from 'components/generic/_Table'\nimport EditProjectModal from 'components/modals/EditProjectModal'\nimport TableWithFilter from '../TableWithFilter/TableWithFilter'\nimport { Dialog, Drawer, Modal } from '@material-ui/core'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport LoadingSpinner from 'components/loadingCircle'\nimport { CSVLink } from 'react-csv'\n\nconst ProjectsTable = ({ projects, baseURL, location, track }) => {\n    const dispatch = useDispatch()\n    const projectsByRating = useSelector(DashboardSelectors.projectsByRating)\n    const teams = useSelector(OrganiserSelectors.teams)\n    //const dispatch = useDispatch()\n    //const location = useLocation()\n    const event = useSelector(OrganiserSelectors.event)\n\n    const [confirmWinnerOpen, setConfirmWinnerOpen] = useState(false)\n    const [confirmResetOpen, setConfirmResetOpen] = useState(false)\n    const [confirmResetWinnersOpen, setConfirmResetWinnersOpen] =\n        useState(false)\n    const [selectedProject, setSelectedProject] = useState(null)\n    const [selectedId, setSelectedId] = useState(null)\n    const [editModalOpen, setEditModalOpen] = useState(false)\n    const [data, setData] = useState(null)\n    const [toggle, setToggle] = useState(false)\n    const [isSubmitting, setIsSubmitting] = useState(false)\n\n    useEffect(() => {\n        if (event) {\n            if (event.slug) {\n                dispatch(DashboardActions.getProjectsByRating(event.slug))\n                // dispatch(OrganiserActions.updateProjects(event.slug))\n            }\n        }\n    }, [toggle, dispatch, event.slug, event])\n\n    // useEffect(() => {\n    //        dispatch(OrganiserActions.updateProjects(event.slug))\n\n    // }, [dispatch, toggle])\n\n    useEffect(() => {\n        if (projectsByRating) {\n            // console.log(projectsByRating)\n            if (location && track) {\n                const defaultData = projectsByRating.map((project, index) => {\n                    project.key = index + 1\n                    project.score = parseFloat(project.score).toFixed(2)\n                    for (const i in teams) {\n                        const team = teams[i]\n                        if (project.team === team._id) {\n                            project.teamCode = team.code\n                            break\n                        }\n                    }\n                    return project\n                })\n\n                // sort defaultData by defaultData.rating\n                const sortedDefaultData = defaultData.sort((a, b) => {\n                    return b.rating - a.rating\n                })\n\n                const filteredData = sortedDefaultData.filter(\n                    project =>\n                        project.tracknew === track &&\n                        project.locationnew === location,\n                )\n\n                const finalFilter = filteredData.filter(\n                    project => project.teamCode,\n                )\n                // const filteredData = sortedDefaultData.filter(\n                //     sortedDefaultData.locationnew === location &&\n                //         sortedDefaultData.tracknew === track,\n                // )\n                setData(finalFilter)\n            } else {\n                const defaultData = projectsByRating.map((project, index) => {\n                    project.key = index + 1\n                    project.score = parseFloat(project.score).toFixed(2)\n                    project.globalScore = parseFloat(\n                        project.globalScore,\n                    ).toFixed(2)\n                    for (const i in teams) {\n                        const team = teams[i]\n                        if (project.team === team._id) {\n                            project.teamCode = team.code\n                            break\n                        }\n                    }\n                    return project\n                })\n\n                // sort defaultData by defaultData.rating\n                const sortedDefaultData = defaultData.sort((a, b) => {\n                    return b.rating - a.rating\n                })\n\n                const finalFilter = sortedDefaultData.filter(\n                    project => project.teamCode,\n                )\n                setData(finalFilter)\n            }\n        }\n    }, [projects, projectsByRating, location, track, teams])\n\n    // TODO config columsn (table only in physical events)\n    const openSingleEdit = useCallback(row => {\n        if (!row.original) {\n            row.original = row\n        }\n\n        setSelectedProject(row.original)\n        setEditModalOpen(true)\n        /* const search = `?${new URLSearchParams({\n                modal: 'edit',\n                id: row.original.user,\n            }).toString()}`\n            dispatch(push({ search })) */\n    }, [])\n    // console.log(data)\n    const columns = useMemo(() => {\n        const columns = [\n            {\n                Header: '#',\n                title: '#',\n                dataIndex: 'key',\n                // width: '20%',\n                accessor: (row, index) => {\n                    return index + 1\n                },\n                id: 'index',\n                sortType: Sorters.Numeric,\n            },\n            {\n                Header: 'Team',\n                title: 'Team',\n                dataIndex: 'teamCode',\n                search: true,\n                accessor: 'teamCode',\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Name',\n                title: 'Name',\n                dataIndex: 'name',\n                search: true,\n                // width: '40%',\n                accessor: 'name',\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Punchline',\n                title: 'Punchline',\n                dataIndex: 'punchline',\n                search: true,\n                width: '30%',\n                accessor: 'punchline',\n                ...Filters.ContainsSearch,\n            },\n            {\n                Header: 'Rating',\n                title: 'Rating',\n                dataIndex: 'rating',\n                // search: true,\n                sorter: (a, b) => a.rating - b.rating,\n                // width: '20%',\n                accessor: 'rating',\n                ...Filters.NumericSearch,\n            },\n            {\n                Header: 'Score',\n                title: 'Scores',\n                dataIndex: 'score',\n                // search: true,\n                sorter: (a, b) => {\n                    const scoreA = a.score\n                    const scoreB = b.score\n                    return scoreA - scoreB\n                },\n                accessor: row => row.score,\n                ...Filters.NumericSearch,\n            },\n            {\n                Header: 'Global Score',\n                title: 'Global Scores',\n                dataIndex: 'globalScore',\n                // search: true,\n                sorter: (a, b) => {\n                    const scoreA = a.globalScore\n                    const scoreB = b.globalScore\n                    return scoreA - scoreB\n                },\n                accessor: row => row.globalScore,\n                ...Filters.NumericSearch,\n            },\n\n            /*\n            {\n                Header: 'Location',\n                accessor: 'location',\n                ...Filters.ContainsSearch,\n            },\n            */\n        ]\n        if (!location && !track) {\n            columns.push({\n                Header: 'Location',\n                title: 'Location',\n                dataIndex: 'locationnew',\n                search: true,\n                // width: '30%',\n                accessor: 'locationnew',\n                ...Filters.ContainsSearch,\n            })\n            columns.push({\n                Header: 'Category',\n                title: 'Category',\n                dataIndex: 'tracknew',\n                search: true,\n                // width: '30%',\n                accessor: 'tracknew',\n                ...Filters.ContainsSearch,\n            })\n        }\n\n        columns.push({\n            Header: '',\n            title: '',\n            dataIndex: 'isWinner',\n            width: '10%',\n            accessor: 'isWinner',\n            render: e => {\n                if (e) {\n                    return <div>Finalist</div>\n                }\n                return <div>{/* <Trophy /> */}</div>\n            },\n        })\n        return columns\n    }, [location, track])\n\n    const handleOnShow = () => {}\n    const handleOnResetScore = () => {\n        // @ts-ignore\n        setEditModalOpen(false)\n        setConfirmResetOpen(true)\n    }\n    const handleOnMakeWinner = () => {\n        setEditModalOpen(false)\n        setConfirmWinnerOpen(true)\n    }\n\n    const makeWinner = () => {\n        setIsSubmitting(true)\n        const newData = data.map(project => {\n            if (project._id === selectedProject._id) {\n                project.isWinner = true\n            }\n            return project\n        })\n        setData(newData)\n        dispatch(DashboardActions.makeWinner(selectedProject._id))\n            .then(() => {\n                setIsSubmitting(false)\n                setConfirmWinnerOpen(false)\n                setToggle(!toggle)\n            })\n            .catch(() => {\n                setIsSubmitting(false)\n            })\n    }\n\n    const resetScores = () => {\n        const newData = data.map(project => {\n            if (project._id === selectedProject._id) {\n                project.score = 0\n            }\n            return project\n        })\n\n        setData(newData)\n        dispatch(DashboardActions.removeScore(selectedProject._id))\n        // dispatch(DashboardActions.updateProjects(event.slug))\n        setConfirmResetOpen(false)\n        setToggle(!toggle)\n    }\n\n    const resetWinners = () => {\n        dispatch(OrganiserActions.resetWinners(event.slug))\n\n        setConfirmResetWinnersOpen(false)\n        setToggle(!toggle)\n        window.location.reload()\n    }\n\n    // const onProjectSelected = useCallback(\n    //     project => {\n    //         dispatch(push(`${baseURL}${project.original._id}`))\n    //     },\n    //     [baseURL, dispatch],\n    // )\n\n    // TODO refactor forloops\n    if (!projectsByRating) return <LoadingSpinner />\n\n    return (\n        <>\n            <EditProjectModal\n                handleMakeWinner={handleOnMakeWinner}\n                handleResetScores={handleOnResetScore}\n                project={selectedProject}\n                editModalOpen={editModalOpen}\n                onClose={() => {\n                    setEditModalOpen(false)\n                    setSelectedProject(null)\n                }}\n            />\n            <TableWithFilter\n                data={data}\n                columns={columns}\n                handleOnMakeWinner={handleOnMakeWinner}\n                handleOnResetScore={handleOnResetScore}\n                handleOnShow={handleOnShow}\n                onRowClick={openSingleEdit}\n            />\n            <div className=\"flex\">\n                <CSVLink\n                    style={{\n                        textDecoration: 'none',\n                        color: 'inherit',\n                    }}\n                    data={projects.map((p, index) => {\n                        // console.log(p)\n                        return {\n                            '#': index + 1,\n                            Name: p.name,\n                            Team: p.team,\n                            Punchline: p.punchline.replace(/[^a-zA-Z ]/g, ''),\n                            Rating: p.rating,\n                            'Regional Score': p.score,\n                            'Global Score': p.globalScore,\n                            Location: p.locationnew,\n                            Category: p.track,\n                            status: p.status,\n                            technologies: p.technologies.join(', '),\n                            'Demo Link': p.demo,\n                            // remove all special characters from description and only string\n                            description: p.description.replace(\n                                /[^a-zA-Z ]/g,\n                                '',\n                            ),\n                            'Created At': p.createdAt,\n                            documents: p.documents.join(', '),\n                            achievements: p.achievements.join(', '),\n                            challenges: p.challenges.join(', '),\n                            images: p.images.join(', '),\n                        }\n                    })}\n                    filename=\"export.csv\"\n                >\n                    <div className=\"bg-blue-600 px-4 py-2 rounded-md text-white mr-4 w-fit\">\n                        Export Projects\n                    </div>\n                </CSVLink>\n                <button\n                    onClick={() => setConfirmResetWinnersOpen(true)}\n                    className=\"bg-red-600 px-4 py-2 rounded-md text-white\"\n                >\n                    Reset Winners\n                </button>\n            </div>\n            <Dialog\n                open={confirmWinnerOpen}\n                onClose={() => setConfirmWinnerOpen(false)}\n            >\n                <PageWrapper>\n                    <div className=\"max-w-sm p-12\">\n                        <p className=\"text-lg\">\n                            Are you sure you want to make this project a winner?\n                        </p>\n                        <div className=\"flex mt-2 justify-between\">\n                            <button\n                                onClick={makeWinner}\n                                className=\"bg-[#39967a] rounded-md text-white px-4 py-2 flex items-center\"\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting ? (\n                                    <>\n                                        <div className=\"w-5 h-5 mr-2\">\n                                            <LoadingSpinner />\n                                        </div>\n                                        <span>Processing...</span>\n                                    </>\n                                ) : (\n                                    'Confirm'\n                                )}\n                            </button>\n                            <button\n                                className=\"bg-gray-500 rounded-md text-white  px-4 py-2\"\n                                onClick={() => setConfirmWinnerOpen(false)}\n                                disabled={isSubmitting}\n                            >\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </PageWrapper>\n            </Dialog>\n            <Dialog\n                open={confirmResetOpen}\n                onClose={() => setConfirmResetOpen(false)}\n            >\n                <PageWrapper>\n                    <div className=\"max-w-sm p-12\">\n                        <p className=\"text-lg\">\n                            Are you sure you want to make this project a winner?\n                        </p>\n                        <div className=\"flex mt-2 justify-between\">\n                            <button\n                                onClick={resetScores}\n                                className=\"bg-red-600 rounded-md text-white px-4 py-2\"\n                            >\n                                Reset Scores\n                            </button>\n                            <button\n                                className=\"bg-gray-500 rounded-md text-white  px-4 py-2\"\n                                onClick={() => setConfirmResetOpen(false)}\n                            >\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </PageWrapper>\n            </Dialog>\n            <Dialog\n                open={confirmResetWinnersOpen}\n                onClose={() => setConfirmResetWinnersOpen(false)}\n            >\n                <PageWrapper>\n                    <div className=\"max-w-sm p-12\">\n                        <p className=\"text-lg\">\n                            Are you sure you want to reset the winners list?\n                        </p>\n                        <div className=\"flex mt-2 justify-between\">\n                            <button\n                                onClick={resetWinners}\n                                className=\"bg-red-600 rounded-md text-white px-4 py-2\"\n                            >\n                                Reset Winners\n                            </button>\n                            <button\n                                className=\"bg-gray-500 rounded-md text-white  px-4 py-2\"\n                                onClick={() =>\n                                    setConfirmResetWinnersOpen(false)\n                                }\n                            >\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </PageWrapper>\n            </Dialog>\n        </>\n    )\n}\n\nexport default ProjectsTable\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport ProjectsTable from 'components/tables/ProjectsTable'\n\nexport default () => {\n    const projects = useSelector(OrganiserSelectors.projects)\n    const event = useSelector(OrganiserSelectors.event)\n\n    console.log('projects table', projects)\n\n    return (\n        <>\n            {projects && (\n                <ProjectsTable\n                    baseURL={`/projects/${event.slug}/view/`}\n                    projects={projects}\n                />\n            )}\n        </>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    Box,\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    ListItemText,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\n\nimport ProjectsTable from 'components/tables/ProjectsTable'\nimport TrackLink from './TrackLink'\n\nexport default () => {\n    const dispatch = useDispatch()\n    const event = useSelector(OrganiserSelectors.event)\n    const projects = useSelector(OrganiserSelectors.projects)\n\n    const getProjectsForTrack = slug => {\n        return projects.filter(project => project.tracknew === slug)\n    }\n\n    useEffect(() => {\n        if (event) {\n            dispatch(DashboardActions.getProjectsByRating(event.slug))\n        }\n    }, [dispatch, event, event.slug])\n\n    const getProjectsForTrackAndLocation = (trackSlug, locationSlug) => {\n        return projects.filter(\n            project =>\n                project.tracknew === trackSlug &&\n                project.locationnew === locationSlug,\n        )\n    }\n\n    let tracks = []\n    if (event) {\n        if (event.tracks) {\n            tracks = event.tracks.map(track => {\n                return {\n                    slug: track.slug,\n                    name: track.name,\n                }\n            })\n        }\n    }\n    // const tracks = [\n    //     {\n    //         slug: 'Engineering',\n    //         name: 'Engineering',\n    //     },\n    //     {\n    //         slug: 'Customer',\n    //         name: 'Customer',\n    //     },\n    //     {\n    //         slug: 'Company',\n    //         name: 'Company',\n    //     },\n    // ]\n    const locations = [\n        {\n            slug: 'Americas',\n            name: 'Americas',\n        },\n        {\n            slug: 'EMEA',\n            name: 'EMEA',\n        },\n        {\n            slug: 'India',\n            name: 'India',\n        },\n    ]\n\n    return (\n        <Box>\n            {tracks.map(track => {\n                const projects = getProjectsForTrack(track.slug)\n\n                return (\n                    <ExpansionPanel key={track.slug}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <ListItemText\n                                primary={track.name}\n                                secondary={`${projects.length} projects`}\n                            ></ListItemText>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Box\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                                style={{\n                                    width: '100%',\n                                }}\n                            >\n                                {/* <Box p={1}>\n                                    <TrackLink track={track.slug} />\n                                </Box> */}\n                                {locations.map(location => {\n                                    const projects =\n                                        getProjectsForTrackAndLocation(\n                                            track.slug,\n                                            location.slug,\n                                        )\n\n                                    return (\n                                        <ExpansionPanel\n                                            style={{\n                                                backgroundColor: '#cccccc',\n                                            }}\n                                            key={location.slug}\n                                        >\n                                            <ExpansionPanelSummary\n                                                expandIcon={<ExpandMoreIcon />}\n                                                aria-controls=\"panel1a-content\"\n                                                id=\"panel1a-header\"\n                                            >\n                                                <ListItemText\n                                                    primary={location.name}\n                                                    secondary={`${projects.length} projects`}\n                                                ></ListItemText>\n                                            </ExpansionPanelSummary>\n                                            <ExpansionPanelDetails>\n                                                <Box\n                                                    display=\"flex\"\n                                                    flexDirection=\"column\"\n                                                    style={{ width: '100%' }}\n                                                >\n                                                    {/* <Box p={1}>\n                                    <locationLink track={track.slug} />\n                                </Box> */}\n\n                                                    <ProjectsTable\n                                                        location={location.slug}\n                                                        track={track.slug}\n                                                        projects={projects}\n                                                    />\n                                                </Box>\n                                            </ExpansionPanelDetails>\n                                        </ExpansionPanel>\n                                    )\n                                })}\n                                {/* <ProjectsTable projects={projects} /> */}\n                            </Box>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            })}\n        </Box>\n    )\n}\n","import _axios from 'services/axios'\n\nconst WinnerVoteService = {}\n\nfunction config(idToken) {\n    return {\n        headers: {\n            Authorization: `Bearer ${idToken}`,\n        },\n    }\n}\n\nWinnerVoteService.submitVote = (idToken, slug, projectId) => {\n    return _axios.post(`/winner-votes/${slug}`, { projectId }, config(idToken))\n}\n\nWinnerVoteService.getVote = (idToken, slug) => {\n    return _axios.get(`/winner-votes/${slug}`, config(idToken))\n}\n\nWinnerVoteService.getResults = (idToken, slug) => {\n    return _axios.get(`/winner-votes/${slug}/results`, config(idToken))\n}\n\nexport default WinnerVoteService\n","import React, { useMemo } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport { useRouteMatch, useLocation } from 'react-router'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\nimport PageHeader from 'components/generic/PageHeader'\n\nimport DefaultTab from './default'\nimport ChallengesTab from './by-challenge'\nimport TracksTab from './by-track'\nimport GavelTab from './gavel'\nimport AnnotatorsTab from './annotators'\nimport WinnersTab from './winners'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nexport default () => {\n    const event = useSelector(OrganiserSelectors.event)\n    const projectsLoading = useSelector(OrganiserSelectors.projectsLoading)\n    const match = useRouteMatch()\n    const location = useLocation()\n\n    const tabs = useMemo(() => {\n        const data = [\n            {\n                path: '',\n                key: 'all-projects',\n                label: 'All projects',\n                component: DefaultTab,\n            },\n        ]\n        // if (event?.challengesEnabled && event?.challenges?.length > 0) {\n        //     data.push({\n        //         path: '/by-challenge',\n        //         key: 'by-challenge',\n        //         label: 'By challenge',\n        //         component: ChallengesTab,\n        //     })\n        // }\n\n        // if (event?.tracksEnabled && event?.tracks?.length > 0) {\n        data.push({\n            path: '/by-category',\n            key: 'by-category',\n            label: 'By category',\n            component: TracksTab,\n        })\n        // }\n\n        // data.push({\n        //     path: '/annotators',\n        //     key: 'annotators',\n        //     label: 'Gavel annotators',\n        //     component: AnnotatorsTab,\n        // })\n\n        // data.push({\n        //     path: '/winners',\n        //     key: 'winners',\n        //     label: 'Winners',\n        //     component: WinnersTab,\n        // })\n\n        return data\n    }, [event])\n\n    if (!event || projectsLoading) return <PageWrapper loading />\n\n    return (\n        <PageWrapper>\n            <PageHeader\n                heading=\"Projects\"\n                subheading=\"All of the cool stuff people have made\"\n            />\n            <MaterialTabsLayout\n                transparent\n                tabs={tabs}\n                location={location}\n                baseRoute={match.url}\n            />\n        </PageWrapper>\n    )\n}\n","import React from 'react'\n\nimport { useDispatch } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { useRouteMatch } from 'react-router'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Paper, Box, Typography, ButtonBase } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    paperButton: {\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n    },\n}))\n\nexport default () => {\n    const classes = useStyles()\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n    return (\n        <Grid container spacing={3}>\n            {/* <Grid item xs={12}>\n                <Paper elevation={0}>\n                    <ButtonBase\n                        onClick={() => dispatch(push(`${match.url}/overall`))}\n                        component=\"div\"\n                        classes={{ root: classes.paperButton }}\n                    >\n                        <Box p={3}>\n                            <Typography variant=\"h6\">\n                                Overall results\n                            </Typography>\n                            <Typography variant=\"body1\">\n                                View and edit the overall ranking of projects\n                            </Typography>\n                        </Box>\n                    </ButtonBase>\n                </Paper>\n            </Grid> */}\n            <Grid item xs={12}>\n                <Paper elevation={0}>\n                    <ButtonBase\n                        onClick={() => dispatch(push(`${match.url}/tracks`))}\n                        component=\"div\"\n                        classes={{ root: classes.paperButton }}\n                    >\n                        <Box p={3}>\n                            <Typography variant=\"h6\">\n                                Category results\n                            </Typography>\n                            <Typography variant=\"body1\" gutterBottom>\n                                View and edit the rankings of projects within\n                                category\n                            </Typography>\n                        </Box>\n                    </ButtonBase>\n                </Paper>\n            </Grid>\n            {/* <Grid item xs={12}>\n                <Paper elevation={0}>\n                    <ButtonBase\n                        onClick={() =>\n                            dispatch(push(`${match.url}/challenges`))\n                        }\n                        component=\"div\"\n                        classes={{ root: classes.paperButton }}\n                    >\n                        <Box p={3} display=\"flex\" flexDirection=\"column\">\n                            <Typography variant=\"h6\">\n                                Challenge results\n                            </Typography>\n                            <Typography variant=\"body1\">\n                                View and edit the rankings of projects within\n                                challenges\n                            </Typography>\n                        </Box>\n                    </ButtonBase>\n                </Paper>\n            </Grid> */}\n        </Grid>\n    )\n}\n","import React, { useCallback } from 'react'\n\nimport { Box, List, ListSubheader } from '@material-ui/core'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n\n    return result\n}\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source)\n    const destClone = Array.from(destination)\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\n\n    destClone.splice(droppableDestination.index, 0, removed)\n\n    const result = {}\n    result[droppableSource.droppableId] = sourceClone\n    result[droppableDestination.droppableId] = destClone\n\n    return result\n}\n\nconst getItemStyle = (isDragging, draggableStyle) => {\n    if (isDragging) {\n        return {\n            userSelect: 'none',\n            background: 'lightgreen',\n            ...draggableStyle,\n        }\n    }\n\n    return {\n        userSelect: 'none',\n        ...draggableStyle,\n    }\n}\n\nconst getListStyle = isDraggingOver => {\n    if (isDraggingOver) {\n        return {\n            paddingBottom: '50px',\n            overflow: 'scroll',\n            background: 'rgba(0,0,0,0.10)',\n        }\n    }\n    return {\n        paddingBottom: '50px',\n        overflow: 'scroll',\n        background: 'rgba(0,0,0,0.05)',\n    }\n}\n\nconst DragDropList = ({\n    value,\n    onChange,\n    topTitle,\n    bottomTitle,\n    renderTopItem = () => {},\n    renderBottomItem = () => {},\n}) => {\n    const state = {\n        top: value?.top ?? [],\n        bottom: value?.bottom ?? [],\n    }\n    console.log(state.bottom)\n    const handleDragEnd = useCallback(\n        result => {\n            const { source, destination } = result\n\n            if (!destination) return\n\n            if (source.droppableId === destination.droppableId) {\n                const items = reorder(\n                    state[source.droppableId],\n                    source.index,\n                    destination.index,\n                )\n\n                onChange({\n                    ...value,\n                    [source.droppableId]: items,\n                })\n            } else {\n                const { top, bottom } = move(\n                    state[source.droppableId],\n                    state[destination.droppableId],\n                    source,\n                    destination,\n                )\n\n                onChange({\n                    ...value,\n                    top,\n                    bottom,\n                })\n            }\n        },\n        [state, value, onChange],\n    )\n\n    return (\n        <Box p={2} style={{ background: 'white' }}>\n            <DragDropContext onDragEnd={handleDragEnd}>\n                <Droppable droppableId=\"top\">\n                    {(provided, snapshot) => (\n                        <List\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                            subheader={\n                                <ListSubheader style={{ background: 'white' }}>\n                                    {topTitle}\n                                </ListSubheader>\n                            }\n                        >\n                            {state.top.map((id, index) => {\n                                return (\n                                    <Draggable\n                                        key={id._id}\n                                        draggableId={id._id}\n                                        index={index}\n                                    >\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps\n                                                        .style,\n                                                )}\n                                            >\n                                                {renderTopItem(id._id, index)}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                )\n                            })}\n                            {provided.placeholder}\n                        </List>\n                    )}\n                </Droppable>\n                <Droppable droppableId=\"bottom\">\n                    {(provided, snapshot) => (\n                        <List\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                            subheader={\n                                <ListSubheader style={{ background: 'white' }}>\n                                    {bottomTitle}\n                                </ListSubheader>\n                            }\n                        >\n                            {state.bottom.map((id, index) => (\n                                <Draggable\n                                    key={id._id}\n                                    draggableId={id._id}\n                                    index={index}\n                                >\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style,\n                                            )}\n                                        >\n                                            {renderBottomItem(id._id, index)}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </List>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </Box>\n    )\n}\n\nexport default DragDropList\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    Paper,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n} from '@material-ui/core'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as SnackbarActions from 'redux/snackbar/actions'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport LoadingSpinner from 'components/loadingCircle'\n\nimport DragDropList from 'components/generic/DragDropList'\n\nlet counter = 0\n\nconst getAvatarStyle = index => {\n    switch (index) {\n        case 0:\n            return {\n                backgroundColor: '#ffd700',\n            }\n        case 1:\n            return {\n                backgroundColor: '#aaa9ad',\n            }\n        case 2:\n            return {\n                backgroundColor: '#cd7f32',\n            }\n        default:\n            return {\n                backgroundColor: 'rgba(0,0,0,0.5)',\n            }\n    }\n}\n\nexport default ({ track }) => {\n    const dispatch = useDispatch()\n    const rankingsByTrack = useSelector(OrganiserSelectors.rankingsByTrack)\n    // const allProjects = useSelector(OrganiserSelectors.projects)\n    const allProjects = useSelector(DashboardSelectors.projectsByRating)\n    const event = useSelector(OrganiserSelectors.event)\n    // const projectsByRating = useSelector()\n    const allProjectsMap = useSelector(OrganiserSelectors.projectsMap)\n    const rankedProjects = useSelector(OrganiserSelectors.rankedProjects)\n    // const rankedProjects = []\n    const newunrankedProjects = useSelector(OrganiserSelectors.unrankedProjects)\n    const [isInitialRender, setIsInitialRender] = useState(true)\n    const slug = track?.slug\n    // const rankedProjects = rankingsByTrack?.[slug]?.rankings ?? []\n    // const trackProjects = useMemo(() => {\n    //     return allProjects.filter(project => project.track === slug)\n    // }, [allProjects, slug])\n\n    // Group projects by category\n    const [categories, setCategories] = useState([])\n    const [selectedCategory, setSelectedCategory] = useState(null)\n    const [ranked, setRanked] = useState(rankedProjects)\n\n    useEffect(() => {\n        if (event && event.slug) {\n            dispatch(OrganiserActions.getRankedProjects(event.slug))\n            dispatch(DashboardActions.getProjectsByRating(event.slug))\n            // dispatch(OrganiserActions.(event.slug))\n        }\n    }, [dispatch, event.slug])\n\n    // Extract unique categories from projects\n    useEffect(() => {\n        if (allProjects) {\n            const uniqueCategories = [\n                ...new Set(allProjects.map(project => project.track)),\n            ].filter(category => category) // Filter out null/undefined\n            setCategories(uniqueCategories)\n\n            // Set the first category as selected if there is one and none is currently selected\n            if (uniqueCategories.length > 0 && !selectedCategory) {\n                setSelectedCategory(uniqueCategories[0])\n            }\n        }\n    }, [allProjects, selectedCategory])\n\n    // useEffect(() => {\n    //     setRanked(rankedProjects)\n    // }, [rankedProjects])\n\n    // useEffect(() => {\n    //     dispatch(OrganiserActions.getUnrankedProjects(event.slug))\n    // }, [])\n    // const unrankedProjects = []\n\n    // if (rankedProjects == 'none') {\n    //     // @ts-ignore\n    //     rankedProjects = []\n    // }\n\n    const callUnrankedProjects = rankedList => {\n        console.log('Ranked projects:', rankedProjects)\n        let unrankedProjects = []\n        if (allProjects) {\n            if (rankedProjects) {\n                console.log('All projects:', allProjects)\n\n                // First filter by selected category\n                const categoryProjects = allProjects.filter(\n                    project => project.track === selectedCategory,\n                )\n\n                console.log(\n                    'Category projects for',\n                    selectedCategory,\n                    ':',\n                    categoryProjects,\n                )\n\n                // Get all projects from the selected category that are finalists (isWinner=true)\n                // but are not in the ranked list\n                unrankedProjects = categoryProjects.filter(project => {\n                    // Only consider projects that are winners/finalists\n                    if (project.isWinner) {\n                        // Check if this project is already in the ranked list\n                        if (rankedList) {\n                            return !rankedList.includes(project._id)\n                        } else if (rankedProjects) {\n                            // If no ranked list provided, check against rankedProjects\n                            const isAlreadyRanked = rankedProjects.some(\n                                rankedProject =>\n                                    rankedProject._id === project._id,\n                            )\n                            return !isAlreadyRanked\n                        }\n                        return true\n                    }\n                    return false\n                })\n\n                console.log(\n                    'Unranked projects for',\n                    selectedCategory,\n                    ':',\n                    unrankedProjects,\n                )\n            }\n        }\n\n        return unrankedProjects\n    }\n\n    // const unrankedProjects = callUnrankedProjects() // REMOVE this line\n\n    //     console.log('unrankedProjects', unrankedProjects)\n    //     return unrankedProjects\n    // }, [trackProjects, rankedProjects])\n\n    const [dragDropState, setDragDropState] = useState({\n        top: [], // MODIFIED: Initialize as empty, will be populated by useEffect\n        bottom: [], // MODIFIED: Initialize as empty, will be populated by useEffect\n    })\n    // console.log('rankedProjects', rankedProjects)\n    // console.log('unrankedProjects', unrankedProjects)\n    // console.log('allProjects', allProjects)\n\n    // console.log('dragDropState', dragDropState)\n\n    // useCallback(() => {\n    //     setDragDropState({\n    //         top: rankedProjects,\n    //         bottom: unrankedProjects,\n    //     })\n    // }, [rankedProjects, unrankedProjects, allProjects])\n\n    // REPLACE the following useEffect block\n    useEffect(() => {\n        // Ensure critical data from Redux is available.\n        if (!allProjects || !allProjectsMap) {\n            // If essential data isn't loaded, set to a defined initial state.\n            // Avoids errors if rankedProjects is also not yet available.\n            // Only reset if it's not already empty to avoid unnecessary re-renders on initial load.\n            if (\n                dragDropState.top.length > 0 ||\n                dragDropState.bottom.length > 0\n            ) {\n                setDragDropState({ top: [], bottom: [] })\n            }\n            return\n        }\n\n        // dragDropState.top should reflect the global rankedProjects from Redux\n        // Assuming rankedProjects from Redux is an array of project objects\n        const newTopState = rankedProjects ? [...rankedProjects] : []\n\n        // dragDropState.bottom should be all projects that are 'isWinner' but not in newTopState, across ALL categories.\n        let newBottomState = []\n        // Ensure allProjects is an array before filtering\n        if (Array.isArray(allProjects)) {\n            const rankedIds = new Set(newTopState.map(p => p._id)) // p is a project object\n            newBottomState = allProjects.filter(project => {\n                // project is a project object\n                return project.isWinner && !rankedIds.has(project._id)\n            })\n        }\n\n        // Only update if the content of the arrays has actually changed.\n        // Compares based on sorted arrays of project IDs.\n        // Ensure projects in dragDropState.top/bottom and newTopState/newBottomState have _id\n        const currentTopIds = dragDropState.top\n            .map(p => p?._id)\n            .filter(id => id != null)\n            .sort()\n        const newTopIdsFromState = newTopState\n            .map(p => p?._id)\n            .filter(id => id != null)\n            .sort()\n        const currentBottomIds = dragDropState.bottom\n            .map(p => p?._id)\n            .filter(id => id != null)\n            .sort()\n        const newBottomIdsFromState = newBottomState\n            .map(p => p?._id)\n            .filter(id => id != null)\n            .sort()\n\n        const topChanged =\n            JSON.stringify(currentTopIds) !== JSON.stringify(newTopIdsFromState)\n        const bottomChanged =\n            JSON.stringify(currentBottomIds) !==\n            JSON.stringify(newBottomIdsFromState)\n\n        if (topChanged || bottomChanged) {\n            setDragDropState({\n                top: newTopState,\n                bottom: newBottomState,\n            })\n        }\n    }, [rankedProjects, allProjects, allProjectsMap]) // MODIFIED: Dependencies for synchronization with Redux state only\n\n    // useEffect(() => {\n    //     if (unrankedFlag && unrankedProjects.length !== 0 && unrankedFlag) {\n    //         setDragDropState({\n    //             ...dragDropState,\n    //             bottom: unrankedProjects,\n    //         })\n    //         unrankedFlag = false\n    //     }\n    //     if (rankedFlag && rankedProjects.length !== 0 && rankedFlag) {\n    //         setDragDropState({\n    //             ...dragDropState,\n    //             top: rankedProjects,\n    //         })\n    //         rankedFlag = false\n    //     }\n    //     console.log('dragDropState', dragDropState)\n    //     // update()\n    // }, [rankedProjects, unrankedProjects])\n    const renderRankedItem = (id, index) => {\n        const project = allProjectsMap[id]\n        if (!project) {\n            console.log('Warning: Project not found for ID:', id)\n            return null\n        }\n\n        return (\n            <ListItem key={id}>\n                <ListItemAvatar>\n                    <Avatar style={getAvatarStyle(index)}>{index + 1}</Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                    primary={project.name || 'Unnamed Project'}\n                    secondary={project.punchline || 'No description'}\n                />\n                <ListItemText\n                    primary={project.locationnew || ''}\n                    secondary={`Category: ${project.track || 'Uncategorized'}`}\n                />\n                <p>\n                    Score:{' '}\n                    {project.globalScore\n                        ? parseFloat(project.globalScore).toFixed(2)\n                        : 'N/A'}{' '}\n                </p>\n            </ListItem>\n        )\n    }\n\n    const renderUnrankedItem = useCallback(\n        (id, index) => {\n            const project = allProjectsMap[id]\n            if (!project) {\n                console.log('Warning: Unranked project not found for ID:', id)\n                return null\n            }\n\n            return (\n                <div>\n                    <ListItem>\n                        <ListItemAvatar>\n                            <Avatar style={getAvatarStyle(index)}>?</Avatar>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={project.name || 'Unnamed Project'}\n                            secondary={project.punchline || 'No description'}\n                        />\n                        <ListItemText\n                            primary={project.locationnew || ''}\n                            secondary={`Category: ${\n                                project.track || 'Uncategorized'\n                            }`}\n                        />\n                        <p>\n                            Score:{' '}\n                            {project.globalScore\n                                ? parseFloat(project.globalScore).toFixed(2)\n                                : 'N/A'}{' '}\n                        </p>\n                    </ListItem>\n                </div>\n            )\n        },\n        [allProjectsMap],\n    )\n\n    if (!allProjects) {\n        return <LoadingSpinner />\n    }\n\n    return (\n        <Paper elevation={0}>\n            <div className=\"mb-6 mt-3 p-4 bg-gray-50 rounded-lg shadow-sm\">\n                <h3 className=\"text-lg font-medium mb-3\">Select Category</h3>\n                <div className=\"flex flex-wrap gap-3\">\n                    {categories.map(category => (\n                        <button\n                            key={category}\n                            className={`px-4 py-2 rounded-md font-medium transition-all duration-200 shadow-sm hover:shadow ${\n                                selectedCategory === category\n                                    ? 'bg-[#39967a] text-white'\n                                    : 'bg-white text-gray-800 hover:bg-gray-100 border border-gray-200'\n                            }`}\n                            onClick={() => setSelectedCategory(category)}\n                        >\n                            {category}\n                        </button>\n                    ))}\n                </div>\n            </div>\n\n            {selectedCategory && (\n                <>\n                    <h2 className=\"text-xl font-bold mb-4 pl-2 border-l-4 border-[#39967a] py-1\">\n                        Winners for {selectedCategory}\n                    </h2>\n                    <div className=\"bg-white p-4 rounded-lg shadow-sm mb-6\">\n                        <DragDropList\n                            value={{\n                                top: dragDropState.top.filter(\n                                    project =>\n                                        project &&\n                                        allProjectsMap[project._id] &&\n                                        allProjectsMap[project._id].track ===\n                                            selectedCategory,\n                                ),\n                                bottom: dragDropState.bottom.filter(\n                                    project =>\n                                        project &&\n                                        allProjectsMap[project._id] &&\n                                        allProjectsMap[project._id].track ===\n                                            selectedCategory,\n                                ),\n                            }}\n                            onChange={newState => {\n                                // Preserve other categories in the state\n                                const otherCategoriesTop =\n                                    dragDropState.top.filter(\n                                        project =>\n                                            project &&\n                                            allProjectsMap[project._id] &&\n                                            allProjectsMap[project._id]\n                                                .track !== selectedCategory,\n                                    )\n\n                                const otherCategoriesBottom =\n                                    dragDropState.bottom.filter(\n                                        project =>\n                                            project &&\n                                            allProjectsMap[project._id] &&\n                                            allProjectsMap[project._id]\n                                                .track !== selectedCategory,\n                                    )\n\n                                setDragDropState({\n                                    top: [\n                                        ...otherCategoriesTop,\n                                        ...newState.top,\n                                    ],\n                                    bottom: [\n                                        ...otherCategoriesBottom,\n                                        ...newState.bottom,\n                                    ],\n                                })\n                            }}\n                            topTitle={`${selectedCategory} Winners`}\n                            renderTopItem={renderRankedItem}\n                            bottomTitle={`${selectedCategory} Finalists`}\n                            renderBottomItem={renderUnrankedItem}\n                        />\n                    </div>\n                </>\n            )}\n\n            <div className=\"mt-6 mb-8 text-center\">\n                <button\n                    onClick={async () => {\n                        // MODIFIED: Make the handler async\n                        const rankedListIds = dragDropState.top.map(project => {\n                            return project._id\n                        })\n                        console.log(\n                            'Attempting to save ranked list:',\n                            rankedListIds,\n                        )\n\n                        // This call's primary effect here seems to be logging or an internal calculation\n                        // based on the new list and current Redux state. It doesn't set state directly.\n                        callUnrankedProjects(rankedListIds)\n\n                        try {\n                            // Wait for the rankProjects action to complete\n                            await dispatch(\n                                OrganiserActions.rankProjects(\n                                    rankedListIds,\n                                    event.slug,\n                                ),\n                            )\n\n                            // If updateProjects is also an async operation that needs to complete\n                            // before fetching the new state, await it too.\n                            await dispatch(\n                                OrganiserActions.updateProjects(event.slug),\n                            )\n\n                            // Now that the backend operations are expected to be complete,\n                            // dispatch actions to fetch the updated data.\n                            // This will update the Redux store, and the useEffect hook will\n                            // then synchronize dragDropState with the fresh rankedProjects.\n                            dispatch(\n                                OrganiserActions.getRankedProjects(event.slug),\n                            )\n                            dispatch(\n                                DashboardActions.getProjectsByRating(\n                                    event.slug,\n                                ),\n                            )\n\n                            dispatch(\n                                SnackbarActions.success(\n                                    'Success! Projects Ranking Updated',\n                                ),\n                            )\n                        } catch (error) {\n                            console.error(\n                                'Failed to save project rankings:',\n                                error,\n                            )\n                            dispatch(\n                                SnackbarActions.error(\n                                    'Failed to update ranking. Please try again.',\n                                ),\n                            )\n                        }\n                    }}\n                    className=\"bg-[#39967a] py-4 rounded-md text-white text-lg font-medium shadow-md hover:bg-[#2d8669] transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-[#39967a] focus:ring-opacity-50\"\n                >\n                    Save Changes\n                </button>\n            </div>\n        </Paper>\n    )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { useSelector } from 'react-redux'\nimport {\n    Paper,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Avatar,\n} from '@material-ui/core'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\n\nimport DragDropList from 'components/generic/DragDropList'\n\nconst getAvatarStyle = index => {\n    switch (index) {\n        case 0:\n            return {\n                backgroundColor: '#ffd700',\n            }\n        case 1:\n            return {\n                backgroundColor: '#aaa9ad',\n            }\n        case 2:\n            return {\n                backgroundColor: '#cd7f32',\n            }\n        default:\n            return {\n                backgroundColor: 'rgba(0,0,0,0.5)',\n            }\n    }\n}\n\nexport default ({ challenge }) => {\n    const allProjectsMap = useSelector(OrganiserSelectors.projectsMap)\n\n    // TODO Add challenge results\n    /*\n    const rankingsByChallenge = useSelector(\n        OrganiserSelectors.rankingsByChallenge\n    )\n    const rankings = rankingsByChallenge?.[challenge?.slug]\n    */\n\n    const [dragDropState, setDragDropState] = useState({\n        top: [],\n        bottom: Object.keys(allProjectsMap).slice(0, 10),\n    })\n\n    const renderRankedItem = useCallback(\n        (id, index) => {\n            const project = allProjectsMap[id]\n\n            return (\n                <ListItem>\n                    <ListItemAvatar>\n                        <Avatar style={getAvatarStyle(index)}>\n                            {index + 1}\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={project?.name}\n                        secondary={project?.punchline}\n                    />\n                </ListItem>\n            )\n        },\n        [allProjectsMap],\n    )\n\n    const renderUnrankedItem = useCallback(\n        (id, index) => {\n            const project = allProjectsMap[id]\n\n            return (\n                <ListItem key={id}>\n                    <ListItemAvatar>\n                        <Avatar style={{ background: 'rgba(0,0,0,0.5)' }}>\n                            ?\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={project?.name}\n                        secondary={project?.punchline}\n                    />\n                </ListItem>\n            )\n        },\n        [allProjectsMap],\n    )\n\n    return (\n        <Paper elevation={0}>\n            <DragDropList\n                value={dragDropState}\n                onChange={setDragDropState}\n                topTitle=\"Ranked projects\"\n                renderTopItem={renderRankedItem}\n                bottomTitle=\"Unranked projects\"\n                renderBottomItem={renderUnrankedItem}\n            />\n        </Paper>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport ProjectsTable from 'components/tables/ProjectsTable'\n\nexport default () => {\n    const projects = useSelector(OrganiserSelectors.projects)\n    const event = useSelector(OrganiserSelectors.event)\n    const globalScores = useSelector(OrganiserSelectors.globalScores)\n    const dispatch = useDispatch()\n\n    console.log('projects table', projects)\n    useEffect(() => {\n        if (event && event.slug) {\n            console.log('Dispatching with event slug:', event.slug)\n            dispatch(OrganiserActions.getALlGlobalScores(event.slug))\n        }\n    }, [event, dispatch])\n\n    console.log('global scores', globalScores)\n\n    // [\n    //     \"#####\",\n    //     \"Sunil Gupta\",\n    //     \"sunil.gupta@harness.io\"\n    // ],\n    // [\n    //     \"S.N.\",\n    //     \"Name\",\n    //     \"Punchline\",\n    //     \"Execution of the project?\",\n    //     \"Usefulness of the project\",\n    //     \"Presentation of the project\",\n    //     \"Ability to fix significant issues within existing projects and platform to improve scalability customer experience or our ability to debug and root cause issues\",\n    //     \"Innovation\",\n    //     \"Ability to develop test and deliver features and fixes quicker. eg. improvements to build process?\"\n    // ],\n    // [\n    //     1,\n    //     \"SearchOps\",\n    //     \"SearchOps A contextual search engine powered by Harness  MLOps Pipelines to fetch internal data sources as datasets \",\n    //     7,\n    //     9,\n    //     0,\n    //     8,\n    //     9,\n    //     7\n    // ],\n    // [\n    //     2,\n    //     \"Save The Day With Impersonation\",\n    //     \"Effortless Troubleshooting Instant Solutions Harness the Power of Impersonation\",\n    //     9,\n    //     7,\n    //     9,\n    //     6,\n    //     7,\n    //     7\n    // ],\n\n    if (globalScores.length === 0) {\n        return <div>Loading...</div>\n    }\n    return (\n        <>\n            {globalScores && (\n                // make a table with the global scores and style it with tailwind\n                <table className=\"table-auto w-full\">\n                    {/* <thead>\n                        <tr>\n                            {globalScores[0].map((score, index) => (\n                                <th key={index} className=\"px-4 py-2\">\n                                    {score}\n                                </th>\n                            ))}\n                        </tr>\n                    </thead> */}\n                    <tbody>\n                        {globalScores.map((score, index) => {\n                            // let header = false\n                            // let semiheader = false\n                            // let averageColumn = false\n                            if (score[0] === '#####') {\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className={`border px-4 py-2 bg-gray-200`}\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            if (score[0] === 'S.N.') {\n                                // alert(score)\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className=\"border px-4 py-2 bg-green-200\"\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            if (score[0] === '') {\n                                alert(score)\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className={`border px-4 py-2 bg-yellow-200`}\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            return (\n                                <tr key={index}>\n                                    {score.map((data, index) => {\n                                        return (\n                                            <td\n                                                key={index}\n                                                className={`border px-4 py-2`}\n                                            >\n                                                {data}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            )}\n        </>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport ProjectsTable from 'components/tables/ProjectsTable'\n\nexport default () => {\n    const projects = useSelector(OrganiserSelectors.projects)\n    const event = useSelector(OrganiserSelectors.event)\n    const globalScores = useSelector(OrganiserSelectors.regionalScores)\n    const dispatch = useDispatch()\n\n    console.log('projects table', projects)\n    useEffect(() => {\n        if (event && event.slug) {\n            console.log('Dispatching with event slug:', event.slug)\n            dispatch(OrganiserActions.getAllRegionalScores(event.slug))\n        }\n    }, [event, dispatch])\n\n    console.log('global scores', globalScores)\n\n    // [\n    //     \"#####\",\n    //     \"Sunil Gupta\",\n    //     \"sunil.gupta@harness.io\"\n    // ],\n    // [\n    //     \"S.N.\",\n    //     \"Name\",\n    //     \"Punchline\",\n    //     \"Execution of the project?\",\n    //     \"Usefulness of the project\",\n    //     \"Presentation of the project\",\n    //     \"Ability to fix significant issues within existing projects and platform to improve scalability customer experience or our ability to debug and root cause issues\",\n    //     \"Innovation\",\n    //     \"Ability to develop test and deliver features and fixes quicker. eg. improvements to build process?\"\n    // ],\n    // [\n    //     1,\n    //     \"SearchOps\",\n    //     \"SearchOps A contextual search engine powered by Harness  MLOps Pipelines to fetch internal data sources as datasets \",\n    //     7,\n    //     9,\n    //     0,\n    //     8,\n    //     9,\n    //     7\n    // ],\n    // [\n    //     2,\n    //     \"Save The Day With Impersonation\",\n    //     \"Effortless Troubleshooting Instant Solutions Harness the Power of Impersonation\",\n    //     9,\n    //     7,\n    //     9,\n    //     6,\n    //     7,\n    //     7\n    // ],\n\n    if (globalScores.length === 0) {\n        return <div>Loading...</div>\n    }\n    return (\n        <>\n            {globalScores && (\n                // make a table with the global scores and style it with tailwind\n                <table className=\"table-auto w-full\">\n                    {/* <thead>\n                        <tr>\n                            {globalScores[0].map((score, index) => (\n                                <th key={index} className=\"px-4 py-2\">\n                                    {score}\n                                </th>\n                            ))}\n                        </tr>\n                    </thead> */}\n                    <tbody>\n                        {globalScores.map((score, index) => {\n                            // let header = false\n                            // let semiheader = false\n                            // let averageColumn = false\n                            if (score[0] === '#####') {\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className={`border px-4 py-2 bg-gray-200`}\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            if (score[0] === 'S.N.') {\n                                // alert(score)\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className=\"border px-4 py-2 bg-green-200\"\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            if (score[0] === '') {\n                                alert(score)\n                                return (\n                                    <tr key={index}>\n                                        {score.map((data, index) => {\n                                            return (\n                                                <td\n                                                    key={index}\n                                                    className={`border px-4 py-2 bg-yellow-200`}\n                                                >\n                                                    {data}\n                                                </td>\n                                            )\n                                        })}\n                                    </tr>\n                                )\n                            }\n                            return (\n                                <tr key={index}>\n                                    {score.map((data, index) => {\n                                        return (\n                                            <td\n                                                key={index}\n                                                className={`border px-4 py-2`}\n                                            >\n                                                {data}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            )}\n        </>\n    )\n}\n","import React, { useMemo } from 'react'\n\nimport { useRouteMatch, useLocation } from 'react-router'\nimport { useSelector } from 'react-redux'\nimport { useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\n\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport PageHeader from 'components/generic/PageHeader'\nimport MaterialTabsLayout from 'components/layouts/MaterialTabsLayout'\n\nimport DefaultTab from './default'\nimport OverallTab from './overall'\nimport TracksTab from './tracks'\nimport ChallengesTab from './challenges'\nimport ScoresTab from './globalScores'\nimport RegionalScoresTab from './regionalScores'\n\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\n\nexport default () => {\n    const event = useSelector(OrganiserSelectors.event)\n    const location = useLocation()\n    const match = useRouteMatch()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (event && event.slug) {\n            console.log('Dispatching with event slug:', event.slug)\n            dispatch(OrganiserActions.getALlGlobalScores(event.slug))\n        }\n    }, [])\n\n    const tabs = useMemo(() => {\n        const data = [\n            // {\n            //     path: '',\n            //     key: 'overview',\n            //     label: 'Overview',\n            //     component: DefaultTab,\n            // },\n            // {\n            //     path: '/overall',\n            //     key: 'overall',\n            //     label: 'Overall',\n            //     component: OverallTab,\n            // },\n        ]\n\n        data.push({\n            path: '/category',\n            key: 'tracksnew',\n            label: 'Category',\n            component: TracksTab,\n        })\n\n        data.push({\n            path: '/scores',\n            key: 'scores',\n            label: 'Global Scores',\n            component: ScoresTab,\n        })\n\n        data.push({\n            path: '/regional-scores',\n            key: 'regional-scores',\n            label: 'Regional Scores',\n            component: RegionalScoresTab,\n        })\n\n        // if (event?.challengesEnabled) {\n        //     data.push({\n        //         path: '/challenges',\n        //         key: 'challenges',\n        //         label: 'Challenges',\n        //         component: ChallengesTab,\n        //     })\n        // }\n\n        return data\n    }, [])\n\n    return (\n        <PageWrapper>\n            <PageHeader\n                heading=\"Results\"\n                subheading=\"View and configure the rankings of projects\"\n            />\n            <MaterialTabsLayout\n                transparent\n                tabs={tabs}\n                location={location}\n                baseRoute={match.url}\n            />\n        </PageWrapper>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useRouteMatch, useLocation } from 'react-router'\nimport { Typography, Box, Button } from '@material-ui/core'\nimport { EventTypes } from '@hackjunction/shared'\nimport TuneIcon from '@material-ui/icons/Tune'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport PeopleIcon from '@material-ui/icons/People'\nimport CodeIcon from '@material-ui/icons/Code'\nimport AssessmentIcon from '@material-ui/icons/Assessment'\nimport Alert from '@material-ui/lab/Alert'\nimport HowToVoteIcon from '@material-ui/icons/HowToVote'\nimport FinalistPage from './finalist'\nimport RatingPage from './rating'\nimport * as OrganiserSelectors from 'redux/organiser/selectors'\nimport * as OrganiserActions from 'redux/organiser/actions'\nimport * as DashboardSelectors from 'redux/dashboard/selectors'\nimport * as DashboardActions from 'redux/dashboard/actions'\nimport PageWrapper from 'components/layouts/PageWrapper'\nimport Image from 'components/generic/Image'\nimport BasicNavBar from 'components/navbars/BasicNavBar'\nimport SidebarLayout from 'components/layouts/SidebarLayout'\nimport EditPage from './edit'\nimport StarRateIcon from '@material-ui/icons/StarRate'\nimport ManagePage from './manage'\nimport ParticipantsPage from './participants'\nimport ProjectsPage from './projects'\nimport ResultsPage from './results'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport { push } from 'connected-react-router'\n\nexport default () => {\n    const match = useRouteMatch()\n    const location = useLocation()\n    const dispatch = useDispatch()\n    // @ts-ignore\n    const { slug } = match.params\n\n    // const event = useSelector(DashboardSelectors.event)\n    const event = useSelector(OrganiserSelectors.event)\n    const event2 = useSelector(DashboardSelectors.event)\n    const loading = useSelector(OrganiserSelectors.eventLoading)\n    const error = useSelector(OrganiserSelectors.eventError)\n\n    useEffect(() => {\n        dispatch(OrganiserActions.updateEvent(slug))\n    }, [dispatch, slug])\n\n    useEffect(() => {\n        dispatch(DashboardActions.updateEvent(slug))\n        dispatch(DashboardActions.updateRegistration(slug))\n        dispatch(DashboardActions.updateTeam(slug))\n        //TODO dont use OrganiserSelectors here\n        dispatch(OrganiserActions.updateProjects(slug))\n        dispatch(OrganiserActions.updateGavelProjects(slug))\n        dispatch(OrganiserActions.updateRankings(slug))\n        dispatch(OrganiserActions.generateResults(slug)) // TODO do we need to get results always?\n    }, [slug, dispatch])\n\n    useEffect(() => {\n        if (event) {\n            dispatch(\n                OrganiserActions.updateOrganisersForEvent(\n                    event.owner,\n                    event.organisers,\n                ),\n            )\n            dispatch(OrganiserActions.updateRegistrationsForEvent(slug))\n            dispatch(OrganiserActions.updateTeamsForEvent(slug))\n            dispatch(OrganiserActions.updateFilterGroups(slug))\n            dispatch(OrganiserActions.updateProjects(slug))\n            dispatch(OrganiserActions.updateGavelProjects(slug))\n            dispatch(OrganiserActions.updateRankings(slug))\n            dispatch(OrganiserActions.generateResults(slug)) // TODO do we need to get results always?\n        }\n    }, [dispatch, slug, event])\n\n    console.log('event', event.published, event.approved)\n    return (\n        <PageWrapper loading={loading} error={error}>\n            <Box style={{ zIndex: '2000', position: 'fixed' }}>\n                <Button\n                    style={{ color: 'white' }}\n                    onClick={() => dispatch(push('/organise'))}\n                >\n                    <ArrowBackIosIcon\n                        style={{ fontSize: '14px', color: 'white' }}\n                    />\n                    Back\n                </Button>\n            </Box>\n            <SidebarLayout\n                sidebarTopContent={\n                    <Box\n                        p={2}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                    >\n                        {event?.logo?.publicId ? (\n                            <Image\n                                publicId={event?.logo?.publicId}\n                                transformation={{\n                                    width: 200,\n                                }}\n                            />\n                        ) : (\n                            <Typography style={{ color: 'white' }} variant=\"h6\">\n                                {event.name}\n                            </Typography>\n                        )}\n                        <Typography variant=\"button\" style={{ color: 'white' }}>\n                            Admin\n                        </Typography>\n                    </Box>\n                }\n                topContent={\n                    <>\n                        {event.published && !event.approved ? (\n                            <Alert\n                                variant=\"filled\"\n                                severity=\"warning\"\n                                style={{\n                                    left: '25%',\n                                    width: '50%',\n                                    position: 'fixed',\n                                    zIndex: 100,\n                                }}\n                            >\n                                <>\n                                    The event will be published once approved by\n                                    admins. Questions about the approval process\n                                    can be directed to website@harness.io\n                                </>\n                            </Alert>\n                        ) : null}\n                        <BasicNavBar text={event.name} />\n                    </>\n                }\n                baseRoute={match.url}\n                location={location}\n                routes={[\n                    {\n                        key: 'edit',\n                        path: '/edit',\n                        icon: <TuneIcon />,\n                        label: 'Edit',\n                        component: EditPage,\n                    },\n                    // {\n                    //     key: 'stats',\n                    //     path: '/stats',\n                    //     exact: true,\n                    //     icon: <EqualizerIcon />,\n                    //     label: 'Stats',\n                    //     component: StatsPage,\n                    // },\n                    {\n                        key: 'participants',\n                        path: '/participants',\n                        icon: <PeopleIcon />,\n                        label: 'Participants',\n                        component: ParticipantsPage,\n                    },\n                    {\n                        key: 'finalist',\n                        path: '/winner',\n                        exact: true,\n                        hidden: false,\n                        locked: false,\n                        lockedDescription: 'Finalist closed',\n                        icon: <HowToVoteIcon />,\n                        label: 'Winner',\n                        component: FinalistPage,\n                    },\n                    {\n                        key: 'rating',\n                        path: '/rating',\n                        exact: true,\n                        hidden: false,\n                        locked: false,\n                        lockedDescription: 'Rating closed',\n                        icon: <StarRateIcon />,\n                        label: 'Rating',\n                        component: RatingPage,\n                    },\n                    {\n                        key: 'projects',\n                        path: '/projects',\n                        icon: <CodeIcon />,\n                        label: 'Projects',\n                        component: ProjectsPage,\n                    },\n                    {\n                        key: 'results',\n                        path: '/results',\n                        icon: <AssessmentIcon />,\n                        label: 'Results',\n                        component: ResultsPage,\n                    },\n                    // {\n                    //     key: 'checkin',\n                    //     path: '/check-in',\n                    //     exact: true,\n                    //     locked: event.eventType !== EventTypes.physical.id,\n                    //     lockedDescription: 'Only for physical events',\n                    //     icon: <CropFreeIcon />,\n                    //     label: 'Check-in',\n                    //     component: CheckinPage,\n                    // },\n                    // {\n                    //     key: 'travel-grants',\n                    //     path: '/travel-grants',\n                    //     exact: true,\n                    //     locked: event?.travelGrantConfig?.enabled ?? true,\n                    //     lockedDescription: 'Travel grants disabled',\n                    //     icon: <FlightTakeoffIcon />,\n                    //     label: 'Travel grants',\n                    //     component: TravelGrantsPage,\n                    // },\n                    {\n                        key: 'manage',\n                        path: '/manage',\n                        exact: true,\n                        icon: <SettingsIcon />,\n                        label: 'Manage',\n                        component: ManagePage,\n                    },\n                ]}\n            />\n        </PageWrapper>\n    )\n}\n","import React from 'react'\nimport { useRouteMatch } from 'react-router'\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nimport DefaultPage from './default'\nimport SlugPage from './slug'\n\nexport default () => {\n    const match = useRouteMatch()\n    return (\n        <Switch>\n            <Route exact={true} path={`${match.url}`} component={DefaultPage} />\n            <Route\n                exact={false}\n                path={`${match.url}/:slug`}\n                component={SlugPage}\n            />\n            <Redirect to={match.url} />\n        </Switch>\n    )\n}\n"],"sourceRoot":""}